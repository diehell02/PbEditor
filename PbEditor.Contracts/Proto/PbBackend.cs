// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbBackend {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_Backend__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.Backend, global::BonreePB.Backend.Builder> internal__static_BonreePB_Backend__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_BackendCallDetail__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.BackendCallDetail, global::BonreePB.BackendCallDetail.Builder> internal__static_BonreePB_BackendCallDetail__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_DataSource__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.DataSource, global::BonreePB.DataSource.Builder> internal__static_BonreePB_DataSource__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbBackend() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYl9iYWNrZW5kLnByb3RvEghCb25yZWVQQhoccGJfYnVzaW5lc3NUcmFu", 
            "c2FjdGlvbi5wcm90byLNAQoHQmFja2VuZBIKCgJpZBgBIAEoDRIjCgR0eXBl", 
            "GAIgASgOMhUuQm9ucmVlUEIuQmFja2VuZFR5cGUSEAoIY29ublR5cGUYAyAB", 
            "KAkSDAoEbmFtZRgEIAEoCRIMCgRob3N0GAUgASgJEgwKBHBvcnQYBiABKA0S", 
            "CwoDdXJsGAcgASgJEhAKCGRiVmVuZG9yGAggASgJEhEKCWRiVmVyc2lvbhgJ", 
            "IAEoCRIQCghkYlNjaGVtYRgKIAEoCRIRCglhZ2VudEdVSUQYCyABKAkipAEK", 
            "EUJhY2tlbmRDYWxsRGV0YWlsEgoKAmlkGAEgASgNEikKAmJ0GAIgASgLMh0u", 
            "Qm9ucmVlUEIuQnVzaW5lc3NUcmFuc2FjdGlvbhIfCgR0b0JFGAMgASgLMhEu", 
            "Qm9ucmVlUEIuQmFja2VuZBInCgR0eXBlGAQgASgOMhkuQm9ucmVlUEIuQmFj", 
            "a2VuZENhbGxUeXBlEg4KBmRldGFpbBgFIAEoCSJhCgpEYXRhU291cmNlEgoK", 
            "AmlkGAEgASgNEgwKBG5hbWUYAiABKAkSCwoDdXJsGAMgASgJEgwKBGhvc3QY", 
            "BCABKAkSDAoEcG9ydBgFIAEoDRIQCghkYlNjaGVtYRgGIAEoCSqGBwoLQmFj", 
            "a2VuZFR5cGUSFgoSQkFDS0VORF9UWVBFX01ZU1FMEAESFwoTQkFDS0VORF9U", 
            "WVBFX09SQUNMRRACEhwKGEJBQ0tFTkRfVFlQRV9NU1NRTFNFUlZFUhADEhgK", 
            "FEJBQ0tFTkRfVFlQRV9JQk1fREIyEAQSGwoXQkFDS0VORF9UWVBFX1BPU1RH", 
            "UkVTUUwQBRIZChVCQUNLRU5EX1RZUEVfU0hFTlRPTkcQBhIXChNCQUNLRU5E", 
            "X1RZUEVfU1lCQVNFEAcSHAoYQkFDS0VORF9UWVBFX0lCTV9JTkZPTUlYEAgS", 
            "GAoUQkFDS0VORF9UWVBFX01PTkdPREIQZRIZChVCQUNLRU5EX1RZUEVfTUVN", 
            "Q0FDSEUQZhIWChJCQUNLRU5EX1RZUEVfUkVESVMQZxIaChZCQUNLRU5EX1RZ", 
            "UEVfQ09VQ0hCQVNFEGgSGAoUQkFDS0VORF9UWVBFX0NPVUNIREIQaRIaChZC", 
            "QUNLRU5EX1RZUEVfQ0FTU0FORFJBEGoSFgoRQkFDS0VORF9UWVBFX0hUVFAQ", 
            "yQESGAoTQkFDS0VORF9UWVBFX1RIUklGVBDKARIcChdCQUNLRU5EX1RZUEVf", 
            "V0VCU0VSVklDRRDLARIbChZCQUNLRU5EX1RZUEVfV0VCU09DS0VUEMwBEhUK", 
            "EEJBQ0tFTkRfVFlQRV9XQ0YQzQESGwoWQkFDS0VORF9UWVBFX1dFQl9BUElf", 
            "MRDOARIbChZCQUNLRU5EX1RZUEVfV0VCX0FQSV8yEM8BEhcKEkJBQ0tFTkRf", 
            "VFlQRV9EVUJCTxDQARIZChRCQUNLRU5EX1RZUEVfU1VOX1JNSRDRARIYChNC", 
            "QUNLRU5EX1RZUEVfU09DS0VUENIBEhUKEEJBQ0tFTkRfVFlQRV9IU0YQ0wES", 
            "FQoQQkFDS0VORF9UWVBFX0pNUxDUARIcChdCQUNLRU5EX1RZUEVfU1BSSU5H", 
            "X0pNUxDVARIaChVCQUNLRU5EX1RZUEVfUkFCQklUTVEQ1gESFQoQQkFDS0VO", 
            "RF9UWVBFX0NYRhDXARIVChBCQUNLRU5EX1RZUEVfV1RDENgBEhYKEUJBQ0tF", 
            "TkRfVFlQRV9HUlBDENkBEhYKEUJBQ0tFTkRfVFlQRV9BWElTENoBEhYKEUJB", 
            "Q0tFTkRfVFlQRV9TT0FQENsBEhYKEUJBQ0tFTkRfVFlQRV9TT0xSENwBKqsB", 
            "Cg9CYWNrZW5kQ2FsbFR5cGUSEgoOQlFUX1NRTF9TRUxFQ1QQARISCg5CUVRf", 
            "U1FMX1VQREFURRACEhIKDkJRVF9TUUxfSU5TRVJUEAMSEgoOQlFUX1NRTF9E", 
            "RUxFVEUQBBIRCg1CUVRfTk9TUUxfU0VUEGUSEQoNQlFUX05PU1FMX0dFVBBm", 
            "EhEKDUJRVF9OT1NRTF9ERUwQZxIPCgpCUVRfUkVNT1RFEMkBQhkKF2NvbS5i", 
            "b25yZWUucHJvdG9idWYuYXBtSuQuCgYSBAAAXAEKCAoBAhIDAAgQCggKAQgS", 
            "AwEAMAoLCgQI5wcAEgMBADAKDAoFCOcHAAISAwEHEwoNCgYI5wcAAgASAwEH", 
            "EwoOCgcI5wcAAgABEgMBBxMKDAoFCOcHAAcSAwEWLwoJCgIDABIDAwclChkK", 
            "AgUAEgQGAC8BGg3lkI7nq6/nsbvlnosKCgoKAwUAARIDBgUQCkQKBAUAAgAS", 
            "AwgCIhoEU1FMCiIxd2Vi5bGV56S65ou85o6l5pa55byP77yaIOaVsOaNruW6", 
            "k+WQjS1NeVNRTC1ob3N0CgoMCgUFAAIAARIDCAIUCgwKBQUAAgACEgMIICEK", 
            "PwoEBQACARIDCQIiIjJ3ZWLlsZXnpLrmi7zmjqXmlrnlvI/vvJog5pWw5o2u", 
            "5bqT5ZCNLU9yYWNsZS1ob3N0CgoMCgUFAAIBARIDCQIVCgwKBQUAAgECEgMJ", 
            "ICEKQgoEBQACAhIDCgIiIjV3ZWLlsZXnpLrmi7zmjqXmlrnlvI/vvJog5pWw", 
            "5o2u5bqT5ZCNLVNRTFNlcnZlci1ob3N0CgoMCgUFAAICARIDCgIaCgwKBQUA", 
            "AgICEgMKICEKPAoEBQACAxIDCwIiIi93ZWLlsZXnpLrmi7zmjqXmlrnlvI/v", 
            "vJog5pWw5o2u5bqT5ZCNLURCMi1ob3N0CgoMCgUFAAIDARIDCwIWCgwKBQUA", 
            "AgMCEgMLICEKQwoEBQACBBIDDAIiIjZ3ZWLlsZXnpLrmi7zmjqXmlrnlvI/v", 
            "vJog5pWw5o2u5bqT5ZCNLVBvc3RncmVTUUwtaG9zdAoKDAoFBQACBAESAwwC", 
            "GQoMCgUFAAIEAhIDDCAhCkEKBAUAAgUSAw0CIiI0d2Vi5bGV56S65ou85o6l", 
            "5pa55byP77yaIOaVsOaNruW6k+WQjS1TaGVuVG9uZy1ob3N0CgoMCgUFAAIF", 
            "ARIDDQIXCgwKBQUAAgUCEgMNICEKPwoEBQACBhIDDgIiIjJ3ZWLlsZXnpLrm", 
            "i7zmjqXmlrnlvI/vvJog5pWw5o2u5bqT5ZCNLVN5YmFzZS1ob3N0CgoMCgUF", 
            "AAIGARIDDgIVCgwKBQUAAgYCEgMOICEKRAoEBQACBxIDDwIiIjd3ZWLlsZXn", 
            "pLrmi7zmjqXmlrnlvI/vvJog5pWw5o2u5bqT5ZCNLUlCTS1JbmZvbWl4LWhv", 
            "c3QKCgwKBQUAAgcBEgMPAhoKDAoFBQACBwISAw8gIQo+CgQFAAIIEgMTAiQa", 
            "Bk5PU1FMCiIpd2Vi5bGV56S65ou85o6l5pa55byP77yaIE1vbmdvLWhvc3Q6", 
            "cG9ydAoKDAoFBQACCAESAxMCFgoMCgUFAAIIAhIDEyAjCjAKBAUAAgkSAxQC", 
            "JCIjd2Vi5bGV56S65ou85o6l5pa55byP77yaIE1lbWNhY2hlZAoKDAoFBQAC", 
            "CQESAxQCFwoMCgUFAAIJAhIDFCAjCjYKBAUAAgoSAxUCJCIpd2Vi5bGV56S6", 
            "5ou85o6l5pa55byP77yaIFJlZGlzLWhvc3Q6cG9ydAoKDAoFBQACCgESAxUC", 
            "FAoMCgUFAAIKAhIDFSAjCjUKBAUAAgsSAxYCJCIod2Vi5bGV56S65ou85o6l", 
            "5pa55byP77yaIENvdWNoQmFzZS1ob3N0CgoMCgUFAAILARIDFgIYCgwKBQUA", 
            "AgsCEgMWICMKOAoEBQACDBIDFwIkIit3ZWLlsZXnpLrmi7zmjqXmlrnlvI/v", 
            "vJogQ291Y2hEQi1ob3N0OnBvcnQKCgwKBQUAAgwBEgMXAhYKDAoFBQACDAIS", 
            "AxcgIwo6CgQFAAINEgMYAiQiLXdlYuWxleekuuaLvOaOpeaWueW8j++8miBD", 
            "QVNTQU5EUkEtaG9zdDpwb3J0CgoMCgUFAAINARIDGAIYCgwKBQUAAg0CEgMY", 
            "ICMKRAoEBQACDhIDGwIkGg3ov5znqIvosIPnlKgKIih3ZWLlsZXnpLrmi7zm", 
            "jqXmlrnlvI/vvJogSHR0cC1ob3N0OnBvcnQKCgwKBQUAAg4BEgMbAhMKDAoF", 
            "BQACDgISAxsgIwo3CgQFAAIPEgMcAiQiKndlYuWxleekuuaLvOaOpeaWueW8", 
            "j++8miBUaHJpZnQtaG9zdDpwb3J0CgoMCgUFAAIPARIDHAIVCgwKBQUAAg8C", 
            "EgMcICMKOwoEBQACEBIDHQIkIi53ZWLlsZXnpLrmi7zmjqXmlrnlvI/vvJog", 
            "V2ViU2VydmljZS1ob3N0OnBvcnQKCgwKBQUAAhABEgMdAhkKDAoFBQACEAIS", 
            "Ax0gIwo6CgQFAAIREgMeAiQiLXdlYuWxleekuuaLvOaOpeaWueW8j++8miBX", 
            "ZWJTb2NrZXQtaG9zdDpwb3J0CgoMCgUFAAIRARIDHgIYCgwKBQUAAhECEgMe", 
            "ICMKNAoEBQACEhIDHwIkIid3ZWLlsZXnpLrmi7zmjqXmlrnlvI/vvJogV0NG", 
            "LWhvc3Q6cG9ydAoKDAoFBQACEgESAx8CEgoMCgUFAAISAhIDHyAjCjkKBAUA", 
            "AhMSAyACJCIsd2Vi5bGV56S65ou85o6l5pa55byP77yaIFdlYi1BcGkxLWhv", 
            "c3Q6cG9ydAoKDAoFBQACEwESAyACGAoMCgUFAAITAhIDICAjCjkKBAUAAhQS", 
            "AyECJCIsd2Vi5bGV56S65ou85o6l5pa55byP77yaIFdlYi1BcGkyLWhvc3Q6", 
            "cG9ydAoKDAoFBQACFAESAyECGAoMCgUFAAIUAhIDISAjCjYKBAUAAhUSAyIC", 
            "JCIpd2Vi5bGV56S65ou85o6l5pa55byP77yaIER1YmJvLWhvc3Q6cG9ydAoK", 
            "DAoFBQACFQESAyICFAoMCgUFAAIVAhIDIiAjCjQKBAUAAhYSAyMCJCInd2Vi", 
            "5bGV56S65ou85o6l5pa55byP77yaIFJNSS1ob3N0OnBvcnQKCgwKBQUAAhYB", 
            "EgMjAhYKDAoFBQACFgISAyMgIwo1CgQFAAIXEgMkAiQiKHdlYuWxleekuuaL", 
            "vOaOpeaWueW8j++8miBTb2NrLWhvc3Q6cG9ydAoKDAoFBQACFwESAyQCFQoM", 
            "CgUFAAIXAhIDJCAjCjQKBAUAAhgSAyUCJCInd2Vi5bGV56S65ou85o6l5pa5", 
            "5byP77yaIEhTRi1ob3N0OnBvcnQKCgwKBQUAAhgBEgMlAhIKDAoFBQACGAIS", 
            "AyUgIwo0CgQFAAIZEgMmAiQiJ3dlYuWxleekuuaLvOaOpeaWueW8j++8miBK", 
            "TVMtaG9zdDpwb3J0CgoMCgUFAAIZARIDJgISCgwKBQUAAhkCEgMmICMKOwoE", 
            "BQACGhIDJwIkIi53ZWLlsZXnpLrmi7zmjqXmlrnlvI/vvJogU3ByaW5nLUpN", 
            "Uy1ob3N0OnBvcnQKCgwKBQUAAhoBEgMnAhkKDAoFBQACGgISAycgIwo5CgQF", 
            "AAIbEgMoAiQiLHdlYuWxleekuuaLvOaOpeaWueW8j++8miBSYWJiaXRNUS1o", 
            "b3N0OnBvcnQKCgwKBQUAAhsBEgMoAhcKDAoFBQACGwISAyggIwo0CgQFAAIc", 
            "EgMpAiQiJ3dlYuWxleekuuaLvOaOpeaWueW8j++8miBDWEYtaG9zdDpwb3J0", 
            "CgoMCgUFAAIcARIDKQISCgwKBQUAAhwCEgMpICMKNAoEBQACHRIDKgIkIid3", 
            "ZWLlsZXnpLrmi7zmjqXmlrnlvI/vvJogV1RDLWhvc3Q6cG9ydAoKDAoFBQAC", 
            "HQESAyoCEgoMCgUFAAIdAhIDKiAjCjUKBAUAAh4SAysCJCIod2Vi5bGV56S6", 
            "5ou85o6l5pa55byP77yaIEdSUEMtaG9zdDpwb3J0CgoMCgUFAAIeARIDKwIT", 
            "CgwKBQUAAh4CEgMrICMKNQoEBQACHxIDLAIkIih3ZWLlsZXnpLrmi7zmjqXm", 
            "lrnlvI/vvJogQVhJUy1ob3N0OnBvcnQKCgwKBQUAAh8BEgMsAhMKDAoFBQAC", 
            "HwISAywgIwo1CgQFAAIgEgMtAiQiKHdlYuWxleekuuaLvOaOpeaWueW8j++8", 
            "miBTT0FQLWhvc3Q6cG9ydAoKDAoFBQACIAESAy0CEwoMCgUFAAIgAhIDLSAj", 
            "CjUKBAUAAiESAy4CJCIod2Vi5bGV56S65ou85o6l5pa55byP77yaIFNPTFIt", 
            "aG9zdDpwb3J0CgoMCgUFAAIhARIDLgITCgwKBQUAAiECEgMuICMKGQoCBAAS", 
            "BDIAPgEaDeWQjuerr+S/oeaBrwoKCgoDBAABEgMyCA8KVQoEBAACABIDMwQm", 
            "IkjlkI7nq69pZO+8jGFnZW505LiK5oql55qE5pe25YCZ5Li656m677yMIOeU", 
            "sWNvbnRyb2xsZXLnlJ/miJBpZOW5tui1i+WAvAoKDAoFBAACAAQSAzMEDAoM", 
            "CgUEAAIABRIDMw0TCgwKBQQAAgABEgMzFBYKDAoFBAACAAMSAzMkJQoaCgQE", 
            "AAIBEgM0BCYiDeWQjuerr+exu+WeiwoKDAoFBAACAQQSAzQEDAoMCgUEAAIB", 
            "BhIDNA0YCgwKBQQAAgEBEgM0GR0KDAoFBAACAQMSAzQkJQosCgQEAAICEgM1", 
            "BCYiH+i/nuaOpeexu+Wei++8jEpEQkMvQURPLk5FVOetiQoKDAoFBAACAgQS", 
            "AzUEDAoMCgUEAAICBRIDNQ0TCgwKBQQAAgIBEgM1FBwKDAoFBAACAgMSAzUk", 
            "JQoaCgQEAAIDEgM2BCYiDeWQjuerr+WQjeensAoKDAoFBAACAwQSAzYEDAoM", 
            "CgUEAAIDBRIDNg0TCgwKBQQAAgMBEgM2FBgKDAoFBAACAwMSAzYkJQoYCgQE", 
            "AAIEEgM3BCYiC+WQjuerr2hvc3QKCgwKBQQAAgQEEgM3BAwKDAoFBAACBAUS", 
            "AzcNEwoMCgUEAAIEARIDNxQYCgwKBQQAAgQDEgM3JCUKGgoEBAACBRIDOAQm", 
            "Ig3lkI7nq6/nq6/lj6MKCgwKBQQAAgUEEgM4BAwKDAoFBAACBQUSAzgNEwoM", 
            "CgUEAAIFARIDOBQYCgwKBQQAAgUDEgM4JCUKIQoEBAACBhIDOQQmIhR1cmws", 
            "6L+e5o6l5Zyw5Z2A562JCgoMCgUEAAIGBBIDOQQMCgwKBQQAAgYFEgM5DRMK", 
            "DAoFBAACBgESAzkUFwoMCgUEAAIGAxIDOSQlCh0KBAQAAgcSAzoEJiIQ5pWw", 
            "5o2u5bqT5Y6C5ZWGCgoMCgUEAAIHBBIDOgQMCgwKBQQAAgcFEgM6DRMKDAoF", 
            "BAACBwESAzoUHAoMCgUEAAIHAxIDOiQlCh0KBAQAAggSAzsEJiIQ5pWw5o2u", 
            "5bqT54mI5pysCgoMCgUEAAIIBBIDOwQMCgwKBQQAAggFEgM7DRMKDAoFBAAC", 
            "CAESAzsUHQoMCgUEAAIIAxIDOyQlCh0KBAQAAgkSAzwEJyIQ5pWw5o2u5bqT", 
            "5bqT5ZCNCgoMCgUEAAIJBBIDPAQMCgwKBQQAAgkFEgM8DRMKDAoFBAACCQES", 
            "AzwUHAoMCgUEAAIJAxIDPCQmClYKBAQAAgoSAz0EJyJJ5ZCO56uv5a655Zmo", 
            "55qEYWdlbnRndWlk77yMSFRUUOWklumDqOiwg+eUqOWuueWZqOWuieijheS6", 
            "hmFnZW505omN5pyJ5YC8CgoMCgUEAAIKBBIDPQQMCgwKBQQAAgoFEgM9DRMK", 
            "DAoFBAACCgESAz0UHQoMCgUEAAIKAxIDPSQmCh8KAgUBEgRBAEoBGhPlkI7n", 
            "q6/osIPnlKjnsbvlnosKCgoKAwUBARIDQQUUChcKBAUBAgASA0IEFyIKU1FM", 
            "5p+l6K+iCgoMCgUFAQIAARIDQgQSCgwKBQUBAgACEgNCFRYKFwoEBQECARID", 
            "QwQXIgpTUUzmm7TmlrAKCgwKBQUBAgEBEgNDBBIKDAoFBQECAQISA0MVFgoX", 
            "CgQFAQICEgNEBBciClNRTOaPkuWFpQoKDAoFBQECAgESA0QEEgoMCgUFAQIC", 
            "AhIDRBUWChcKBAUBAgMSA0UEFyIKU1FM5Yig6ZmkCgoMCgUFAQIDARIDRQQS", 
            "CgwKBQUBAgMCEgNFFRYKFwoEBQECBBIDRgQYIgpOT1NRTCBzZXQKCgwKBQUB", 
            "AgQBEgNGBBEKDAoFBQECBAISA0YUFwoXCgQFAQIFEgNHBBgiCk5PU1FMIGdl", 
            "dAoKDAoFBQECBQESA0cEEQoMCgUFAQIFAhIDRxQXChoKBAUBAgYSA0gEGCIN", 
            "Tk9TUUwg5Yig6ZmkCgoMCgUFAQIGARIDSAQRCgwKBQUBAgYCEgNIFBcKGgoE", 
            "BQECBxIDSQQYIg3lpJbpg6josIPnlKgKCgwKBQUBAgcBEgNJBA4KDAoFBQEC", 
            "BwISA0kUFwofCgIEARIETABSARoT5ZCO56uv5p+l6K+i6K+t5Y+lCgoKCgME", 
            "AQESA0wIGQpbCgQEAQIAEgNNBCoiTuafpeivouivreWPpWlk77yMYWdlbnTk", 
            "uIrmiqXnmoTml7blgJnkuLrnqbrvvIwg55SxY29udHJvbGxlcueUn+aIkGlk", 
            "5bm26LWL5YC8CgoMCgUEAQIABBIDTQQMCgwKBQQBAgAFEgNNDRMKDAoFBAEC", 
            "AAESA00UFgoMCgUEAQIAAxIDTSgpCi8KBAQBAgESA04EKiIi5ZCO56uv6LCD", 
            "55So6K+m5oOF5a+55bqU55qE5Lia5YqhCgoMCgUEAQIBBBIDTgQMCgwKBQQB", 
            "AgEGEgNODSAKDAoFBAECAQESA04hIwoMCgUEAQIBAxIDTigpChQKBAQBAgIS", 
            "A08EKiIH5ZCO56uvCgoMCgUEAQICBBIDTwQMCgwKBQQBAgIGEgNPDRQKDAoF", 
            "BAECAgESA08VGQoMCgUEAQICAxIDTygpCiAKBAQBAgMSA1AEKiIT5ZCO56uv", 
            "5p+l6K+i57G75Z6LCgoMCgUEAQIDBBIDUAQMCgwKBQQBAgMGEgNQDRwKDAoF", 
            "BAECAwESA1AdIQoMCgUEAQIDAxIDUCgpCn8KBAQBAgQSA1EEKiJy5ZCO56uv", 
            "5p+l6K+i6K+m5oOF77yMc3Fs6K+t5Y+l44CBdXJs562J77yM6K+l5a2X5q61", 
            "55So5p2l5L2c5Li65p+l6K+i55qE5ZSv5LiA5qCH6K+G77yM6ZyA6KaB6L+H", 
            "5ruk5o6Jd2hlcmXmnaHku7YKCgwKBQQBAgQEEgNRBAwKDAoFBAECBAUSA1EN", 
            "EwoMCgUEAQIEARIDURQaCgwKBQQBAgQDEgNRKCkKHwoCBAISBFUAXAEaE+aV", 
            "sOaNruW6k+i/nuaOpeaxoAoKCgoDBAIBEgNVCBIKWAoEBAICABIDVgQqIkvo", 
            "v57mjqXmsaBpZO+8jGFnZW505LiK5oql55qE5pe25YCZ5Li656m677yMIOeU", 
            "sWNvbnRyb2xsZXLnlJ/miJBpZOW5tui1i+WAvAoKDAoFBAICAAQSA1YEDAoM", 
            "CgUEAgIABRIDVg0TCgwKBQQCAgABEgNWFBYKDAoFBAICAAMSA1YoKQodCgQE", 
            "AgIBEgNXBCoiEOi/nuaOpeaxoOWQjeensAoKDAoFBAICAQQSA1cEDAoMCgUE", 
            "AgIBBRIDVw0TCgwKBQQCAgEBEgNXFBgKDAoFBAICAQMSA1coKQoeCgQEAgIC", 
            "EgNYBCoiEWpkYmPov57mjqXlnLDlnYAKCgwKBQQCAgIEEgNYBAwKDAoFBAIC", 
            "AgUSA1gNEwoMCgUEAgICARIDWBQXCgwKBQQCAgIDEgNYKCkKGwoEBAICAxID", 
            "WQQqIg7mlbDmja7lupNob3N0CgoMCgUEAgIDBBIDWQQMCgwKBQQCAgMFEgNZ", 
            "DRMKDAoFBAICAwESA1kUGAoMCgUEAgIDAxIDWSgpCh0KBAQCAgQSA1oEKiIQ", 
            "5pWw5o2u5bqT56uv5Y+jCgoMCgUEAgIEBBIDWgQMCgwKBQQCAgQFEgNaDRMK", 
            "DAoFBAICBAESA1oUGAoMCgUEAgIEAxIDWigpCh0KBAQCAgUSA1sEKiIQ5pWw", 
            "5o2u5bqT5ZCN56ewCgoMCgUEAgIFBBIDWwQMCgwKBQQCAgUFEgNbDRMKDAoF", 
          "BAICBQESA1sUHAoMCgUEAgIFAxIDWygp"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_Backend__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_Backend__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.Backend, global::BonreePB.Backend.Builder>(internal__static_BonreePB_Backend__Descriptor,
                new string[] { "Id", "Type", "ConnType", "Name", "Host", "Port", "Url", "DbVendor", "DbVersion", "DbSchema", "AgentGUID", });
        internal__static_BonreePB_BackendCallDetail__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_BackendCallDetail__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.BackendCallDetail, global::BonreePB.BackendCallDetail.Builder>(internal__static_BonreePB_BackendCallDetail__Descriptor,
                new string[] { "Id", "Bt", "ToBE", "Type", "Detail", });
        internal__static_BonreePB_DataSource__Descriptor = Descriptor.MessageTypes[2];
        internal__static_BonreePB_DataSource__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.DataSource, global::BonreePB.DataSource.Builder>(internal__static_BonreePB_DataSource__Descriptor,
                new string[] { "Id", "Name", "Url", "Host", "Port", "DbSchema", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbBusinessTransaction.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbBusinessTransaction.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum BackendType {
    BACKEND_TYPE_MYSQL = 1,
    BACKEND_TYPE_ORACLE = 2,
    BACKEND_TYPE_MSSQLSERVER = 3,
    BACKEND_TYPE_IBM_DB2 = 4,
    BACKEND_TYPE_POSTGRESQL = 5,
    BACKEND_TYPE_SHENTONG = 6,
    BACKEND_TYPE_SYBASE = 7,
    BACKEND_TYPE_IBM_INFOMIX = 8,
    BACKEND_TYPE_MONGODB = 101,
    BACKEND_TYPE_MEMCACHE = 102,
    BACKEND_TYPE_REDIS = 103,
    BACKEND_TYPE_COUCHBASE = 104,
    BACKEND_TYPE_COUCHDB = 105,
    BACKEND_TYPE_CASSANDRA = 106,
    BACKEND_TYPE_HTTP = 201,
    BACKEND_TYPE_THRIFT = 202,
    BACKEND_TYPE_WEBSERVICE = 203,
    BACKEND_TYPE_WEBSOCKET = 204,
    BACKEND_TYPE_WCF = 205,
    BACKEND_TYPE_WEB_API_1 = 206,
    BACKEND_TYPE_WEB_API_2 = 207,
    BACKEND_TYPE_DUBBO = 208,
    BACKEND_TYPE_SUN_RMI = 209,
    BACKEND_TYPE_SOCKET = 210,
    BACKEND_TYPE_HSF = 211,
    BACKEND_TYPE_JMS = 212,
    BACKEND_TYPE_SPRING_JMS = 213,
    BACKEND_TYPE_RABBITMQ = 214,
    BACKEND_TYPE_CXF = 215,
    BACKEND_TYPE_WTC = 216,
    BACKEND_TYPE_GRPC = 217,
    BACKEND_TYPE_AXIS = 218,
    BACKEND_TYPE_SOAP = 219,
    BACKEND_TYPE_SOLR = 220,
  }
  
  public enum BackendCallType {
    BQT_SQL_SELECT = 1,
    BQT_SQL_UPDATE = 2,
    BQT_SQL_INSERT = 3,
    BQT_SQL_DELETE = 4,
    BQT_NOSQL_SET = 101,
    BQT_NOSQL_GET = 102,
    BQT_NOSQL_DEL = 103,
    BQT_REMOTE = 201,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Backend : pb::GeneratedMessage<Backend, Backend.Builder> {
    private Backend() { }
    private static readonly Backend defaultInstance = new Backend().MakeReadOnly();
    private static readonly string[] _backendFieldNames = new string[] { "agentGUID", "connType", "dbSchema", "dbVendor", "dbVersion", "host", "id", "name", "port", "type", "url" };
    private static readonly uint[] _backendFieldTags = new uint[] { 90, 26, 82, 66, 74, 42, 8, 34, 48, 16, 58 };
    public static Backend DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Backend DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Backend ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbBackend.internal__static_BonreePB_Backend__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Backend, Backend.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbBackend.internal__static_BonreePB_Backend__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::BonreePB.BackendType type_ = global::BonreePB.BackendType.BACKEND_TYPE_MYSQL;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.BackendType Type {
      get { return type_; }
    }
    
    public const int ConnTypeFieldNumber = 3;
    private bool hasConnType;
    private string connType_ = "";
    public bool HasConnType {
      get { return hasConnType; }
    }
    public string ConnType {
      get { return connType_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int HostFieldNumber = 5;
    private bool hasHost;
    private string host_ = "";
    public bool HasHost {
      get { return hasHost; }
    }
    public string Host {
      get { return host_; }
    }
    
    public const int PortFieldNumber = 6;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint Port {
      get { return port_; }
    }
    
    public const int UrlFieldNumber = 7;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int DbVendorFieldNumber = 8;
    private bool hasDbVendor;
    private string dbVendor_ = "";
    public bool HasDbVendor {
      get { return hasDbVendor; }
    }
    public string DbVendor {
      get { return dbVendor_; }
    }
    
    public const int DbVersionFieldNumber = 9;
    private bool hasDbVersion;
    private string dbVersion_ = "";
    public bool HasDbVersion {
      get { return hasDbVersion; }
    }
    public string DbVersion {
      get { return dbVersion_; }
    }
    
    public const int DbSchemaFieldNumber = 10;
    private bool hasDbSchema;
    private string dbSchema_ = "";
    public bool HasDbSchema {
      get { return hasDbSchema; }
    }
    public string DbSchema {
      get { return dbSchema_; }
    }
    
    public const int AgentGUIDFieldNumber = 11;
    private bool hasAgentGUID;
    private string agentGUID_ = "";
    public bool HasAgentGUID {
      get { return hasAgentGUID; }
    }
    public string AgentGUID {
      get { return agentGUID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _backendFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[6], Id);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[9], (int) Type, Type);
      }
      if (hasConnType) {
        output.WriteString(3, field_names[1], ConnType);
      }
      if (hasName) {
        output.WriteString(4, field_names[7], Name);
      }
      if (hasHost) {
        output.WriteString(5, field_names[5], Host);
      }
      if (hasPort) {
        output.WriteUInt32(6, field_names[8], Port);
      }
      if (hasUrl) {
        output.WriteString(7, field_names[10], Url);
      }
      if (hasDbVendor) {
        output.WriteString(8, field_names[3], DbVendor);
      }
      if (hasDbVersion) {
        output.WriteString(9, field_names[4], DbVersion);
      }
      if (hasDbSchema) {
        output.WriteString(10, field_names[2], DbSchema);
      }
      if (hasAgentGUID) {
        output.WriteString(11, field_names[0], AgentGUID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
      }
      if (hasConnType) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ConnType);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Name);
      }
      if (hasHost) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Host);
      }
      if (hasPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Port);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(7, Url);
      }
      if (hasDbVendor) {
        size += pb::CodedOutputStream.ComputeStringSize(8, DbVendor);
      }
      if (hasDbVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(9, DbVersion);
      }
      if (hasDbSchema) {
        size += pb::CodedOutputStream.ComputeStringSize(10, DbSchema);
      }
      if (hasAgentGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(11, AgentGUID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Backend ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Backend ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Backend ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Backend ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Backend ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Backend ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Backend ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Backend ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Backend ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Backend ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Backend MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Backend prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Backend, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Backend cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Backend result;
      
      private Backend PrepareBuilder() {
        if (resultIsReadOnly) {
          Backend original = result;
          result = new Backend();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Backend MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.Backend.Descriptor; }
      }
      
      public override Backend DefaultInstanceForType {
        get { return global::BonreePB.Backend.DefaultInstance; }
      }
      
      public override Backend BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Backend) {
          return MergeFrom((Backend) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Backend other) {
        if (other == global::BonreePB.Backend.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasConnType) {
          ConnType = other.ConnType;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasHost) {
          Host = other.Host;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasDbVendor) {
          DbVendor = other.DbVendor;
        }
        if (other.HasDbVersion) {
          DbVersion = other.DbVersion;
        }
        if (other.HasDbSchema) {
          DbSchema = other.DbSchema;
        }
        if (other.HasAgentGUID) {
          AgentGUID = other.AgentGUID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_backendFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _backendFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasConnType = input.ReadString(ref result.connType_);
              break;
            }
            case 34: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 42: {
              result.hasHost = input.ReadString(ref result.host_);
              break;
            }
            case 48: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
            case 58: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 66: {
              result.hasDbVendor = input.ReadString(ref result.dbVendor_);
              break;
            }
            case 74: {
              result.hasDbVersion = input.ReadString(ref result.dbVersion_);
              break;
            }
            case 82: {
              result.hasDbSchema = input.ReadString(ref result.dbSchema_);
              break;
            }
            case 90: {
              result.hasAgentGUID = input.ReadString(ref result.agentGUID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.BackendType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.BackendType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.BackendType.BACKEND_TYPE_MYSQL;
        return this;
      }
      
      public bool HasConnType {
        get { return result.hasConnType; }
      }
      public string ConnType {
        get { return result.ConnType; }
        set { SetConnType(value); }
      }
      public Builder SetConnType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConnType = true;
        result.connType_ = value;
        return this;
      }
      public Builder ClearConnType() {
        PrepareBuilder();
        result.hasConnType = false;
        result.connType_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasHost {
        get { return result.hasHost; }
      }
      public string Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasDbVendor {
        get { return result.hasDbVendor; }
      }
      public string DbVendor {
        get { return result.DbVendor; }
        set { SetDbVendor(value); }
      }
      public Builder SetDbVendor(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDbVendor = true;
        result.dbVendor_ = value;
        return this;
      }
      public Builder ClearDbVendor() {
        PrepareBuilder();
        result.hasDbVendor = false;
        result.dbVendor_ = "";
        return this;
      }
      
      public bool HasDbVersion {
        get { return result.hasDbVersion; }
      }
      public string DbVersion {
        get { return result.DbVersion; }
        set { SetDbVersion(value); }
      }
      public Builder SetDbVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDbVersion = true;
        result.dbVersion_ = value;
        return this;
      }
      public Builder ClearDbVersion() {
        PrepareBuilder();
        result.hasDbVersion = false;
        result.dbVersion_ = "";
        return this;
      }
      
      public bool HasDbSchema {
        get { return result.hasDbSchema; }
      }
      public string DbSchema {
        get { return result.DbSchema; }
        set { SetDbSchema(value); }
      }
      public Builder SetDbSchema(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDbSchema = true;
        result.dbSchema_ = value;
        return this;
      }
      public Builder ClearDbSchema() {
        PrepareBuilder();
        result.hasDbSchema = false;
        result.dbSchema_ = "";
        return this;
      }
      
      public bool HasAgentGUID {
        get { return result.hasAgentGUID; }
      }
      public string AgentGUID {
        get { return result.AgentGUID; }
        set { SetAgentGUID(value); }
      }
      public Builder SetAgentGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentGUID = true;
        result.agentGUID_ = value;
        return this;
      }
      public Builder ClearAgentGUID() {
        PrepareBuilder();
        result.hasAgentGUID = false;
        result.agentGUID_ = "";
        return this;
      }
    }
    static Backend() {
      object.ReferenceEquals(global::BonreePB.PbBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BackendCallDetail : pb::GeneratedMessage<BackendCallDetail, BackendCallDetail.Builder> {
    private BackendCallDetail() { }
    private static readonly BackendCallDetail defaultInstance = new BackendCallDetail().MakeReadOnly();
    private static readonly string[] _backendCallDetailFieldNames = new string[] { "bt", "detail", "id", "toBE", "type" };
    private static readonly uint[] _backendCallDetailFieldTags = new uint[] { 18, 42, 8, 26, 32 };
    public static BackendCallDetail DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BackendCallDetail DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BackendCallDetail ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbBackend.internal__static_BonreePB_BackendCallDetail__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BackendCallDetail, BackendCallDetail.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbBackend.internal__static_BonreePB_BackendCallDetail__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
    }
    
    public const int BtFieldNumber = 2;
    private bool hasBt;
    private global::BonreePB.BusinessTransaction bt_;
    public bool HasBt {
      get { return hasBt; }
    }
    public global::BonreePB.BusinessTransaction Bt {
      get { return bt_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public const int ToBEFieldNumber = 3;
    private bool hasToBE;
    private global::BonreePB.Backend toBE_;
    public bool HasToBE {
      get { return hasToBE; }
    }
    public global::BonreePB.Backend ToBE {
      get { return toBE_ ?? global::BonreePB.Backend.DefaultInstance; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::BonreePB.BackendCallType type_ = global::BonreePB.BackendCallType.BQT_SQL_SELECT;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.BackendCallType Type {
      get { return type_; }
    }
    
    public const int DetailFieldNumber = 5;
    private bool hasDetail;
    private string detail_ = "";
    public bool HasDetail {
      get { return hasDetail; }
    }
    public string Detail {
      get { return detail_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _backendCallDetailFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[2], Id);
      }
      if (hasBt) {
        output.WriteMessage(2, field_names[0], Bt);
      }
      if (hasToBE) {
        output.WriteMessage(3, field_names[3], ToBE);
      }
      if (hasType) {
        output.WriteEnum(4, field_names[4], (int) Type, Type);
      }
      if (hasDetail) {
        output.WriteString(5, field_names[1], Detail);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasBt) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Bt);
      }
      if (hasToBE) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, ToBE);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
      }
      if (hasDetail) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Detail);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BackendCallDetail ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BackendCallDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BackendCallDetail ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BackendCallDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BackendCallDetail ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BackendCallDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BackendCallDetail ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BackendCallDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BackendCallDetail ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BackendCallDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BackendCallDetail MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BackendCallDetail prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BackendCallDetail, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BackendCallDetail cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BackendCallDetail result;
      
      private BackendCallDetail PrepareBuilder() {
        if (resultIsReadOnly) {
          BackendCallDetail original = result;
          result = new BackendCallDetail();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BackendCallDetail MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.BackendCallDetail.Descriptor; }
      }
      
      public override BackendCallDetail DefaultInstanceForType {
        get { return global::BonreePB.BackendCallDetail.DefaultInstance; }
      }
      
      public override BackendCallDetail BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BackendCallDetail) {
          return MergeFrom((BackendCallDetail) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BackendCallDetail other) {
        if (other == global::BonreePB.BackendCallDetail.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasBt) {
          MergeBt(other.Bt);
        }
        if (other.HasToBE) {
          MergeToBE(other.ToBE);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDetail) {
          Detail = other.Detail;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_backendCallDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _backendCallDetailFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 18: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasBt) {
                subBuilder.MergeFrom(Bt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bt = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::BonreePB.Backend.Builder subBuilder = global::BonreePB.Backend.CreateBuilder();
              if (result.hasToBE) {
                subBuilder.MergeFrom(ToBE);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToBE = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 42: {
              result.hasDetail = input.ReadString(ref result.detail_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasBt {
       get { return result.hasBt; }
      }
      public global::BonreePB.BusinessTransaction Bt {
        get { return result.Bt; }
        set { SetBt(value); }
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = value;
        return this;
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBt &&
            result.bt_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.bt_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.bt_).MergeFrom(value).BuildPartial();
        } else {
          result.bt_ = value;
        }
        result.hasBt = true;
        return this;
      }
      public Builder ClearBt() {
        PrepareBuilder();
        result.hasBt = false;
        result.bt_ = null;
        return this;
      }
      
      public bool HasToBE {
       get { return result.hasToBE; }
      }
      public global::BonreePB.Backend ToBE {
        get { return result.ToBE; }
        set { SetToBE(value); }
      }
      public Builder SetToBE(global::BonreePB.Backend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToBE = true;
        result.toBE_ = value;
        return this;
      }
      public Builder SetToBE(global::BonreePB.Backend.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToBE = true;
        result.toBE_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToBE(global::BonreePB.Backend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToBE &&
            result.toBE_ != global::BonreePB.Backend.DefaultInstance) {
            result.toBE_ = global::BonreePB.Backend.CreateBuilder(result.toBE_).MergeFrom(value).BuildPartial();
        } else {
          result.toBE_ = value;
        }
        result.hasToBE = true;
        return this;
      }
      public Builder ClearToBE() {
        PrepareBuilder();
        result.hasToBE = false;
        result.toBE_ = null;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.BackendCallType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.BackendCallType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.BackendCallType.BQT_SQL_SELECT;
        return this;
      }
      
      public bool HasDetail {
        get { return result.hasDetail; }
      }
      public string Detail {
        get { return result.Detail; }
        set { SetDetail(value); }
      }
      public Builder SetDetail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDetail = true;
        result.detail_ = value;
        return this;
      }
      public Builder ClearDetail() {
        PrepareBuilder();
        result.hasDetail = false;
        result.detail_ = "";
        return this;
      }
    }
    static BackendCallDetail() {
      object.ReferenceEquals(global::BonreePB.PbBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataSource : pb::GeneratedMessage<DataSource, DataSource.Builder> {
    private DataSource() { }
    private static readonly DataSource defaultInstance = new DataSource().MakeReadOnly();
    private static readonly string[] _dataSourceFieldNames = new string[] { "dbSchema", "host", "id", "name", "port", "url" };
    private static readonly uint[] _dataSourceFieldTags = new uint[] { 50, 34, 8, 18, 40, 26 };
    public static DataSource DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataSource DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataSource ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbBackend.internal__static_BonreePB_DataSource__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataSource, DataSource.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbBackend.internal__static_BonreePB_DataSource__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int UrlFieldNumber = 3;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int HostFieldNumber = 4;
    private bool hasHost;
    private string host_ = "";
    public bool HasHost {
      get { return hasHost; }
    }
    public string Host {
      get { return host_; }
    }
    
    public const int PortFieldNumber = 5;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint Port {
      get { return port_; }
    }
    
    public const int DbSchemaFieldNumber = 6;
    private bool hasDbSchema;
    private string dbSchema_ = "";
    public bool HasDbSchema {
      get { return hasDbSchema; }
    }
    public string DbSchema {
      get { return dbSchema_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _dataSourceFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[2], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (hasUrl) {
        output.WriteString(3, field_names[5], Url);
      }
      if (hasHost) {
        output.WriteString(4, field_names[1], Host);
      }
      if (hasPort) {
        output.WriteUInt32(5, field_names[4], Port);
      }
      if (hasDbSchema) {
        output.WriteString(6, field_names[0], DbSchema);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Url);
      }
      if (hasHost) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Host);
      }
      if (hasPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Port);
      }
      if (hasDbSchema) {
        size += pb::CodedOutputStream.ComputeStringSize(6, DbSchema);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static DataSource ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataSource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataSource ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataSource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataSource ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataSource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataSource ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataSource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataSource ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataSource ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataSource MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataSource prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataSource, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataSource cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataSource result;
      
      private DataSource PrepareBuilder() {
        if (resultIsReadOnly) {
          DataSource original = result;
          result = new DataSource();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataSource MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.DataSource.Descriptor; }
      }
      
      public override DataSource DefaultInstanceForType {
        get { return global::BonreePB.DataSource.DefaultInstance; }
      }
      
      public override DataSource BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataSource) {
          return MergeFrom((DataSource) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataSource other) {
        if (other == global::BonreePB.DataSource.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasHost) {
          Host = other.Host;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasDbSchema) {
          DbSchema = other.DbSchema;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataSourceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataSourceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 34: {
              result.hasHost = input.ReadString(ref result.host_);
              break;
            }
            case 40: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
            case 50: {
              result.hasDbSchema = input.ReadString(ref result.dbSchema_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasHost {
        get { return result.hasHost; }
      }
      public string Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasDbSchema {
        get { return result.hasDbSchema; }
      }
      public string DbSchema {
        get { return result.DbSchema; }
        set { SetDbSchema(value); }
      }
      public Builder SetDbSchema(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDbSchema = true;
        result.dbSchema_ = value;
        return this;
      }
      public Builder ClearDbSchema() {
        PrepareBuilder();
        result.hasDbSchema = false;
        result.dbSchema_ = "";
        return this;
      }
    }
    static DataSource() {
      object.ReferenceEquals(global::BonreePB.PbBackend.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
