// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbSnapshot {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotExitCallOrThreads__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotExitCallOrThreads, global::BonreePB.SnapshotExitCallOrThreads.Builder> internal__static_BonreePB_SnapshotExitCallOrThreads__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotError__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotError, global::BonreePB.SnapshotError.Builder> internal__static_BonreePB_SnapshotError__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotMethod__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotMethod, global::BonreePB.SnapshotMethod.Builder> internal__static_BonreePB_SnapshotMethod__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotThread__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotThread, global::BonreePB.SnapshotThread.Builder> internal__static_BonreePB_SnapshotThread__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotHttpData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotHttpData, global::BonreePB.SnapshotHttpData.Builder> internal__static_BonreePB_SnapshotHttpData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotData, global::BonreePB.SnapshotData.Builder> internal__static_BonreePB_SnapshotData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotReq, global::BonreePB.SnapshotReq.Builder> internal__static_BonreePB_SnapshotReq__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbSnapshot() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYl9zbmFwc2hvdC5wcm90bxIIQm9ucmVlUEIaDnBiX2FnZW50LnByb3Rv", 
            "GhBwYl9iYWNrZW5kLnByb3RvGhxwYl9idXNpbmVzc1RyYW5zYWN0aW9uLnBy", 
            "b3RvIrQBChlTbmFwc2hvdEV4aXRDYWxsT3JUaHJlYWRzEikKBGJlY2QYASAB", 
            "KAsyGy5Cb25yZWVQQi5CYWNrZW5kQ2FsbERldGFpbBIPCgdleGVUaW1lGAIg", 
            "ASgNEhQKDG5leHRIdHRwZ3VpZBgDIAEoCRIXCg90aHJlYWRDb250ZXh0SWQY", 
            "BCABKAQSLAoGdWVUeXBlGAUgASgOMhwuQm9ucmVlUEIuVXNlckV4cGVyaWVu", 
            "Y2VUeXBlImAKDVNuYXBzaG90RXJyb3ISEQoJdGltZVN0YW1wGAEgASgEEhEK", 
            "CWVycm9yTmFtZRgCIAEoCRITCgtlcnJvclN1bWFyeRgDIAEoCRIUCgxlcnJv", 
            "ckRldGFpbHMYBCABKAkimQIKDlNuYXBzaG90TWV0aG9kEiAKBmJ0VHlwZRgB", 
            "IAIoDjIQLkJvbnJlZVBCLkJUVHlwZRIRCgljbGFzc05hbWUYAiACKAkSEgoK", 
            "bWV0aG9kTmFtZRgDIAIoCRIQCghmaWxlbmFtZRgEIAEoCRISCgpsaW5lTnVt", 
            "YmVyGAUgASgNEg8KB2V4ZVRpbWUYBiABKA0SEAoIc2VsZlRpbWUYByABKA0S", 
            "DgoGcGFyYW1zGAggAygJEi0KC2NhbGxNZXRob2RzGAkgAygLMhguQm9ucmVl", 
            "UEIuU25hcHNob3RNZXRob2QSNgoJZXhpdGNhbGxzGAogASgLMiMuQm9ucmVl", 
            "UEIuU25hcHNob3RFeGl0Q2FsbE9yVGhyZWFkcyKJAgoOU25hcHNob3RUaHJl", 
            "YWQSEQoJdGltZXN0YW1wGAEgASgEEg8KB2V4ZVRpbWUYAiABKA0SEAoIdGhy", 
            "ZWFkSWQYAyABKAQSFwoPdGhyZWFkQ29udGV4dElkGAQgASgEEhIKCnRocmVh", 
            "ZE5hbWUYBSABKAkSMAoOY2FsbGdyYXBoUm9vdHMYBiADKAsyGC5Cb25yZWVQ", 
            "Qi5TbmFwc2hvdE1ldGhvZBInCgZlcnJvcnMYByADKAsyFy5Cb25yZWVQQi5T", 
            "bmFwc2hvdEVycm9yEjkKDGV4dEV4aXRDYWxscxgIIAMoCzIjLkJvbnJlZVBC", 
            "LlNuYXBzaG90RXhpdENhbGxPclRocmVhZHMiigEKEFNuYXBzaG90SHR0cERh", 
            "dGESCwoDdXJsGAEgASgJEhUKDXJlcXVlc3RIZWFkZXIYAiABKAkSFgoOcmVz", 
            "cG9uc2VIZWFkZXIYAyABKAkSEgoKc3RhdHVzQ29kZRgEIAEoCRISCgpodHRw", 
            "TWV0aG9kGAUgASgJEhIKCnBhcmFtZXRlcnMYBiADKAki/gIKDFNuYXBzaG90", 
            "RGF0YRITCgtyZXF1ZXN0R1VJRBgBIAIoCRIsCgZ1ZVR5cGUYAiABKA4yHC5C", 
            "b25yZWVQQi5Vc2VyRXhwZXJpZW5jZVR5cGUSKQoCYnQYAyABKAsyHS5Cb25y", 
            "ZWVQQi5CdXNpbmVzc1RyYW5zYWN0aW9uEhEKCXRpbWVTdGFtcBgEIAEoBBIV", 
            "Cg1leGVjdXRlVGltZU1zGAUgASgNEhEKCWNwdVRpbWVNcxgGIAEoDRIRCgll", 
            "cnJvck5hbWUYByABKAkSDwoHc3VtbWFyeRgIIAEoCRILCgNwaWQYCSABKA0S", 
            "CwoDdXJsGAogASgJEjEKD3NuYXBzaG90VGhyZWFkcxgLIAMoCzIYLkJvbnJl", 
            "ZVBCLlNuYXBzaG90VGhyZWFkEiwKCGh0dHBkYXRhGAwgASgLMhouQm9ucmVl", 
            "UEIuU25hcHNob3RIdHRwRGF0YRIkCgR0eXBlGA0gASgOMhYuQm9ucmVlUEIu", 
            "U25hcHNob3RUeXBlImgKC1NuYXBzaG90UmVxEi4KDWFnZW50SWRlbnRpdHkY", 
            "ASABKAsyFy5Cb25yZWVQQi5BZ2VudElkZW50aXR5EikKCXNuYXBzaG90cxgC", 
            "IAMoCzIWLkJvbnJlZVBCLlNuYXBzaG90RGF0YSq2AQoSVXNlckV4cGVyaWVu", 
            "Y2VUeXBlEh0KGVVTRVJfRVhQRVJJRU5DRV9UWVBFX0dPT0QQARIdChlVU0VS", 
            "X0VYUEVSSUVOQ0VfVFlQRV9TTE9XEAISIgoeVVNFUl9FWFBFUklFTkNFX1RZ", 
            "UEVfVkVSWV9TTE9XEAMSHgoaVVNFUl9FWFBFUklFTkNFX1RZUEVfU1RBTEwQ", 
            "BBIeChpVU0VSX0VYUEVSSUVOQ0VfVFlQRV9FUlJPUhAFKkEKDFNuYXBzaG90", 
            "VHlwZRIWChJTTkFQU0hPVF9UWVBFX0ZVTEwQARIZChVTTkFQU0hPVF9UWVBF", 
            "X0hPVFNQT1QQAkIZChdjb20uYm9ucmVlLnByb3RvYnVmLmFwbUqCLAoGEgQA", 
            "AFwBCggKAQISAwAIEAoICgEIEgMBADAKCwoECOcHABIDAQAwCgwKBQjnBwAC", 
            "EgMBBxMKDQoGCOcHAAIAEgMBBxMKDgoHCOcHAAIAARIDAQcTCgwKBQjnBwAH", 
            "EgMBFi8KCQoCAwASAwMHFwoJCgIDARIDBAcZCgkKAgMCEgMFByUKGQoCBQAS", 
            "BAgADgEaDeeUqOaIt+S9k+mqjAoKCgoDBQABEgMIBRcKFAoEBQACABIDCQQq", 
            "IgflgaXlurcKCgwKBQUAAgABEgMJBB0KDAoFBQACAAISAwkoKQoRCgQFAAIB", 
            "EgMKBCoiBOaFogoKDAoFBQACAQESAwoEHQoMCgUFAAIBAhIDCigpChQKBAUA", 
            "AgISAwsEKiIH5b6I5oWiCgoMCgUFAAICARIDCwQiCgwKBQUAAgICEgMLKCkK", 
            "FAoEBQACAxIDDAQqIgflgZzmu54KCgwKBQUAAgMBEgMMBB4KDAoFBQACAwIS", 
            "AwwoKQoUCgQFAAIEEgMNBCoiB+mUmeivrwoKDAoFBQACBAESAw0EHgoMCgUF", 
            "AAIEAhIDDSgpCiEKAgQAEgQQABYBGhVzbmFwc2hvdOWklumDqOiwg+eUqAoK", 
            "CgoDBAABEgMQCCEKIAoEBAACABIDEQQuIhPlkI7nq6/osIPnlKjor6bmg4UK", 
            "CgwKBQQAAgAEEgMRBAwKDAoFBAACAAYSAxENHgoMCgUEAAIAARIDER8jCgwK", 
            "BQQAAgADEgMRLC0KIAoEBAACARIDEgQuIhPlpJbpg6josIPnlKjml7bpl7QK", 
            "CgwKBQQAAgEEEgMSBAwKDAoFBAACAQUSAxINEwoMCgUEAAIBARIDEhQbCgwK", 
            "BQQAAgEDEgMSLC0KogEKBAQAAgISAxMELiKUAeeUqOS6juS4i+mSu+WIhuae", 
            "kO+8jOe7meWklumDqOiwg+eUqOWIhumFjeS4gOS4qmd1aWTvvIzpgJrov4do", 
            "dHRw6K+35rGC5aS05pC65bimKOWmguaenOivpeivt+axgueahOacjeWKoeac", 
            "ieWuieijhWFnZW5077yM55So6K+lZ3VpZOiusOW9lXNuYXBzaG90KQoKDAoF", 
            "BAACAgQSAxMEDAoMCgUEAAICBRIDEw0TCgwKBQQAAgIBEgMTFCAKDAoFBAAC", 
            "AgMSAxMsLQq8AQoEBAACAxIDFAQuIq4B55So5LqO5LiL6ZK75YiG5p6Q77yM", 
            "6YCa6L+HdGhyZWFkQ29udGV4dElk77yM5om+5Yiw5a+55bqU55qEU25hcHNo", 
            "b3RUaHJlYWQsIOWPr+eUqOe6v+eoi2lk5aGr5YWF77yM5Lmf5Y+v55So5YW2", 
            "5LuW5a+56LGh5Zyw5Z2A562J5aGr5YWFLCB3ZWLpgJrov4for6XlrZfmrrXm", 
            "ib7liLDkuIvpkrvnur/nqIsKCgwKBQQAAgMEEgMUBAwKDAoFBAACAwUSAxQN", 
            "EwoMCgUEAAIDARIDFBQjCgwKBQQAAgMDEgMULC0KNgoEBAACBBIDFQQuIinn", 
            "lKjmiLfkvZPpqowo5oWi44CB6ZSZ6K+v44CB5YGl5bq3562J77yJCgoMCgUE", 
            "AAIEBBIDFQQMCgwKBQQAAgQGEgMVDR8KDAoFBAACBAESAxUgJgoMCgUEAAIE", 
            "AxIDFSwtChsKAgQBEgQYAB0BGg9zbmFwc2hvdOmUmeivrwoKCgoDBAEBEgMY", 
            "CBUKIAoEBAECABIDGQQmIhPplJnor6/lj5HnlJ/ml7bpl7QKCgwKBQQBAgAE", 
            "EgMZBAwKDAoFBAECAAUSAxkNEwoMCgUEAQIAARIDGRQdCgwKBQQBAgADEgMZ", 
            "JCUKFwoEBAECARIDGgQmIgrplJnor6/lkI0KCgwKBQQBAgEEEgMaBAwKDAoF", 
            "BAECAQUSAxoNEwoMCgUEAQIBARIDGhQdCgwKBQQBAgEDEgMaJCUKGgoEBAEC", 
            "AhIDGwQmIg3plJnor6/mpoLopoEKCgwKBQQBAgIEEgMbBAwKDAoFBAECAgUS", 
            "AxsNEwoMCgUEAQICARIDGxQfCgwKBQQBAgIDEgMbJCUKGgoEBAECAxIDHAQm", 
            "Ig3plJnor6/mj4/ov7AKCgwKBQQBAgMEEgMcBAwKDAoFBAECAwUSAxwNEwoM", 
            "CgUEAQIDARIDHBQgCgwKBQQBAgMDEgMcJCUKIQoCBAISBB8AKgEaFXNuYXBz", 
            "aG905pa55rOV6LCD55SoCgoKCgMEAgESAx8IFgogCgQEAgIAEgMgBDYiE+S4", 
            "muWKoeahhuaetuexu+WeiwoKDAoFBAICAAQSAyAEDAoMCgUEAgIABhIDIA0T", 
            "CgwKBQQCAgABEgMgFBoKDAoFBAICAAMSAyA0NQoUCgQEAgIBEgMhBDYiB+ex", 
            "u+WQjQoKDAoFBAICAQQSAyEEDAoMCgUEAgIBBRIDIQ0TCgwKBQQCAgEBEgMh", 
            "FB0KDAoFBAICAQMSAyE0NQoXCgQEAgICEgMiBDYiCuaWueazleWQjQoKDAoF", 
            "BAICAgQSAyIEDAoMCgUEAgICBRIDIg0TCgwKBQQCAgIBEgMiFB4KDAoFBAIC", 
            "AgMSAyI0NQodCgQEAgIDEgMjBDYiEOS7o+eggeaWh+S7tuWQjQoKDAoFBAIC", 
            "AwQSAyMEDAoMCgUEAgIDBRIDIw0TCgwKBQQCAgMBEgMjFBwKDAoFBAICAwMS", 
            "AyM0NQoaCgQEAgIEEgMkBDYiDeS7o+eggeihjOaVsAoKDAoFBAICBAQSAyQE", 
            "DAoMCgUEAgIEBRIDJA0TCgwKBQQCAgQBEgMkFB4KDAoFBAICBAMSAyQ0NQom", 
            "CgQEAgIFEgMlBDYiGeiwg+eUqOivpeWHveaVsOaAu+aXtumXtAoKDAoFBAIC", 
            "BQQSAyUEDAoMCgUEAgIFBRIDJQ0TCgwKBQQCAgUBEgMlFBsKDAoFBAICBQMS", 
            "AyU0NQojCgQEAgIGEgMmBDYiFuivpeWHveaVsOiHqui6q+iAl+aXtgoKDAoF", 
            "BAICBgQSAyYEDAoMCgUEAgIGBRIDJg0TCgwKBQQCAgYBEgMmFBwKDAoFBAIC", 
            "BgMSAyY0NQomCgQEAgIHEgMnBDYiGeaWueazleiwg+eUqOWunumZheWPguaV", 
            "sAoKDAoFBAICBwQSAycEDAoMCgUEAgIHBRIDJw0TCgwKBQQCAgcBEgMnFBoK", 
            "DAoFBAICBwMSAyc0NQodCgQEAgIIEgMoBDYiEOiwg+eUqOeahOaWueazlQoK", 
            "DAoFBAICCAQSAygEDAoMCgUEAgIIBhIDKA0bCgwKBQQCAggBEgMoHCcKDAoF", 
            "BAICCAMSAyg0NQopCgQEAgIJEgMpBDciHOaWueazleWvueW6lOeahOWklumD", 
            "qOiwg+eUqAoKDAoFBAICCQQSAykEDAoMCgUEAgIJBhIDKQ0mCgwKBQQCAgkB", 
            "EgMpJzAKDAoFBAICCQMSAyk0NgohCgIEAxIELAA1ARoVc25hcHNob3TlvILm", 
            "raXnur/nqIsKCgoKAwQDARIDLAgWChoKBAQDAgASAy0EOiIN5byA5aeL5pe2", 
            "6Ze0CgoMCgUEAwIABBIDLQQMCgwKBQQDAgAFEgMtDRMKDAoFBAMCAAESAy0U", 
            "HQoMCgUEAwIAAxIDLTg5ChoKBAQDAgESAy4EOiIN5omn6KGM5pe26Ze0CgoM", 
            "CgUEAwIBBBIDLgQMCgwKBQQDAgEFEgMuDRMKDAoFBAMCAQESAy4UGwoMCgUE", 
            "AwIBAxIDLjg5ChYKBAQDAgISAy8EOiIJ57q/56iLaWQKCgwKBQQDAgIEEgMv", 
            "BAwKDAoFBAMCAgUSAy8NEwoMCgUEAwICARIDLxQcCgwKBQQDAgIDEgMvODkK", 
            "lgEKBAQDAgMSAzAEOiKIAeeUqOS6juS4i+mSu+WIhuaekO+8jOmAmui/h3Ro", 
            "cmVhZENvbnRleHRJZO+8jOaJvuWIsOWvueW6lOeahFNuYXBzaG90VGhyZWFk", 
            "LCDlj6/nlKjnur/nqItpZOWhq+WFhe+8jOS5n+WPr+eUqOWFtuS7luWvueix", 
            "oeWcsOWdgOetieWhq+WFhQoKDAoFBAMCAwQSAzAEDAoMCgUEAwIDBRIDMA0T", 
            "CgwKBQQDAgMBEgMwFCMKDAoFBAMCAwMSAzA4OQoaCgQEAwIEEgMxBDoiDee6", 
            "v+eoi+WQjeensAoKDAoFBAMCBAQSAzEEDAoMCgUEAwIEBRIDMQ0TCgwKBQQD", 
            "AgQBEgMxFB4KDAoFBAMCBAMSAzE4OQpeCgQEAwIFEgMyBDoiUWNhbGwgZ3Jh", 
            "cGgg5qC56IqC54K577yMU25hcHNob3RNZXRob2TkuLrmoJHlvaLnu5PmnoTv", 
            "vIzlj6/og73mnInlpJrkuKpyb2906IqC54K5CgoMCgUEAwIFBBIDMgQMCgwK", 
            "BQQDAgUGEgMyDRsKDAoFBAMCBQESAzIcKgoMCgUEAwIFAxIDMjg5ChQKBAQD", 
            "AgYSAzMEOiIH6ZSZ6K+vCgoMCgUEAwIGBBIDMwQMCgwKBQQDAgYGEgMzDRoK", 
            "DAoFBAMCBgESAzMbIQoMCgUEAwIGAxIDMzg5CkoKBAQDAgcSAzQEOiI955So", 
            "5LqO6K6w5b2Vbm9kZWpz562J5ZCO56uv5YWz6IGU5LiN5LiK5Ye95pWw55qE", 
            "5aSW6YOo6LCD55SoCgoMCgUEAwIHBBIDNAQMCgwKBQQDAgcGEgM0DSYKDAoF", 
            "BAMCBwESAzQnMwoMCgUEAwIHAxIDNDg5CiAKAgQEEgQ4AD8BGhRzbmFwc2hv", 
            "dCBodHRw5pWw5o2uCgoKCgMEBAESAzgIGAoXCgQEBAIAEgM5BC4iCnVybOWc", 
            "sOWdgAoKDAoFBAQCAAQSAzkEDAoMCgUEBAIABRIDOQ0TCgwKBQQEAgABEgM5", 
            "FBcKDAoFBAQCAAMSAzksLQobCgQEBAIBEgM6BC4iDmh0dHDor7fmsYLlpLQK", 
            "CgwKBQQEAgEEEgM6BAwKDAoFBAQCAQUSAzoNEwoMCgUEBAIBARIDOhQhCgwK", 
            "BQQEAgEDEgM6LC0KGwoEBAQCAhIDOwQuIg5odHRw55u45bqU5aS0CgoMCgUE", 
            "BAICBBIDOwQMCgwKBQQEAgIFEgM7DRMKDAoFBAQCAgESAzsUIgoMCgUEBAIC", 
            "AxIDOywtChsKBAQEAgMSAzwELiIOaHR0cOebuOW6lOeggQoKDAoFBAQCAwQS", 
            "AzwEDAoMCgUEBAIDBRIDPA0TCgwKBQQEAgMBEgM8FB4KDAoFBAQCAwMSAzws", 
            "LQoeCgQEBAIEEgM9BC4iEWh0dHDor7fmsYLmlrnms5UKCgwKBQQEAgQEEgM9", 
            "BAwKDAoFBAQCBAUSAz0NEwoMCgUEBAIEARIDPRQeCgwKBQQEAgQDEgM9LC0K", 
            "JwoEBAQCBRIDPgQuIhpodHRw5Y+C5pWwLCBlLmcuICBpZD0xMDAwCgoMCgUE", 
            "BAIFBBIDPgQMCgwKBQQEAgUFEgM+DRMKDAoFBAQCBQESAz4UHgoMCgUEBAIF", 
            "AxIDPiwtChoKAgUBEgRCAEUBGg5TbmFwc2hvdCBUeXBlCgoKCgMFAQESA0IF", 
            "EQodCgQFAQIAEgNDBCYiEGZ1bGwgY2FsbGdyYXBoIAoKDAoFBQECAAESA0ME", 
            "FgoMCgUFAQIAAhIDQyQlCh8KBAUBAgESA0QEJiISaG90c3BvdCBjYWxsZ3Jh", 
            "cGgKCgwKBQUBAgEBEgNEBBkKDAoFBQECAQISA0QkJQobCgIEBRIESABWARoP", 
            "c25hcHNob3TmlbDmja4KCgoKAwQFARIDSAgUChwKBAQFAgASA0kENiIPaHR0", 
            "cOivt+axgmd1aWQKCgwKBQQFAgAEEgNJBAwKDAoFBAUCAAUSA0kNEwoMCgUE", 
            "BQIAARIDSRQfCgwKBQQFAgADEgNJNDUKGgoEBAUCARIDSgQ2Ig3nlKjmiLfk", 
            "vZPpqowKCgwKBQQFAgEEEgNKBAwKDAoFBAUCAQYSA0oNHwoMCgUEBQIBARID", 
            "SiAmCgwKBQQFAgEDEgNKNDUKFAoEBAUCAhIDSwQ2IgfkuJrliqEKCgwKBQQF", 
            "AgIEEgNLBAwKDAoFBAUCAgYSA0sNIAoMCgUEBQICARIDSyEjCgwKBQQFAgID", 
            "EgNLNDUKLAoEBAUCAxIDTAQ2Ih9hZ2VudOaUtuWIsGh0dHDor7fmsYLnmoTm", 
            "l7bpl7QKCgwKBQQFAgMEEgNMBAwKDAoFBAUCAwUSA0wNEwoMCgUEBQIDARID", 
            "TBQdCgwKBQQFAgMDEgNMNDUKHQoEBAUCBBIDTQQ2IhDor7fmsYLmgLvogJfm", 
            "l7YKCgwKBQQFAgQEEgNNBAwKDAoFBAUCBAUSA00NEwoMCgUEBQIEARIDTRQh", 
            "CgwKBQQFAgQDEgNNNDUKFwoEBAUCBRIDTgQ2IgpjcHXogJfml7YKCgwKBQQF", 
            "AgUEEgNOBAwKDAoFBAUCBQUSA04NEwoMCgUEBQIFARIDThQdCgwKBQQFAgUD", 
            "EgNONDUKSgoEBAUCBhIDTwQ2Ij3plJnor6/lkI3vvIzplJnor6/lj5HnlJ/m", 
            "l7borrDlvZXnmoTlv6vnhafmiY3mnInmnInplJnor6/lkI0KCgwKBQQFAgYE", 
            "EgNPBAwKDAoFBAUCBgUSA08NEwoMCgUEBQIGARIDTxQdCgwKBQQFAgYDEgNP", 
            "NDUKHAoEBAUCBxIDUAQ2Ig9zbmFwc2hvdOamguWGtQoKDAoFBAUCBwQSA1AE", 
            "DAoMCgUEBQIHBRIDUA0TCgwKBQQFAgcBEgNQFBsKDAoFBAUCBwMSA1A0NQoW", 
            "CgQEBQIIEgNRBDYiCei/m+eoi2lkCgoMCgUEBQIIBBIDUQQMCgwKBQQFAggF", 
            "EgNRDRMKDAoFBAUCCAESA1EUFwoMCgUEBQIIAxIDUTQ1ChEKBAQFAgkSA1IE", 
            "NyIEVVJMCgoMCgUEBQIJBBIDUgQMCgwKBQQFAgkFEgNSDRMKDAoFBAUCCQES", 
            "A1IUFwoMCgUEBQIJAxIDUjQ2CiYKBAQFAgoSA1MENyIZ5aSa5Liq57q/56iL", 
            "5omn6KGM5oOF5Ya1CgoMCgUEBQIKBBIDUwQMCgwKBQQFAgoGEgNTDRsKDAoF", 
            "BAUCCgESA1MdLAoMCgUEBQIKAxIDUzQ2Ch4KBAQFAgsSA1QENyIRaHR0cOeb", 
            "uOWFs+aVsOaNrgoKDAoFBAUCCwQSA1QEDAoMCgUEBQILBhIDVA0dCgwKBQQF", 
            "AgsBEgNUHiYKDAoFBAUCCwMSA1Q0NgoaCgQEBQIMEgNVBDciDeW/q+eFp+ex", 
            "u+WeiwoKDAoFBAUCDAQSA1UEDAoMCgUEBQIMBhIDVQ0ZCgwKBQQFAgwBEgNV", 
            "Gh4KDAoFBAUCDAMSA1U0NgobCgIEBhIEWQBcARoPc25hcHNob3Tor7fmsYIK", 
            "CgoKAwQGARIDWQgTChwKBAQGAgASA1oEMiIPYWdlbnQgaWRlbnRpdHkKCgwK", 
            "BQQGAgAEEgNaBAwKDAoFBAYCAAYSA1oNGgoMCgUEBgIAARIDWhsoCgwKBQQG", 
            "AgADEgNaMDEKHAoEBAYCARIDWwQyIg9zbmFwc2hvdOaVsOaNrgoKDAoFBAYC", 
            "AQQSA1sEDAoMCgUEBgIBBhIDWw0ZCgwKBQQGAgEBEgNbGiMKDAoFBAYCAQMS", 
          "A1swMQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_SnapshotExitCallOrThreads__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_SnapshotExitCallOrThreads__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotExitCallOrThreads, global::BonreePB.SnapshotExitCallOrThreads.Builder>(internal__static_BonreePB_SnapshotExitCallOrThreads__Descriptor,
                new string[] { "Becd", "ExeTime", "NextHttpguid", "ThreadContextId", "UeType", });
        internal__static_BonreePB_SnapshotError__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_SnapshotError__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotError, global::BonreePB.SnapshotError.Builder>(internal__static_BonreePB_SnapshotError__Descriptor,
                new string[] { "TimeStamp", "ErrorName", "ErrorSumary", "ErrorDetails", });
        internal__static_BonreePB_SnapshotMethod__Descriptor = Descriptor.MessageTypes[2];
        internal__static_BonreePB_SnapshotMethod__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotMethod, global::BonreePB.SnapshotMethod.Builder>(internal__static_BonreePB_SnapshotMethod__Descriptor,
                new string[] { "BtType", "ClassName", "MethodName", "Filename", "LineNumber", "ExeTime", "SelfTime", "Params", "CallMethods", "Exitcalls", });
        internal__static_BonreePB_SnapshotThread__Descriptor = Descriptor.MessageTypes[3];
        internal__static_BonreePB_SnapshotThread__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotThread, global::BonreePB.SnapshotThread.Builder>(internal__static_BonreePB_SnapshotThread__Descriptor,
                new string[] { "Timestamp", "ExeTime", "ThreadId", "ThreadContextId", "ThreadName", "CallgraphRoots", "Errors", "ExtExitCalls", });
        internal__static_BonreePB_SnapshotHttpData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_BonreePB_SnapshotHttpData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotHttpData, global::BonreePB.SnapshotHttpData.Builder>(internal__static_BonreePB_SnapshotHttpData__Descriptor,
                new string[] { "Url", "RequestHeader", "ResponseHeader", "StatusCode", "HttpMethod", "Parameters", });
        internal__static_BonreePB_SnapshotData__Descriptor = Descriptor.MessageTypes[5];
        internal__static_BonreePB_SnapshotData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotData, global::BonreePB.SnapshotData.Builder>(internal__static_BonreePB_SnapshotData__Descriptor,
                new string[] { "RequestGUID", "UeType", "Bt", "TimeStamp", "ExecuteTimeMs", "CpuTimeMs", "ErrorName", "Summary", "Pid", "Url", "SnapshotThreads", "Httpdata", "Type", });
        internal__static_BonreePB_SnapshotReq__Descriptor = Descriptor.MessageTypes[6];
        internal__static_BonreePB_SnapshotReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotReq, global::BonreePB.SnapshotReq.Builder>(internal__static_BonreePB_SnapshotReq__Descriptor,
                new string[] { "AgentIdentity", "Snapshots", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbAgent.RegisterAllExtensions(registry);
        global::BonreePB.PbBackend.RegisterAllExtensions(registry);
        global::BonreePB.PbBusinessTransaction.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbAgent.Descriptor, 
          global::BonreePB.PbBackend.Descriptor, 
          global::BonreePB.PbBusinessTransaction.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum UserExperienceType {
    USER_EXPERIENCE_TYPE_GOOD = 1,
    USER_EXPERIENCE_TYPE_SLOW = 2,
    USER_EXPERIENCE_TYPE_VERY_SLOW = 3,
    USER_EXPERIENCE_TYPE_STALL = 4,
    USER_EXPERIENCE_TYPE_ERROR = 5,
  }
  
  public enum SnapshotType {
    SNAPSHOT_TYPE_FULL = 1,
    SNAPSHOT_TYPE_HOTSPOT = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotExitCallOrThreads : pb::GeneratedMessage<SnapshotExitCallOrThreads, SnapshotExitCallOrThreads.Builder> {
    private SnapshotExitCallOrThreads() { }
    private static readonly SnapshotExitCallOrThreads defaultInstance = new SnapshotExitCallOrThreads().MakeReadOnly();
    private static readonly string[] _snapshotExitCallOrThreadsFieldNames = new string[] { "becd", "exeTime", "nextHttpguid", "threadContextId", "ueType" };
    private static readonly uint[] _snapshotExitCallOrThreadsFieldTags = new uint[] { 10, 16, 26, 32, 40 };
    public static SnapshotExitCallOrThreads DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotExitCallOrThreads DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotExitCallOrThreads ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotExitCallOrThreads__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotExitCallOrThreads, SnapshotExitCallOrThreads.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotExitCallOrThreads__FieldAccessorTable; }
    }
    
    public const int BecdFieldNumber = 1;
    private bool hasBecd;
    private global::BonreePB.BackendCallDetail becd_;
    public bool HasBecd {
      get { return hasBecd; }
    }
    public global::BonreePB.BackendCallDetail Becd {
      get { return becd_ ?? global::BonreePB.BackendCallDetail.DefaultInstance; }
    }
    
    public const int ExeTimeFieldNumber = 2;
    private bool hasExeTime;
    private uint exeTime_;
    public bool HasExeTime {
      get { return hasExeTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExeTime {
      get { return exeTime_; }
    }
    
    public const int NextHttpguidFieldNumber = 3;
    private bool hasNextHttpguid;
    private string nextHttpguid_ = "";
    public bool HasNextHttpguid {
      get { return hasNextHttpguid; }
    }
    public string NextHttpguid {
      get { return nextHttpguid_; }
    }
    
    public const int ThreadContextIdFieldNumber = 4;
    private bool hasThreadContextId;
    private ulong threadContextId_;
    public bool HasThreadContextId {
      get { return hasThreadContextId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ThreadContextId {
      get { return threadContextId_; }
    }
    
    public const int UeTypeFieldNumber = 5;
    private bool hasUeType;
    private global::BonreePB.UserExperienceType ueType_ = global::BonreePB.UserExperienceType.USER_EXPERIENCE_TYPE_GOOD;
    public bool HasUeType {
      get { return hasUeType; }
    }
    public global::BonreePB.UserExperienceType UeType {
      get { return ueType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotExitCallOrThreadsFieldNames;
      if (hasBecd) {
        output.WriteMessage(1, field_names[0], Becd);
      }
      if (hasExeTime) {
        output.WriteUInt32(2, field_names[1], ExeTime);
      }
      if (hasNextHttpguid) {
        output.WriteString(3, field_names[2], NextHttpguid);
      }
      if (hasThreadContextId) {
        output.WriteUInt64(4, field_names[3], ThreadContextId);
      }
      if (hasUeType) {
        output.WriteEnum(5, field_names[4], (int) UeType, UeType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBecd) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Becd);
      }
      if (hasExeTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ExeTime);
      }
      if (hasNextHttpguid) {
        size += pb::CodedOutputStream.ComputeStringSize(3, NextHttpguid);
      }
      if (hasThreadContextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, ThreadContextId);
      }
      if (hasUeType) {
        size += pb::CodedOutputStream.ComputeEnumSize(5, (int) UeType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotExitCallOrThreads ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotExitCallOrThreads ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotExitCallOrThreads MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotExitCallOrThreads prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotExitCallOrThreads, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotExitCallOrThreads cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotExitCallOrThreads result;
      
      private SnapshotExitCallOrThreads PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotExitCallOrThreads original = result;
          result = new SnapshotExitCallOrThreads();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotExitCallOrThreads MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotExitCallOrThreads.Descriptor; }
      }
      
      public override SnapshotExitCallOrThreads DefaultInstanceForType {
        get { return global::BonreePB.SnapshotExitCallOrThreads.DefaultInstance; }
      }
      
      public override SnapshotExitCallOrThreads BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotExitCallOrThreads) {
          return MergeFrom((SnapshotExitCallOrThreads) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotExitCallOrThreads other) {
        if (other == global::BonreePB.SnapshotExitCallOrThreads.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBecd) {
          MergeBecd(other.Becd);
        }
        if (other.HasExeTime) {
          ExeTime = other.ExeTime;
        }
        if (other.HasNextHttpguid) {
          NextHttpguid = other.NextHttpguid;
        }
        if (other.HasThreadContextId) {
          ThreadContextId = other.ThreadContextId;
        }
        if (other.HasUeType) {
          UeType = other.UeType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotExitCallOrThreadsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotExitCallOrThreadsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.BackendCallDetail.Builder subBuilder = global::BonreePB.BackendCallDetail.CreateBuilder();
              if (result.hasBecd) {
                subBuilder.MergeFrom(Becd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Becd = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasExeTime = input.ReadUInt32(ref result.exeTime_);
              break;
            }
            case 26: {
              result.hasNextHttpguid = input.ReadString(ref result.nextHttpguid_);
              break;
            }
            case 32: {
              result.hasThreadContextId = input.ReadUInt64(ref result.threadContextId_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.ueType_, out unknown)) {
                result.hasUeType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBecd {
       get { return result.hasBecd; }
      }
      public global::BonreePB.BackendCallDetail Becd {
        get { return result.Becd; }
        set { SetBecd(value); }
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = value;
        return this;
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBecd &&
            result.becd_ != global::BonreePB.BackendCallDetail.DefaultInstance) {
            result.becd_ = global::BonreePB.BackendCallDetail.CreateBuilder(result.becd_).MergeFrom(value).BuildPartial();
        } else {
          result.becd_ = value;
        }
        result.hasBecd = true;
        return this;
      }
      public Builder ClearBecd() {
        PrepareBuilder();
        result.hasBecd = false;
        result.becd_ = null;
        return this;
      }
      
      public bool HasExeTime {
        get { return result.hasExeTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExeTime {
        get { return result.ExeTime; }
        set { SetExeTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExeTime(uint value) {
        PrepareBuilder();
        result.hasExeTime = true;
        result.exeTime_ = value;
        return this;
      }
      public Builder ClearExeTime() {
        PrepareBuilder();
        result.hasExeTime = false;
        result.exeTime_ = 0;
        return this;
      }
      
      public bool HasNextHttpguid {
        get { return result.hasNextHttpguid; }
      }
      public string NextHttpguid {
        get { return result.NextHttpguid; }
        set { SetNextHttpguid(value); }
      }
      public Builder SetNextHttpguid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNextHttpguid = true;
        result.nextHttpguid_ = value;
        return this;
      }
      public Builder ClearNextHttpguid() {
        PrepareBuilder();
        result.hasNextHttpguid = false;
        result.nextHttpguid_ = "";
        return this;
      }
      
      public bool HasThreadContextId {
        get { return result.hasThreadContextId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ThreadContextId {
        get { return result.ThreadContextId; }
        set { SetThreadContextId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetThreadContextId(ulong value) {
        PrepareBuilder();
        result.hasThreadContextId = true;
        result.threadContextId_ = value;
        return this;
      }
      public Builder ClearThreadContextId() {
        PrepareBuilder();
        result.hasThreadContextId = false;
        result.threadContextId_ = 0UL;
        return this;
      }
      
      public bool HasUeType {
       get { return result.hasUeType; }
      }
      public global::BonreePB.UserExperienceType UeType {
        get { return result.UeType; }
        set { SetUeType(value); }
      }
      public Builder SetUeType(global::BonreePB.UserExperienceType value) {
        PrepareBuilder();
        result.hasUeType = true;
        result.ueType_ = value;
        return this;
      }
      public Builder ClearUeType() {
        PrepareBuilder();
        result.hasUeType = false;
        result.ueType_ = global::BonreePB.UserExperienceType.USER_EXPERIENCE_TYPE_GOOD;
        return this;
      }
    }
    static SnapshotExitCallOrThreads() {
      object.ReferenceEquals(global::BonreePB.PbSnapshot.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotError : pb::GeneratedMessage<SnapshotError, SnapshotError.Builder> {
    private SnapshotError() { }
    private static readonly SnapshotError defaultInstance = new SnapshotError().MakeReadOnly();
    private static readonly string[] _snapshotErrorFieldNames = new string[] { "errorDetails", "errorName", "errorSumary", "timeStamp" };
    private static readonly uint[] _snapshotErrorFieldTags = new uint[] { 34, 18, 26, 8 };
    public static SnapshotError DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotError DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotError ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotError__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotError, SnapshotError.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotError__FieldAccessorTable; }
    }
    
    public const int TimeStampFieldNumber = 1;
    private bool hasTimeStamp;
    private ulong timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int ErrorNameFieldNumber = 2;
    private bool hasErrorName;
    private string errorName_ = "";
    public bool HasErrorName {
      get { return hasErrorName; }
    }
    public string ErrorName {
      get { return errorName_; }
    }
    
    public const int ErrorSumaryFieldNumber = 3;
    private bool hasErrorSumary;
    private string errorSumary_ = "";
    public bool HasErrorSumary {
      get { return hasErrorSumary; }
    }
    public string ErrorSumary {
      get { return errorSumary_; }
    }
    
    public const int ErrorDetailsFieldNumber = 4;
    private bool hasErrorDetails;
    private string errorDetails_ = "";
    public bool HasErrorDetails {
      get { return hasErrorDetails; }
    }
    public string ErrorDetails {
      get { return errorDetails_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotErrorFieldNames;
      if (hasTimeStamp) {
        output.WriteUInt64(1, field_names[3], TimeStamp);
      }
      if (hasErrorName) {
        output.WriteString(2, field_names[1], ErrorName);
      }
      if (hasErrorSumary) {
        output.WriteString(3, field_names[2], ErrorSumary);
      }
      if (hasErrorDetails) {
        output.WriteString(4, field_names[0], ErrorDetails);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TimeStamp);
      }
      if (hasErrorName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ErrorName);
      }
      if (hasErrorSumary) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ErrorSumary);
      }
      if (hasErrorDetails) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ErrorDetails);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotError ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotError ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotError ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotError ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotError ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotError ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotError ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotError ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotError ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotError ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotError MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotError prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotError, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotError cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotError result;
      
      private SnapshotError PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotError original = result;
          result = new SnapshotError();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotError MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotError.Descriptor; }
      }
      
      public override SnapshotError DefaultInstanceForType {
        get { return global::BonreePB.SnapshotError.DefaultInstance; }
      }
      
      public override SnapshotError BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotError) {
          return MergeFrom((SnapshotError) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotError other) {
        if (other == global::BonreePB.SnapshotError.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasErrorName) {
          ErrorName = other.ErrorName;
        }
        if (other.HasErrorSumary) {
          ErrorSumary = other.ErrorSumary;
        }
        if (other.HasErrorDetails) {
          ErrorDetails = other.ErrorDetails;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotErrorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotErrorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimeStamp = input.ReadUInt64(ref result.timeStamp_);
              break;
            }
            case 18: {
              result.hasErrorName = input.ReadString(ref result.errorName_);
              break;
            }
            case 26: {
              result.hasErrorSumary = input.ReadString(ref result.errorSumary_);
              break;
            }
            case 34: {
              result.hasErrorDetails = input.ReadString(ref result.errorDetails_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0UL;
        return this;
      }
      
      public bool HasErrorName {
        get { return result.hasErrorName; }
      }
      public string ErrorName {
        get { return result.ErrorName; }
        set { SetErrorName(value); }
      }
      public Builder SetErrorName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorName = true;
        result.errorName_ = value;
        return this;
      }
      public Builder ClearErrorName() {
        PrepareBuilder();
        result.hasErrorName = false;
        result.errorName_ = "";
        return this;
      }
      
      public bool HasErrorSumary {
        get { return result.hasErrorSumary; }
      }
      public string ErrorSumary {
        get { return result.ErrorSumary; }
        set { SetErrorSumary(value); }
      }
      public Builder SetErrorSumary(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorSumary = true;
        result.errorSumary_ = value;
        return this;
      }
      public Builder ClearErrorSumary() {
        PrepareBuilder();
        result.hasErrorSumary = false;
        result.errorSumary_ = "";
        return this;
      }
      
      public bool HasErrorDetails {
        get { return result.hasErrorDetails; }
      }
      public string ErrorDetails {
        get { return result.ErrorDetails; }
        set { SetErrorDetails(value); }
      }
      public Builder SetErrorDetails(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorDetails = true;
        result.errorDetails_ = value;
        return this;
      }
      public Builder ClearErrorDetails() {
        PrepareBuilder();
        result.hasErrorDetails = false;
        result.errorDetails_ = "";
        return this;
      }
    }
    static SnapshotError() {
      object.ReferenceEquals(global::BonreePB.PbSnapshot.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotMethod : pb::GeneratedMessage<SnapshotMethod, SnapshotMethod.Builder> {
    private SnapshotMethod() { }
    private static readonly SnapshotMethod defaultInstance = new SnapshotMethod().MakeReadOnly();
    private static readonly string[] _snapshotMethodFieldNames = new string[] { "btType", "callMethods", "className", "exeTime", "exitcalls", "filename", "lineNumber", "methodName", "params", "selfTime" };
    private static readonly uint[] _snapshotMethodFieldTags = new uint[] { 8, 74, 18, 48, 82, 34, 40, 26, 66, 56 };
    public static SnapshotMethod DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotMethod DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotMethod ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotMethod__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotMethod, SnapshotMethod.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotMethod__FieldAccessorTable; }
    }
    
    public const int BtTypeFieldNumber = 1;
    private bool hasBtType;
    private global::BonreePB.BTType btType_ = global::BonreePB.BTType.BT_JAVA_EJB;
    public bool HasBtType {
      get { return hasBtType; }
    }
    public global::BonreePB.BTType BtType {
      get { return btType_; }
    }
    
    public const int ClassNameFieldNumber = 2;
    private bool hasClassName;
    private string className_ = "";
    public bool HasClassName {
      get { return hasClassName; }
    }
    public string ClassName {
      get { return className_; }
    }
    
    public const int MethodNameFieldNumber = 3;
    private bool hasMethodName;
    private string methodName_ = "";
    public bool HasMethodName {
      get { return hasMethodName; }
    }
    public string MethodName {
      get { return methodName_; }
    }
    
    public const int FilenameFieldNumber = 4;
    private bool hasFilename;
    private string filename_ = "";
    public bool HasFilename {
      get { return hasFilename; }
    }
    public string Filename {
      get { return filename_; }
    }
    
    public const int LineNumberFieldNumber = 5;
    private bool hasLineNumber;
    private uint lineNumber_;
    public bool HasLineNumber {
      get { return hasLineNumber; }
    }
    [global::System.CLSCompliant(false)]
    public uint LineNumber {
      get { return lineNumber_; }
    }
    
    public const int ExeTimeFieldNumber = 6;
    private bool hasExeTime;
    private uint exeTime_;
    public bool HasExeTime {
      get { return hasExeTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExeTime {
      get { return exeTime_; }
    }
    
    public const int SelfTimeFieldNumber = 7;
    private bool hasSelfTime;
    private uint selfTime_;
    public bool HasSelfTime {
      get { return hasSelfTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint SelfTime {
      get { return selfTime_; }
    }
    
    public const int ParamsFieldNumber = 8;
    private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParamsList {
      get { return pbc::Lists.AsReadOnly(params_); }
    }
    public int ParamsCount {
      get { return params_.Count; }
    }
    public string GetParams(int index) {
      return params_[index];
    }
    
    public const int CallMethodsFieldNumber = 9;
    private pbc::PopsicleList<global::BonreePB.SnapshotMethod> callMethods_ = new pbc::PopsicleList<global::BonreePB.SnapshotMethod>();
    public scg::IList<global::BonreePB.SnapshotMethod> CallMethodsList {
      get { return callMethods_; }
    }
    public int CallMethodsCount {
      get { return callMethods_.Count; }
    }
    public global::BonreePB.SnapshotMethod GetCallMethods(int index) {
      return callMethods_[index];
    }
    
    public const int ExitcallsFieldNumber = 10;
    private bool hasExitcalls;
    private global::BonreePB.SnapshotExitCallOrThreads exitcalls_;
    public bool HasExitcalls {
      get { return hasExitcalls; }
    }
    public global::BonreePB.SnapshotExitCallOrThreads Exitcalls {
      get { return exitcalls_ ?? global::BonreePB.SnapshotExitCallOrThreads.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBtType) return false;
        if (!hasClassName) return false;
        if (!hasMethodName) return false;
        foreach (global::BonreePB.SnapshotMethod element in CallMethodsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotMethodFieldNames;
      if (hasBtType) {
        output.WriteEnum(1, field_names[0], (int) BtType, BtType);
      }
      if (hasClassName) {
        output.WriteString(2, field_names[2], ClassName);
      }
      if (hasMethodName) {
        output.WriteString(3, field_names[7], MethodName);
      }
      if (hasFilename) {
        output.WriteString(4, field_names[5], Filename);
      }
      if (hasLineNumber) {
        output.WriteUInt32(5, field_names[6], LineNumber);
      }
      if (hasExeTime) {
        output.WriteUInt32(6, field_names[3], ExeTime);
      }
      if (hasSelfTime) {
        output.WriteUInt32(7, field_names[9], SelfTime);
      }
      if (params_.Count > 0) {
        output.WriteStringArray(8, field_names[8], params_);
      }
      if (callMethods_.Count > 0) {
        output.WriteMessageArray(9, field_names[1], callMethods_);
      }
      if (hasExitcalls) {
        output.WriteMessage(10, field_names[4], Exitcalls);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBtType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) BtType);
      }
      if (hasClassName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ClassName);
      }
      if (hasMethodName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, MethodName);
      }
      if (hasFilename) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Filename);
      }
      if (hasLineNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, LineNumber);
      }
      if (hasExeTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ExeTime);
      }
      if (hasSelfTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SelfTime);
      }
      {
        int dataSize = 0;
        foreach (string element in ParamsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * params_.Count;
      }
      foreach (global::BonreePB.SnapshotMethod element in CallMethodsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      if (hasExitcalls) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, Exitcalls);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotMethod ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotMethod ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotMethod ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotMethod ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotMethod ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotMethod ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotMethod ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotMethod ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotMethod ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotMethod ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotMethod MakeReadOnly() {
      params_.MakeReadOnly();
      callMethods_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotMethod prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotMethod, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotMethod cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotMethod result;
      
      private SnapshotMethod PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotMethod original = result;
          result = new SnapshotMethod();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotMethod MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotMethod.Descriptor; }
      }
      
      public override SnapshotMethod DefaultInstanceForType {
        get { return global::BonreePB.SnapshotMethod.DefaultInstance; }
      }
      
      public override SnapshotMethod BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotMethod) {
          return MergeFrom((SnapshotMethod) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotMethod other) {
        if (other == global::BonreePB.SnapshotMethod.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBtType) {
          BtType = other.BtType;
        }
        if (other.HasClassName) {
          ClassName = other.ClassName;
        }
        if (other.HasMethodName) {
          MethodName = other.MethodName;
        }
        if (other.HasFilename) {
          Filename = other.Filename;
        }
        if (other.HasLineNumber) {
          LineNumber = other.LineNumber;
        }
        if (other.HasExeTime) {
          ExeTime = other.ExeTime;
        }
        if (other.HasSelfTime) {
          SelfTime = other.SelfTime;
        }
        if (other.params_.Count != 0) {
          result.params_.Add(other.params_);
        }
        if (other.callMethods_.Count != 0) {
          result.callMethods_.Add(other.callMethods_);
        }
        if (other.HasExitcalls) {
          MergeExitcalls(other.Exitcalls);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotMethodFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotMethodFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.btType_, out unknown)) {
                result.hasBtType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasClassName = input.ReadString(ref result.className_);
              break;
            }
            case 26: {
              result.hasMethodName = input.ReadString(ref result.methodName_);
              break;
            }
            case 34: {
              result.hasFilename = input.ReadString(ref result.filename_);
              break;
            }
            case 40: {
              result.hasLineNumber = input.ReadUInt32(ref result.lineNumber_);
              break;
            }
            case 48: {
              result.hasExeTime = input.ReadUInt32(ref result.exeTime_);
              break;
            }
            case 56: {
              result.hasSelfTime = input.ReadUInt32(ref result.selfTime_);
              break;
            }
            case 66: {
              input.ReadStringArray(tag, field_name, result.params_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.callMethods_, global::BonreePB.SnapshotMethod.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              global::BonreePB.SnapshotExitCallOrThreads.Builder subBuilder = global::BonreePB.SnapshotExitCallOrThreads.CreateBuilder();
              if (result.hasExitcalls) {
                subBuilder.MergeFrom(Exitcalls);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Exitcalls = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBtType {
       get { return result.hasBtType; }
      }
      public global::BonreePB.BTType BtType {
        get { return result.BtType; }
        set { SetBtType(value); }
      }
      public Builder SetBtType(global::BonreePB.BTType value) {
        PrepareBuilder();
        result.hasBtType = true;
        result.btType_ = value;
        return this;
      }
      public Builder ClearBtType() {
        PrepareBuilder();
        result.hasBtType = false;
        result.btType_ = global::BonreePB.BTType.BT_JAVA_EJB;
        return this;
      }
      
      public bool HasClassName {
        get { return result.hasClassName; }
      }
      public string ClassName {
        get { return result.ClassName; }
        set { SetClassName(value); }
      }
      public Builder SetClassName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassName = true;
        result.className_ = value;
        return this;
      }
      public Builder ClearClassName() {
        PrepareBuilder();
        result.hasClassName = false;
        result.className_ = "";
        return this;
      }
      
      public bool HasMethodName {
        get { return result.hasMethodName; }
      }
      public string MethodName {
        get { return result.MethodName; }
        set { SetMethodName(value); }
      }
      public Builder SetMethodName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodName = true;
        result.methodName_ = value;
        return this;
      }
      public Builder ClearMethodName() {
        PrepareBuilder();
        result.hasMethodName = false;
        result.methodName_ = "";
        return this;
      }
      
      public bool HasFilename {
        get { return result.hasFilename; }
      }
      public string Filename {
        get { return result.Filename; }
        set { SetFilename(value); }
      }
      public Builder SetFilename(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFilename = true;
        result.filename_ = value;
        return this;
      }
      public Builder ClearFilename() {
        PrepareBuilder();
        result.hasFilename = false;
        result.filename_ = "";
        return this;
      }
      
      public bool HasLineNumber {
        get { return result.hasLineNumber; }
      }
      [global::System.CLSCompliant(false)]
      public uint LineNumber {
        get { return result.LineNumber; }
        set { SetLineNumber(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLineNumber(uint value) {
        PrepareBuilder();
        result.hasLineNumber = true;
        result.lineNumber_ = value;
        return this;
      }
      public Builder ClearLineNumber() {
        PrepareBuilder();
        result.hasLineNumber = false;
        result.lineNumber_ = 0;
        return this;
      }
      
      public bool HasExeTime {
        get { return result.hasExeTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExeTime {
        get { return result.ExeTime; }
        set { SetExeTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExeTime(uint value) {
        PrepareBuilder();
        result.hasExeTime = true;
        result.exeTime_ = value;
        return this;
      }
      public Builder ClearExeTime() {
        PrepareBuilder();
        result.hasExeTime = false;
        result.exeTime_ = 0;
        return this;
      }
      
      public bool HasSelfTime {
        get { return result.hasSelfTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint SelfTime {
        get { return result.SelfTime; }
        set { SetSelfTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSelfTime(uint value) {
        PrepareBuilder();
        result.hasSelfTime = true;
        result.selfTime_ = value;
        return this;
      }
      public Builder ClearSelfTime() {
        PrepareBuilder();
        result.hasSelfTime = false;
        result.selfTime_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> ParamsList {
        get { return PrepareBuilder().params_; }
      }
      public int ParamsCount {
        get { return result.ParamsCount; }
      }
      public string GetParams(int index) {
        return result.GetParams(index);
      }
      public Builder SetParams(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_[index] = value;
        return this;
      }
      public Builder AddParams(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_.Add(value);
        return this;
      }
      public Builder AddRangeParams(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.params_.Add(values);
        return this;
      }
      public Builder ClearParams() {
        PrepareBuilder();
        result.params_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.SnapshotMethod> CallMethodsList {
        get { return PrepareBuilder().callMethods_; }
      }
      public int CallMethodsCount {
        get { return result.CallMethodsCount; }
      }
      public global::BonreePB.SnapshotMethod GetCallMethods(int index) {
        return result.GetCallMethods(index);
      }
      public Builder SetCallMethods(int index, global::BonreePB.SnapshotMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callMethods_[index] = value;
        return this;
      }
      public Builder SetCallMethods(int index, global::BonreePB.SnapshotMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callMethods_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCallMethods(global::BonreePB.SnapshotMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callMethods_.Add(value);
        return this;
      }
      public Builder AddCallMethods(global::BonreePB.SnapshotMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callMethods_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCallMethods(scg::IEnumerable<global::BonreePB.SnapshotMethod> values) {
        PrepareBuilder();
        result.callMethods_.Add(values);
        return this;
      }
      public Builder ClearCallMethods() {
        PrepareBuilder();
        result.callMethods_.Clear();
        return this;
      }
      
      public bool HasExitcalls {
       get { return result.hasExitcalls; }
      }
      public global::BonreePB.SnapshotExitCallOrThreads Exitcalls {
        get { return result.Exitcalls; }
        set { SetExitcalls(value); }
      }
      public Builder SetExitcalls(global::BonreePB.SnapshotExitCallOrThreads value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExitcalls = true;
        result.exitcalls_ = value;
        return this;
      }
      public Builder SetExitcalls(global::BonreePB.SnapshotExitCallOrThreads.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExitcalls = true;
        result.exitcalls_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExitcalls(global::BonreePB.SnapshotExitCallOrThreads value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExitcalls &&
            result.exitcalls_ != global::BonreePB.SnapshotExitCallOrThreads.DefaultInstance) {
            result.exitcalls_ = global::BonreePB.SnapshotExitCallOrThreads.CreateBuilder(result.exitcalls_).MergeFrom(value).BuildPartial();
        } else {
          result.exitcalls_ = value;
        }
        result.hasExitcalls = true;
        return this;
      }
      public Builder ClearExitcalls() {
        PrepareBuilder();
        result.hasExitcalls = false;
        result.exitcalls_ = null;
        return this;
      }
    }
    static SnapshotMethod() {
      object.ReferenceEquals(global::BonreePB.PbSnapshot.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotThread : pb::GeneratedMessage<SnapshotThread, SnapshotThread.Builder> {
    private SnapshotThread() { }
    private static readonly SnapshotThread defaultInstance = new SnapshotThread().MakeReadOnly();
    private static readonly string[] _snapshotThreadFieldNames = new string[] { "callgraphRoots", "errors", "exeTime", "extExitCalls", "threadContextId", "threadId", "threadName", "timestamp" };
    private static readonly uint[] _snapshotThreadFieldTags = new uint[] { 50, 58, 16, 66, 32, 24, 42, 8 };
    public static SnapshotThread DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotThread DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotThread ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotThread__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotThread, SnapshotThread.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotThread__FieldAccessorTable; }
    }
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private ulong timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Timestamp {
      get { return timestamp_; }
    }
    
    public const int ExeTimeFieldNumber = 2;
    private bool hasExeTime;
    private uint exeTime_;
    public bool HasExeTime {
      get { return hasExeTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExeTime {
      get { return exeTime_; }
    }
    
    public const int ThreadIdFieldNumber = 3;
    private bool hasThreadId;
    private ulong threadId_;
    public bool HasThreadId {
      get { return hasThreadId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ThreadId {
      get { return threadId_; }
    }
    
    public const int ThreadContextIdFieldNumber = 4;
    private bool hasThreadContextId;
    private ulong threadContextId_;
    public bool HasThreadContextId {
      get { return hasThreadContextId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ThreadContextId {
      get { return threadContextId_; }
    }
    
    public const int ThreadNameFieldNumber = 5;
    private bool hasThreadName;
    private string threadName_ = "";
    public bool HasThreadName {
      get { return hasThreadName; }
    }
    public string ThreadName {
      get { return threadName_; }
    }
    
    public const int CallgraphRootsFieldNumber = 6;
    private pbc::PopsicleList<global::BonreePB.SnapshotMethod> callgraphRoots_ = new pbc::PopsicleList<global::BonreePB.SnapshotMethod>();
    public scg::IList<global::BonreePB.SnapshotMethod> CallgraphRootsList {
      get { return callgraphRoots_; }
    }
    public int CallgraphRootsCount {
      get { return callgraphRoots_.Count; }
    }
    public global::BonreePB.SnapshotMethod GetCallgraphRoots(int index) {
      return callgraphRoots_[index];
    }
    
    public const int ErrorsFieldNumber = 7;
    private pbc::PopsicleList<global::BonreePB.SnapshotError> errors_ = new pbc::PopsicleList<global::BonreePB.SnapshotError>();
    public scg::IList<global::BonreePB.SnapshotError> ErrorsList {
      get { return errors_; }
    }
    public int ErrorsCount {
      get { return errors_.Count; }
    }
    public global::BonreePB.SnapshotError GetErrors(int index) {
      return errors_[index];
    }
    
    public const int ExtExitCallsFieldNumber = 8;
    private pbc::PopsicleList<global::BonreePB.SnapshotExitCallOrThreads> extExitCalls_ = new pbc::PopsicleList<global::BonreePB.SnapshotExitCallOrThreads>();
    public scg::IList<global::BonreePB.SnapshotExitCallOrThreads> ExtExitCallsList {
      get { return extExitCalls_; }
    }
    public int ExtExitCallsCount {
      get { return extExitCalls_.Count; }
    }
    public global::BonreePB.SnapshotExitCallOrThreads GetExtExitCalls(int index) {
      return extExitCalls_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::BonreePB.SnapshotMethod element in CallgraphRootsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotThreadFieldNames;
      if (hasTimestamp) {
        output.WriteUInt64(1, field_names[7], Timestamp);
      }
      if (hasExeTime) {
        output.WriteUInt32(2, field_names[2], ExeTime);
      }
      if (hasThreadId) {
        output.WriteUInt64(3, field_names[5], ThreadId);
      }
      if (hasThreadContextId) {
        output.WriteUInt64(4, field_names[4], ThreadContextId);
      }
      if (hasThreadName) {
        output.WriteString(5, field_names[6], ThreadName);
      }
      if (callgraphRoots_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], callgraphRoots_);
      }
      if (errors_.Count > 0) {
        output.WriteMessageArray(7, field_names[1], errors_);
      }
      if (extExitCalls_.Count > 0) {
        output.WriteMessageArray(8, field_names[3], extExitCalls_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Timestamp);
      }
      if (hasExeTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ExeTime);
      }
      if (hasThreadId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, ThreadId);
      }
      if (hasThreadContextId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, ThreadContextId);
      }
      if (hasThreadName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, ThreadName);
      }
      foreach (global::BonreePB.SnapshotMethod element in CallgraphRootsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      foreach (global::BonreePB.SnapshotError element in ErrorsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      foreach (global::BonreePB.SnapshotExitCallOrThreads element in ExtExitCallsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotThread ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotThread ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotThread ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotThread ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotThread ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotThread ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotThread ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotThread ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotThread ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotThread ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotThread MakeReadOnly() {
      callgraphRoots_.MakeReadOnly();
      errors_.MakeReadOnly();
      extExitCalls_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotThread prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotThread, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotThread cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotThread result;
      
      private SnapshotThread PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotThread original = result;
          result = new SnapshotThread();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotThread MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotThread.Descriptor; }
      }
      
      public override SnapshotThread DefaultInstanceForType {
        get { return global::BonreePB.SnapshotThread.DefaultInstance; }
      }
      
      public override SnapshotThread BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotThread) {
          return MergeFrom((SnapshotThread) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotThread other) {
        if (other == global::BonreePB.SnapshotThread.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasExeTime) {
          ExeTime = other.ExeTime;
        }
        if (other.HasThreadId) {
          ThreadId = other.ThreadId;
        }
        if (other.HasThreadContextId) {
          ThreadContextId = other.ThreadContextId;
        }
        if (other.HasThreadName) {
          ThreadName = other.ThreadName;
        }
        if (other.callgraphRoots_.Count != 0) {
          result.callgraphRoots_.Add(other.callgraphRoots_);
        }
        if (other.errors_.Count != 0) {
          result.errors_.Add(other.errors_);
        }
        if (other.extExitCalls_.Count != 0) {
          result.extExitCalls_.Add(other.extExitCalls_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotThreadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotThreadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestamp = input.ReadUInt64(ref result.timestamp_);
              break;
            }
            case 16: {
              result.hasExeTime = input.ReadUInt32(ref result.exeTime_);
              break;
            }
            case 24: {
              result.hasThreadId = input.ReadUInt64(ref result.threadId_);
              break;
            }
            case 32: {
              result.hasThreadContextId = input.ReadUInt64(ref result.threadContextId_);
              break;
            }
            case 42: {
              result.hasThreadName = input.ReadString(ref result.threadName_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.callgraphRoots_, global::BonreePB.SnapshotMethod.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.errors_, global::BonreePB.SnapshotError.DefaultInstance, extensionRegistry);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.extExitCalls_, global::BonreePB.SnapshotExitCallOrThreads.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(ulong value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0UL;
        return this;
      }
      
      public bool HasExeTime {
        get { return result.hasExeTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExeTime {
        get { return result.ExeTime; }
        set { SetExeTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExeTime(uint value) {
        PrepareBuilder();
        result.hasExeTime = true;
        result.exeTime_ = value;
        return this;
      }
      public Builder ClearExeTime() {
        PrepareBuilder();
        result.hasExeTime = false;
        result.exeTime_ = 0;
        return this;
      }
      
      public bool HasThreadId {
        get { return result.hasThreadId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ThreadId {
        get { return result.ThreadId; }
        set { SetThreadId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetThreadId(ulong value) {
        PrepareBuilder();
        result.hasThreadId = true;
        result.threadId_ = value;
        return this;
      }
      public Builder ClearThreadId() {
        PrepareBuilder();
        result.hasThreadId = false;
        result.threadId_ = 0UL;
        return this;
      }
      
      public bool HasThreadContextId {
        get { return result.hasThreadContextId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ThreadContextId {
        get { return result.ThreadContextId; }
        set { SetThreadContextId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetThreadContextId(ulong value) {
        PrepareBuilder();
        result.hasThreadContextId = true;
        result.threadContextId_ = value;
        return this;
      }
      public Builder ClearThreadContextId() {
        PrepareBuilder();
        result.hasThreadContextId = false;
        result.threadContextId_ = 0UL;
        return this;
      }
      
      public bool HasThreadName {
        get { return result.hasThreadName; }
      }
      public string ThreadName {
        get { return result.ThreadName; }
        set { SetThreadName(value); }
      }
      public Builder SetThreadName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThreadName = true;
        result.threadName_ = value;
        return this;
      }
      public Builder ClearThreadName() {
        PrepareBuilder();
        result.hasThreadName = false;
        result.threadName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.SnapshotMethod> CallgraphRootsList {
        get { return PrepareBuilder().callgraphRoots_; }
      }
      public int CallgraphRootsCount {
        get { return result.CallgraphRootsCount; }
      }
      public global::BonreePB.SnapshotMethod GetCallgraphRoots(int index) {
        return result.GetCallgraphRoots(index);
      }
      public Builder SetCallgraphRoots(int index, global::BonreePB.SnapshotMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callgraphRoots_[index] = value;
        return this;
      }
      public Builder SetCallgraphRoots(int index, global::BonreePB.SnapshotMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callgraphRoots_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCallgraphRoots(global::BonreePB.SnapshotMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callgraphRoots_.Add(value);
        return this;
      }
      public Builder AddCallgraphRoots(global::BonreePB.SnapshotMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callgraphRoots_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCallgraphRoots(scg::IEnumerable<global::BonreePB.SnapshotMethod> values) {
        PrepareBuilder();
        result.callgraphRoots_.Add(values);
        return this;
      }
      public Builder ClearCallgraphRoots() {
        PrepareBuilder();
        result.callgraphRoots_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.SnapshotError> ErrorsList {
        get { return PrepareBuilder().errors_; }
      }
      public int ErrorsCount {
        get { return result.ErrorsCount; }
      }
      public global::BonreePB.SnapshotError GetErrors(int index) {
        return result.GetErrors(index);
      }
      public Builder SetErrors(int index, global::BonreePB.SnapshotError value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.errors_[index] = value;
        return this;
      }
      public Builder SetErrors(int index, global::BonreePB.SnapshotError.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.errors_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddErrors(global::BonreePB.SnapshotError value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.errors_.Add(value);
        return this;
      }
      public Builder AddErrors(global::BonreePB.SnapshotError.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.errors_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeErrors(scg::IEnumerable<global::BonreePB.SnapshotError> values) {
        PrepareBuilder();
        result.errors_.Add(values);
        return this;
      }
      public Builder ClearErrors() {
        PrepareBuilder();
        result.errors_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.SnapshotExitCallOrThreads> ExtExitCallsList {
        get { return PrepareBuilder().extExitCalls_; }
      }
      public int ExtExitCallsCount {
        get { return result.ExtExitCallsCount; }
      }
      public global::BonreePB.SnapshotExitCallOrThreads GetExtExitCalls(int index) {
        return result.GetExtExitCalls(index);
      }
      public Builder SetExtExitCalls(int index, global::BonreePB.SnapshotExitCallOrThreads value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.extExitCalls_[index] = value;
        return this;
      }
      public Builder SetExtExitCalls(int index, global::BonreePB.SnapshotExitCallOrThreads.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.extExitCalls_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExtExitCalls(global::BonreePB.SnapshotExitCallOrThreads value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.extExitCalls_.Add(value);
        return this;
      }
      public Builder AddExtExitCalls(global::BonreePB.SnapshotExitCallOrThreads.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.extExitCalls_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExtExitCalls(scg::IEnumerable<global::BonreePB.SnapshotExitCallOrThreads> values) {
        PrepareBuilder();
        result.extExitCalls_.Add(values);
        return this;
      }
      public Builder ClearExtExitCalls() {
        PrepareBuilder();
        result.extExitCalls_.Clear();
        return this;
      }
    }
    static SnapshotThread() {
      object.ReferenceEquals(global::BonreePB.PbSnapshot.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotHttpData : pb::GeneratedMessage<SnapshotHttpData, SnapshotHttpData.Builder> {
    private SnapshotHttpData() { }
    private static readonly SnapshotHttpData defaultInstance = new SnapshotHttpData().MakeReadOnly();
    private static readonly string[] _snapshotHttpDataFieldNames = new string[] { "httpMethod", "parameters", "requestHeader", "responseHeader", "statusCode", "url" };
    private static readonly uint[] _snapshotHttpDataFieldTags = new uint[] { 42, 50, 18, 26, 34, 10 };
    public static SnapshotHttpData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotHttpData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotHttpData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotHttpData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotHttpData, SnapshotHttpData.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotHttpData__FieldAccessorTable; }
    }
    
    public const int UrlFieldNumber = 1;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int RequestHeaderFieldNumber = 2;
    private bool hasRequestHeader;
    private string requestHeader_ = "";
    public bool HasRequestHeader {
      get { return hasRequestHeader; }
    }
    public string RequestHeader {
      get { return requestHeader_; }
    }
    
    public const int ResponseHeaderFieldNumber = 3;
    private bool hasResponseHeader;
    private string responseHeader_ = "";
    public bool HasResponseHeader {
      get { return hasResponseHeader; }
    }
    public string ResponseHeader {
      get { return responseHeader_; }
    }
    
    public const int StatusCodeFieldNumber = 4;
    private bool hasStatusCode;
    private string statusCode_ = "";
    public bool HasStatusCode {
      get { return hasStatusCode; }
    }
    public string StatusCode {
      get { return statusCode_; }
    }
    
    public const int HttpMethodFieldNumber = 5;
    private bool hasHttpMethod;
    private string httpMethod_ = "";
    public bool HasHttpMethod {
      get { return hasHttpMethod; }
    }
    public string HttpMethod {
      get { return httpMethod_; }
    }
    
    public const int ParametersFieldNumber = 6;
    private pbc::PopsicleList<string> parameters_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParametersList {
      get { return pbc::Lists.AsReadOnly(parameters_); }
    }
    public int ParametersCount {
      get { return parameters_.Count; }
    }
    public string GetParameters(int index) {
      return parameters_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotHttpDataFieldNames;
      if (hasUrl) {
        output.WriteString(1, field_names[5], Url);
      }
      if (hasRequestHeader) {
        output.WriteString(2, field_names[2], RequestHeader);
      }
      if (hasResponseHeader) {
        output.WriteString(3, field_names[3], ResponseHeader);
      }
      if (hasStatusCode) {
        output.WriteString(4, field_names[4], StatusCode);
      }
      if (hasHttpMethod) {
        output.WriteString(5, field_names[0], HttpMethod);
      }
      if (parameters_.Count > 0) {
        output.WriteStringArray(6, field_names[1], parameters_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Url);
      }
      if (hasRequestHeader) {
        size += pb::CodedOutputStream.ComputeStringSize(2, RequestHeader);
      }
      if (hasResponseHeader) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ResponseHeader);
      }
      if (hasStatusCode) {
        size += pb::CodedOutputStream.ComputeStringSize(4, StatusCode);
      }
      if (hasHttpMethod) {
        size += pb::CodedOutputStream.ComputeStringSize(5, HttpMethod);
      }
      {
        int dataSize = 0;
        foreach (string element in ParametersList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * parameters_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotHttpData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotHttpData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotHttpData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotHttpData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotHttpData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotHttpData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotHttpData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotHttpData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotHttpData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotHttpData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotHttpData MakeReadOnly() {
      parameters_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotHttpData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotHttpData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotHttpData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotHttpData result;
      
      private SnapshotHttpData PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotHttpData original = result;
          result = new SnapshotHttpData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotHttpData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotHttpData.Descriptor; }
      }
      
      public override SnapshotHttpData DefaultInstanceForType {
        get { return global::BonreePB.SnapshotHttpData.DefaultInstance; }
      }
      
      public override SnapshotHttpData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotHttpData) {
          return MergeFrom((SnapshotHttpData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotHttpData other) {
        if (other == global::BonreePB.SnapshotHttpData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasRequestHeader) {
          RequestHeader = other.RequestHeader;
        }
        if (other.HasResponseHeader) {
          ResponseHeader = other.ResponseHeader;
        }
        if (other.HasStatusCode) {
          StatusCode = other.StatusCode;
        }
        if (other.HasHttpMethod) {
          HttpMethod = other.HttpMethod;
        }
        if (other.parameters_.Count != 0) {
          result.parameters_.Add(other.parameters_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotHttpDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotHttpDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 18: {
              result.hasRequestHeader = input.ReadString(ref result.requestHeader_);
              break;
            }
            case 26: {
              result.hasResponseHeader = input.ReadString(ref result.responseHeader_);
              break;
            }
            case 34: {
              result.hasStatusCode = input.ReadString(ref result.statusCode_);
              break;
            }
            case 42: {
              result.hasHttpMethod = input.ReadString(ref result.httpMethod_);
              break;
            }
            case 50: {
              input.ReadStringArray(tag, field_name, result.parameters_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasRequestHeader {
        get { return result.hasRequestHeader; }
      }
      public string RequestHeader {
        get { return result.RequestHeader; }
        set { SetRequestHeader(value); }
      }
      public Builder SetRequestHeader(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestHeader = true;
        result.requestHeader_ = value;
        return this;
      }
      public Builder ClearRequestHeader() {
        PrepareBuilder();
        result.hasRequestHeader = false;
        result.requestHeader_ = "";
        return this;
      }
      
      public bool HasResponseHeader {
        get { return result.hasResponseHeader; }
      }
      public string ResponseHeader {
        get { return result.ResponseHeader; }
        set { SetResponseHeader(value); }
      }
      public Builder SetResponseHeader(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponseHeader = true;
        result.responseHeader_ = value;
        return this;
      }
      public Builder ClearResponseHeader() {
        PrepareBuilder();
        result.hasResponseHeader = false;
        result.responseHeader_ = "";
        return this;
      }
      
      public bool HasStatusCode {
        get { return result.hasStatusCode; }
      }
      public string StatusCode {
        get { return result.StatusCode; }
        set { SetStatusCode(value); }
      }
      public Builder SetStatusCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatusCode = true;
        result.statusCode_ = value;
        return this;
      }
      public Builder ClearStatusCode() {
        PrepareBuilder();
        result.hasStatusCode = false;
        result.statusCode_ = "";
        return this;
      }
      
      public bool HasHttpMethod {
        get { return result.hasHttpMethod; }
      }
      public string HttpMethod {
        get { return result.HttpMethod; }
        set { SetHttpMethod(value); }
      }
      public Builder SetHttpMethod(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHttpMethod = true;
        result.httpMethod_ = value;
        return this;
      }
      public Builder ClearHttpMethod() {
        PrepareBuilder();
        result.hasHttpMethod = false;
        result.httpMethod_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> ParametersList {
        get { return PrepareBuilder().parameters_; }
      }
      public int ParametersCount {
        get { return result.ParametersCount; }
      }
      public string GetParameters(int index) {
        return result.GetParameters(index);
      }
      public Builder SetParameters(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameters_[index] = value;
        return this;
      }
      public Builder AddParameters(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parameters_.Add(value);
        return this;
      }
      public Builder AddRangeParameters(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.parameters_.Add(values);
        return this;
      }
      public Builder ClearParameters() {
        PrepareBuilder();
        result.parameters_.Clear();
        return this;
      }
    }
    static SnapshotHttpData() {
      object.ReferenceEquals(global::BonreePB.PbSnapshot.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotData : pb::GeneratedMessage<SnapshotData, SnapshotData.Builder> {
    private SnapshotData() { }
    private static readonly SnapshotData defaultInstance = new SnapshotData().MakeReadOnly();
    private static readonly string[] _snapshotDataFieldNames = new string[] { "bt", "cpuTimeMs", "errorName", "executeTimeMs", "httpdata", "pid", "requestGUID", "snapshotThreads", "summary", "timeStamp", "type", "ueType", "url" };
    private static readonly uint[] _snapshotDataFieldTags = new uint[] { 26, 48, 58, 40, 98, 72, 10, 90, 66, 32, 104, 16, 82 };
    public static SnapshotData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotData, SnapshotData.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotData__FieldAccessorTable; }
    }
    
    public const int RequestGUIDFieldNumber = 1;
    private bool hasRequestGUID;
    private string requestGUID_ = "";
    public bool HasRequestGUID {
      get { return hasRequestGUID; }
    }
    public string RequestGUID {
      get { return requestGUID_; }
    }
    
    public const int UeTypeFieldNumber = 2;
    private bool hasUeType;
    private global::BonreePB.UserExperienceType ueType_ = global::BonreePB.UserExperienceType.USER_EXPERIENCE_TYPE_GOOD;
    public bool HasUeType {
      get { return hasUeType; }
    }
    public global::BonreePB.UserExperienceType UeType {
      get { return ueType_; }
    }
    
    public const int BtFieldNumber = 3;
    private bool hasBt;
    private global::BonreePB.BusinessTransaction bt_;
    public bool HasBt {
      get { return hasBt; }
    }
    public global::BonreePB.BusinessTransaction Bt {
      get { return bt_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public const int TimeStampFieldNumber = 4;
    private bool hasTimeStamp;
    private ulong timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int ExecuteTimeMsFieldNumber = 5;
    private bool hasExecuteTimeMs;
    private uint executeTimeMs_;
    public bool HasExecuteTimeMs {
      get { return hasExecuteTimeMs; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExecuteTimeMs {
      get { return executeTimeMs_; }
    }
    
    public const int CpuTimeMsFieldNumber = 6;
    private bool hasCpuTimeMs;
    private uint cpuTimeMs_;
    public bool HasCpuTimeMs {
      get { return hasCpuTimeMs; }
    }
    [global::System.CLSCompliant(false)]
    public uint CpuTimeMs {
      get { return cpuTimeMs_; }
    }
    
    public const int ErrorNameFieldNumber = 7;
    private bool hasErrorName;
    private string errorName_ = "";
    public bool HasErrorName {
      get { return hasErrorName; }
    }
    public string ErrorName {
      get { return errorName_; }
    }
    
    public const int SummaryFieldNumber = 8;
    private bool hasSummary;
    private string summary_ = "";
    public bool HasSummary {
      get { return hasSummary; }
    }
    public string Summary {
      get { return summary_; }
    }
    
    public const int PidFieldNumber = 9;
    private bool hasPid;
    private uint pid_;
    public bool HasPid {
      get { return hasPid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Pid {
      get { return pid_; }
    }
    
    public const int UrlFieldNumber = 10;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int SnapshotThreadsFieldNumber = 11;
    private pbc::PopsicleList<global::BonreePB.SnapshotThread> snapshotThreads_ = new pbc::PopsicleList<global::BonreePB.SnapshotThread>();
    public scg::IList<global::BonreePB.SnapshotThread> SnapshotThreadsList {
      get { return snapshotThreads_; }
    }
    public int SnapshotThreadsCount {
      get { return snapshotThreads_.Count; }
    }
    public global::BonreePB.SnapshotThread GetSnapshotThreads(int index) {
      return snapshotThreads_[index];
    }
    
    public const int HttpdataFieldNumber = 12;
    private bool hasHttpdata;
    private global::BonreePB.SnapshotHttpData httpdata_;
    public bool HasHttpdata {
      get { return hasHttpdata; }
    }
    public global::BonreePB.SnapshotHttpData Httpdata {
      get { return httpdata_ ?? global::BonreePB.SnapshotHttpData.DefaultInstance; }
    }
    
    public const int TypeFieldNumber = 13;
    private bool hasType;
    private global::BonreePB.SnapshotType type_ = global::BonreePB.SnapshotType.SNAPSHOT_TYPE_FULL;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.SnapshotType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRequestGUID) return false;
        foreach (global::BonreePB.SnapshotThread element in SnapshotThreadsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotDataFieldNames;
      if (hasRequestGUID) {
        output.WriteString(1, field_names[6], RequestGUID);
      }
      if (hasUeType) {
        output.WriteEnum(2, field_names[11], (int) UeType, UeType);
      }
      if (hasBt) {
        output.WriteMessage(3, field_names[0], Bt);
      }
      if (hasTimeStamp) {
        output.WriteUInt64(4, field_names[9], TimeStamp);
      }
      if (hasExecuteTimeMs) {
        output.WriteUInt32(5, field_names[3], ExecuteTimeMs);
      }
      if (hasCpuTimeMs) {
        output.WriteUInt32(6, field_names[1], CpuTimeMs);
      }
      if (hasErrorName) {
        output.WriteString(7, field_names[2], ErrorName);
      }
      if (hasSummary) {
        output.WriteString(8, field_names[8], Summary);
      }
      if (hasPid) {
        output.WriteUInt32(9, field_names[5], Pid);
      }
      if (hasUrl) {
        output.WriteString(10, field_names[12], Url);
      }
      if (snapshotThreads_.Count > 0) {
        output.WriteMessageArray(11, field_names[7], snapshotThreads_);
      }
      if (hasHttpdata) {
        output.WriteMessage(12, field_names[4], Httpdata);
      }
      if (hasType) {
        output.WriteEnum(13, field_names[10], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(1, RequestGUID);
      }
      if (hasUeType) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) UeType);
      }
      if (hasBt) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Bt);
      }
      if (hasTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, TimeStamp);
      }
      if (hasExecuteTimeMs) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ExecuteTimeMs);
      }
      if (hasCpuTimeMs) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, CpuTimeMs);
      }
      if (hasErrorName) {
        size += pb::CodedOutputStream.ComputeStringSize(7, ErrorName);
      }
      if (hasSummary) {
        size += pb::CodedOutputStream.ComputeStringSize(8, Summary);
      }
      if (hasPid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Pid);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(10, Url);
      }
      foreach (global::BonreePB.SnapshotThread element in SnapshotThreadsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, element);
      }
      if (hasHttpdata) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, Httpdata);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(13, (int) Type);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotData MakeReadOnly() {
      snapshotThreads_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotData result;
      
      private SnapshotData PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotData original = result;
          result = new SnapshotData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotData.Descriptor; }
      }
      
      public override SnapshotData DefaultInstanceForType {
        get { return global::BonreePB.SnapshotData.DefaultInstance; }
      }
      
      public override SnapshotData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotData) {
          return MergeFrom((SnapshotData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotData other) {
        if (other == global::BonreePB.SnapshotData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequestGUID) {
          RequestGUID = other.RequestGUID;
        }
        if (other.HasUeType) {
          UeType = other.UeType;
        }
        if (other.HasBt) {
          MergeBt(other.Bt);
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasExecuteTimeMs) {
          ExecuteTimeMs = other.ExecuteTimeMs;
        }
        if (other.HasCpuTimeMs) {
          CpuTimeMs = other.CpuTimeMs;
        }
        if (other.HasErrorName) {
          ErrorName = other.ErrorName;
        }
        if (other.HasSummary) {
          Summary = other.Summary;
        }
        if (other.HasPid) {
          Pid = other.Pid;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.snapshotThreads_.Count != 0) {
          result.snapshotThreads_.Add(other.snapshotThreads_);
        }
        if (other.HasHttpdata) {
          MergeHttpdata(other.Httpdata);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRequestGUID = input.ReadString(ref result.requestGUID_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.ueType_, out unknown)) {
                result.hasUeType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasBt) {
                subBuilder.MergeFrom(Bt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bt = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasTimeStamp = input.ReadUInt64(ref result.timeStamp_);
              break;
            }
            case 40: {
              result.hasExecuteTimeMs = input.ReadUInt32(ref result.executeTimeMs_);
              break;
            }
            case 48: {
              result.hasCpuTimeMs = input.ReadUInt32(ref result.cpuTimeMs_);
              break;
            }
            case 58: {
              result.hasErrorName = input.ReadString(ref result.errorName_);
              break;
            }
            case 66: {
              result.hasSummary = input.ReadString(ref result.summary_);
              break;
            }
            case 72: {
              result.hasPid = input.ReadUInt32(ref result.pid_);
              break;
            }
            case 82: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.snapshotThreads_, global::BonreePB.SnapshotThread.DefaultInstance, extensionRegistry);
              break;
            }
            case 98: {
              global::BonreePB.SnapshotHttpData.Builder subBuilder = global::BonreePB.SnapshotHttpData.CreateBuilder();
              if (result.hasHttpdata) {
                subBuilder.MergeFrom(Httpdata);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Httpdata = subBuilder.BuildPartial();
              break;
            }
            case 104: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(13, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRequestGUID {
        get { return result.hasRequestGUID; }
      }
      public string RequestGUID {
        get { return result.RequestGUID; }
        set { SetRequestGUID(value); }
      }
      public Builder SetRequestGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestGUID = true;
        result.requestGUID_ = value;
        return this;
      }
      public Builder ClearRequestGUID() {
        PrepareBuilder();
        result.hasRequestGUID = false;
        result.requestGUID_ = "";
        return this;
      }
      
      public bool HasUeType {
       get { return result.hasUeType; }
      }
      public global::BonreePB.UserExperienceType UeType {
        get { return result.UeType; }
        set { SetUeType(value); }
      }
      public Builder SetUeType(global::BonreePB.UserExperienceType value) {
        PrepareBuilder();
        result.hasUeType = true;
        result.ueType_ = value;
        return this;
      }
      public Builder ClearUeType() {
        PrepareBuilder();
        result.hasUeType = false;
        result.ueType_ = global::BonreePB.UserExperienceType.USER_EXPERIENCE_TYPE_GOOD;
        return this;
      }
      
      public bool HasBt {
       get { return result.hasBt; }
      }
      public global::BonreePB.BusinessTransaction Bt {
        get { return result.Bt; }
        set { SetBt(value); }
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = value;
        return this;
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBt &&
            result.bt_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.bt_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.bt_).MergeFrom(value).BuildPartial();
        } else {
          result.bt_ = value;
        }
        result.hasBt = true;
        return this;
      }
      public Builder ClearBt() {
        PrepareBuilder();
        result.hasBt = false;
        result.bt_ = null;
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0UL;
        return this;
      }
      
      public bool HasExecuteTimeMs {
        get { return result.hasExecuteTimeMs; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExecuteTimeMs {
        get { return result.ExecuteTimeMs; }
        set { SetExecuteTimeMs(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExecuteTimeMs(uint value) {
        PrepareBuilder();
        result.hasExecuteTimeMs = true;
        result.executeTimeMs_ = value;
        return this;
      }
      public Builder ClearExecuteTimeMs() {
        PrepareBuilder();
        result.hasExecuteTimeMs = false;
        result.executeTimeMs_ = 0;
        return this;
      }
      
      public bool HasCpuTimeMs {
        get { return result.hasCpuTimeMs; }
      }
      [global::System.CLSCompliant(false)]
      public uint CpuTimeMs {
        get { return result.CpuTimeMs; }
        set { SetCpuTimeMs(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCpuTimeMs(uint value) {
        PrepareBuilder();
        result.hasCpuTimeMs = true;
        result.cpuTimeMs_ = value;
        return this;
      }
      public Builder ClearCpuTimeMs() {
        PrepareBuilder();
        result.hasCpuTimeMs = false;
        result.cpuTimeMs_ = 0;
        return this;
      }
      
      public bool HasErrorName {
        get { return result.hasErrorName; }
      }
      public string ErrorName {
        get { return result.ErrorName; }
        set { SetErrorName(value); }
      }
      public Builder SetErrorName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorName = true;
        result.errorName_ = value;
        return this;
      }
      public Builder ClearErrorName() {
        PrepareBuilder();
        result.hasErrorName = false;
        result.errorName_ = "";
        return this;
      }
      
      public bool HasSummary {
        get { return result.hasSummary; }
      }
      public string Summary {
        get { return result.Summary; }
        set { SetSummary(value); }
      }
      public Builder SetSummary(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSummary = true;
        result.summary_ = value;
        return this;
      }
      public Builder ClearSummary() {
        PrepareBuilder();
        result.hasSummary = false;
        result.summary_ = "";
        return this;
      }
      
      public bool HasPid {
        get { return result.hasPid; }
      }
      [global::System.CLSCompliant(false)]
      public uint Pid {
        get { return result.Pid; }
        set { SetPid(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPid(uint value) {
        PrepareBuilder();
        result.hasPid = true;
        result.pid_ = value;
        return this;
      }
      public Builder ClearPid() {
        PrepareBuilder();
        result.hasPid = false;
        result.pid_ = 0;
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.SnapshotThread> SnapshotThreadsList {
        get { return PrepareBuilder().snapshotThreads_; }
      }
      public int SnapshotThreadsCount {
        get { return result.SnapshotThreadsCount; }
      }
      public global::BonreePB.SnapshotThread GetSnapshotThreads(int index) {
        return result.GetSnapshotThreads(index);
      }
      public Builder SetSnapshotThreads(int index, global::BonreePB.SnapshotThread value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshotThreads_[index] = value;
        return this;
      }
      public Builder SetSnapshotThreads(int index, global::BonreePB.SnapshotThread.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snapshotThreads_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSnapshotThreads(global::BonreePB.SnapshotThread value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshotThreads_.Add(value);
        return this;
      }
      public Builder AddSnapshotThreads(global::BonreePB.SnapshotThread.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snapshotThreads_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSnapshotThreads(scg::IEnumerable<global::BonreePB.SnapshotThread> values) {
        PrepareBuilder();
        result.snapshotThreads_.Add(values);
        return this;
      }
      public Builder ClearSnapshotThreads() {
        PrepareBuilder();
        result.snapshotThreads_.Clear();
        return this;
      }
      
      public bool HasHttpdata {
       get { return result.hasHttpdata; }
      }
      public global::BonreePB.SnapshotHttpData Httpdata {
        get { return result.Httpdata; }
        set { SetHttpdata(value); }
      }
      public Builder SetHttpdata(global::BonreePB.SnapshotHttpData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHttpdata = true;
        result.httpdata_ = value;
        return this;
      }
      public Builder SetHttpdata(global::BonreePB.SnapshotHttpData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHttpdata = true;
        result.httpdata_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHttpdata(global::BonreePB.SnapshotHttpData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHttpdata &&
            result.httpdata_ != global::BonreePB.SnapshotHttpData.DefaultInstance) {
            result.httpdata_ = global::BonreePB.SnapshotHttpData.CreateBuilder(result.httpdata_).MergeFrom(value).BuildPartial();
        } else {
          result.httpdata_ = value;
        }
        result.hasHttpdata = true;
        return this;
      }
      public Builder ClearHttpdata() {
        PrepareBuilder();
        result.hasHttpdata = false;
        result.httpdata_ = null;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.SnapshotType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.SnapshotType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.SnapshotType.SNAPSHOT_TYPE_FULL;
        return this;
      }
    }
    static SnapshotData() {
      object.ReferenceEquals(global::BonreePB.PbSnapshot.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotReq : pb::GeneratedMessage<SnapshotReq, SnapshotReq.Builder> {
    private SnapshotReq() { }
    private static readonly SnapshotReq defaultInstance = new SnapshotReq().MakeReadOnly();
    private static readonly string[] _snapshotReqFieldNames = new string[] { "agentIdentity", "snapshots" };
    private static readonly uint[] _snapshotReqFieldTags = new uint[] { 10, 18 };
    public static SnapshotReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotReq, SnapshotReq.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSnapshot.internal__static_BonreePB_SnapshotReq__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::BonreePB.AgentIdentity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::BonreePB.AgentIdentity AgentIdentity {
      get { return agentIdentity_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int SnapshotsFieldNumber = 2;
    private pbc::PopsicleList<global::BonreePB.SnapshotData> snapshots_ = new pbc::PopsicleList<global::BonreePB.SnapshotData>();
    public scg::IList<global::BonreePB.SnapshotData> SnapshotsList {
      get { return snapshots_; }
    }
    public int SnapshotsCount {
      get { return snapshots_.Count; }
    }
    public global::BonreePB.SnapshotData GetSnapshots(int index) {
      return snapshots_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::BonreePB.SnapshotData element in SnapshotsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotReqFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (snapshots_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], snapshots_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentIdentity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
      }
      foreach (global::BonreePB.SnapshotData element in SnapshotsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotReq MakeReadOnly() {
      snapshots_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotReq result;
      
      private SnapshotReq PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotReq original = result;
          result = new SnapshotReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotReq.Descriptor; }
      }
      
      public override SnapshotReq DefaultInstanceForType {
        get { return global::BonreePB.SnapshotReq.DefaultInstance; }
      }
      
      public override SnapshotReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotReq) {
          return MergeFrom((SnapshotReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotReq other) {
        if (other == global::BonreePB.SnapshotReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.snapshots_.Count != 0) {
          result.snapshots_.Add(other.snapshots_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.snapshots_, global::BonreePB.SnapshotData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::BonreePB.AgentIdentity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIdentity_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.SnapshotData> SnapshotsList {
        get { return PrepareBuilder().snapshots_; }
      }
      public int SnapshotsCount {
        get { return result.SnapshotsCount; }
      }
      public global::BonreePB.SnapshotData GetSnapshots(int index) {
        return result.GetSnapshots(index);
      }
      public Builder SetSnapshots(int index, global::BonreePB.SnapshotData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshots_[index] = value;
        return this;
      }
      public Builder SetSnapshots(int index, global::BonreePB.SnapshotData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snapshots_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSnapshots(global::BonreePB.SnapshotData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshots_.Add(value);
        return this;
      }
      public Builder AddSnapshots(global::BonreePB.SnapshotData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snapshots_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSnapshots(scg::IEnumerable<global::BonreePB.SnapshotData> values) {
        PrepareBuilder();
        result.snapshots_.Add(values);
        return this;
      }
      public Builder ClearSnapshots() {
        PrepareBuilder();
        result.snapshots_.Clear();
        return this;
      }
    }
    static SnapshotReq() {
      object.ReferenceEquals(global::BonreePB.PbSnapshot.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
