// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbSlowBackend {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_SqlCallItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SqlCallItem, global::BonreePB.SqlCallItem.Builder> internal__static_BonreePB_SqlCallItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SqlCall__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SqlCall, global::BonreePB.SqlCall.Builder> internal__static_BonreePB_SqlCall__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_NoSqlTopCall__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.NoSqlTopCall, global::BonreePB.NoSqlTopCall.Builder> internal__static_BonreePB_NoSqlTopCall__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_NoSqlCallItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.NoSqlCallItem, global::BonreePB.NoSqlCallItem.Builder> internal__static_BonreePB_NoSqlCallItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_NoSqlCall__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.NoSqlCall, global::BonreePB.NoSqlCall.Builder> internal__static_BonreePB_NoSqlCall__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_RemoteCallItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.RemoteCallItem, global::BonreePB.RemoteCallItem.Builder> internal__static_BonreePB_RemoteCallItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_RemoteCall__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.RemoteCall, global::BonreePB.RemoteCall.Builder> internal__static_BonreePB_RemoteCall__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SlowBackendReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SlowBackendReq, global::BonreePB.SlowBackendReq.Builder> internal__static_BonreePB_SlowBackendReq__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbSlowBackend() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwYl9zbG93QmFja2VuZC5wcm90bxIIQm9ucmVlUEIaDnBiX2FnZW50LnBy", 
            "b3RvGhBwYl9iYWNrZW5kLnByb3RvIskBCgtTcWxDYWxsSXRlbRIpCgRiZWNk", 
            "GAEgASgLMhsuQm9ucmVlUEIuQmFja2VuZENhbGxEZXRhaWwSFAoMcmVxdWVz", 
            "dENvdW50GAIgASgNEhMKC3N1bVJlc3BUaW1lGAMgASgEEhMKC21heFJlc3BU", 
            "aW1lGAQgASgNEhMKC21pblJlc3BUaW1lGAUgASgNEhMKC2N1clJlc3BUaW1l", 
            "GAYgASgNEhEKCXNsb3dDYWxscxgHIAEoDRISCgplcnJvckNhbGxzGAggASgN", 
            "IjYKB1NxbENhbGwSKwoMc3FsY2FsbEl0ZW1zGAEgAygLMhUuQm9ucmVlUEIu", 
            "U3FsQ2FsbEl0ZW0iWAoMTm9TcWxUb3BDYWxsEhEKCXRpbWVTdGFtcBgBIAEo", 
            "BBIQCghyZXNwVGltZRgCIAEoDRIOCgZkZXRhaWwYAyABKAkSEwoLcmVxdWVz", 
            "dEdVSUQYBCABKAki8QEKDU5vU3FsQ2FsbEl0ZW0SKQoEYmVjZBgBIAEoCzIb", 
            "LkJvbnJlZVBCLkJhY2tlbmRDYWxsRGV0YWlsEhQKDHJlcXVlc3RDb3VudBgC", 
            "IAEoDRITCgtzdW1SZXNwVGltZRgDIAEoBBITCgttYXhSZXNwVGltZRgEIAEo", 
            "DRITCgttaW5SZXNwVGltZRgFIAEoDRITCgtjdXJSZXNwVGltZRgGIAEoDRIR", 
            "CglzbG93Q2FsbHMYByABKA0SEgoKZXJyb3JDYWxscxgIIAEoDRIkCgR0b3Bz", 
            "GAkgAygLMhYuQm9ucmVlUEIuTm9TcWxUb3BDYWxsIjwKCU5vU3FsQ2FsbBIv", 
            "Cg5ub3NxbENhbGxJdGVtcxgBIAMoCzIXLkJvbnJlZVBCLk5vU3FsQ2FsbEl0", 
            "ZW0izAEKDlJlbW90ZUNhbGxJdGVtEikKBGJlY2QYASABKAsyGy5Cb25yZWVQ", 
            "Qi5CYWNrZW5kQ2FsbERldGFpbBIUCgxyZXF1ZXN0Q291bnQYAiABKA0SEwoL", 
            "c3VtUmVzcFRpbWUYAyABKAQSEwoLbWF4UmVzcFRpbWUYBCABKA0SEwoLbWlu", 
            "UmVzcFRpbWUYBSABKA0SEwoLY3VyUmVzcFRpbWUYBiABKA0SEQoJc2xvd0Nh", 
            "bGxzGAcgASgNEhIKCmVycm9yQ2FsbHMYCCABKA0iPwoKUmVtb3RlQ2FsbBIx", 
            "Cg9yZW1vdGVDYWxsSXRlbXMYASADKAsyGC5Cb25yZWVQQi5SZW1vdGVDYWxs", 
            "SXRlbSK2AQoOU2xvd0JhY2tlbmRSZXESLgoNYWdlbnRJZGVudGl0eRgBIAEo", 
            "CzIXLkJvbnJlZVBCLkFnZW50SWRlbnRpdHkSIgoHc3FsQ2FsbBgCIAEoCzIR", 
            "LkJvbnJlZVBCLlNxbENhbGwSJgoJbm9zcWxDYWxsGAMgASgLMhMuQm9ucmVl", 
            "UEIuTm9TcWxDYWxsEigKCnJlbW90ZUNhbGwYBCABKAsyFC5Cb25yZWVQQi5S", 
            "ZW1vdGVDYWxsQhkKF2NvbS5ib25yZWUucHJvdG9idWYuYXBtSo0dCgYSBAAA", 
            "SQEKCAoBAhIDAAgQCggKAQgSAwEAMAoLCgQI5wcAEgMBADAKDAoFCOcHAAIS", 
            "AwEHEwoNCgYI5wcAAgASAwEHEwoOCgcI5wcAAgABEgMBBxMKDAoFCOcHAAcS", 
            "AwEWLwoJCgIDABIDAwcXCgkKAgMBEgMEBxkKSQoCBAASBAcAEAEaPURC6LCD", 
            "55SoIOavj+S4gOadoXNxbOeahOe7n+iuoSx3aGVyZeadoeS7tueahOWPguaV", 
            "sOaNouaIkO+8nwoKCgoDBAABEgMHCBMKGgoEBAACABIDCAQuIg3osIPnlKjo", 
            "r6bmg4UKCgwKBQQAAgAEEgMIBAwKDAoFBAACAAYSAwgNHgoMCgUEAAIAARID", 
            "CB8jCgwKBQQAAgADEgMILC0KHQoEBAACARIDCQQuIhDosIPnlKjmgLvmrKHm", 
            "lbAKCgwKBQQAAgEEEgMJBAwKDAoFBAACAQUSAwkNEwoMCgUEAAIBARIDCRQg", 
            "CgwKBQQAAgEDEgMJLC0KHQoEBAACAhIDCgQuIhDmgLvlk43lupTml7bpl7QK", 
            "CgwKBQQAAgIEEgMKBAwKDAoFBAACAgUSAwoNEwoMCgUEAAICARIDChQfCgwK", 
            "BQQAAgIDEgMKLC0KIAoEBAACAxIDCwQuIhPmnIDlpKflk43lupTml7bpl7QK", 
            "CgwKBQQAAgMEEgMLBAwKDAoFBAACAwUSAwsNEwoMCgUEAAIDARIDCxQfCgwK", 
            "BQQAAgMDEgMLLC0KIAoEBAACBBIDDAQuIhPmnIDlsI/lk43lupTml7bpl7QK", 
            "CgwKBQQAAgQEEgMMBAwKDAoFBAACBAUSAwwNEwoMCgUEAAIEARIDDBQfCgwK", 
            "BQQAAgQDEgMMLC0KIAoEBAACBRIDDQQuIhPlvZPliY3lk43lupTml7bpl7QK", 
            "CgwKBQQAAgUEEgMNBAwKDAoFBAACBQUSAw0NEwoMCgUEAAIFARIDDRQfCgwK", 
            "BQQAAgUDEgMNLC0KHQoEBAACBhIDDgQuIhDmhaLosIPnlKjmrKHmlbAKCgwK", 
            "BQQAAgYEEgMOBAwKDAoFBAACBgUSAw4NEwoMCgUEAAIGARIDDhQdCgwKBQQA", 
            "AgYDEgMOLC0KIAoEBAACBxIDDwQuIhPplJnor6/osIPnlKjmrKHmlbAKCgwK", 
            "BQQAAgcEEgMPBAwKDAoFBAACBwUSAw8NEwoMCgUEAAIHARIDDxQeCgwKBQQA", 
            "AgcDEgMPLC0KHwoCBAESBBMAFQEaE0RC6LCD55SoIHNxbOiwg+eUqAoKCgoD", 
            "BAEBEgMTCA8KKwoEBAECABIDFAQuIh5EQuavj+S4gOadoXNxbOivreWPpeea", 
            "hOe7n+iuoQoKDAoFBAECAAQSAxQEDAoMCgUEAQIABhIDFA0YCgwKBQQBAgAB", 
            "EgMUGSUKDAoFBAECAAMSAxQsLQobCgIEAhIEGQAeARoPTk9TUUwgdG9wIGNh", 
            "bGwKCgoKAwQCARIDGQgUChcKBAQCAgASAxoELiIK5pe26Ze05oizCgoMCgUE", 
            "AgIABBIDGgQMCgwKBQQCAgAFEgMaDRMKDAoFBAICAAESAxoUHQoMCgUEAgIA", 
            "AxIDGiwtChoKBAQCAgESAxsELiIN5ZON5bqU5pe26Ze0CgoMCgUEAgIBBBID", 
            "GwQMCgwKBQQCAgEFEgMbDRMKDAoFBAICAQESAxsUHAoMCgUEAgIBAxIDGywt", 
            "Ch0KBAQCAgISAxwELiIQ6K+m57uGa2V55L+h5oGvCgoMCgUEAgICBBIDHAQM", 
            "CgwKBQQCAgIFEgMcDRMKDAoFBAICAgESAxwUGgoMCgUEAgICAxIDHCwtChgK", 
            "BAQCAgMSAx0ELiIL5b+r54WnR1VJRAoKDAoFBAICAwQSAx0EDAoMCgUEAgID", 
            "BRIDHQ0TCgwKBQQCAgMBEgMdFB8KDAoFBAICAwMSAx0sLQo0CgIEAxIEIQAr", 
            "ARooTk9TUUzosIPnlKgs54m55a6a6ZuG5ZCI5pON5L2c55qE57uf6K6hCgoK", 
            "CgMEAwESAyEIFQoaCgQEAwIAEgMiBC4iDeiwg+eUqOivpuaDhQoKDAoFBAMC", 
            "AAQSAyIEDAoMCgUEAwIABhIDIg0eCgwKBQQDAgABEgMiHyMKDAoFBAMCAAMS", 
            "AyIsLQodCgQEAwIBEgMjBC4iEOiwg+eUqOaAu+asoeaVsAoKDAoFBAMCAQQS", 
            "AyMEDAoMCgUEAwIBBRIDIw0TCgwKBQQDAgEBEgMjFCAKDAoFBAMCAQMSAyMs", 
            "LQodCgQEAwICEgMkBC4iEOaAu+WTjeW6lOaXtumXtAoKDAoFBAMCAgQSAyQE", 
            "DAoMCgUEAwICBRIDJA0TCgwKBQQDAgIBEgMkFB8KDAoFBAMCAgMSAyQsLQog", 
            "CgQEAwIDEgMlBC4iE+acgOWkp+WTjeW6lOaXtumXtAoKDAoFBAMCAwQSAyUE", 
            "DAoMCgUEAwIDBRIDJQ0TCgwKBQQDAgMBEgMlFB8KDAoFBAMCAwMSAyUsLQog", 
            "CgQEAwIEEgMmBC4iE+acgOWwj+WTjeW6lOaXtumXtAoKDAoFBAMCBAQSAyYE", 
            "DAoMCgUEAwIEBRIDJg0TCgwKBQQDAgQBEgMmFB8KDAoFBAMCBAMSAyYsLQog", 
            "CgQEAwIFEgMnBC4iE+W9k+WJjeWTjeW6lOaXtumXtAoKDAoFBAMCBQQSAycE", 
            "DAoMCgUEAwIFBRIDJw0TCgwKBQQDAgUBEgMnFB8KDAoFBAMCBQMSAycsLQod", 
            "CgQEAwIGEgMoBC4iEOaFouiwg+eUqOasoeaVsAoKDAoFBAMCBgQSAygEDAoM", 
            "CgUEAwIGBRIDKA0TCgwKBQQDAgYBEgMoFB0KDAoFBAMCBgMSAygsLQogCgQE", 
            "AwIHEgMpBC4iE+mUmeivr+iwg+eUqOasoeaVsAoKDAoFBAMCBwQSAykEDAoM", 
            "CgUEAwIHBRIDKQ0TCgwKBQQDAgcBEgMpFB4KDAoFBAMCBwMSAyksLQoiCgQE", 
            "AwIIEgMqBC4iFeacgOaFoueahDMw5qyh6LCD55SoCgoMCgUEAwIIBBIDKgQM", 
            "CgwKBQQDAggGEgMqDRkKDAoFBAMCCAESAyoaHgoMCgUEAwIIAxIDKiwtChgK", 
            "AgQEEgQtAC8BGgxOT1NRTOiwg+eUqAoKCgoDBAQBEgMtCBEKNQoEBAQCABID", 
            "LgQuIihOT1NRTCDnmoTnu5/orqEscmVkaXMuaHNldC9yZWRpcy5zZXTnrYkK", 
            "CgwKBQQEAgAEEgMuBAwKDAoFBAQCAAYSAy4NGgoMCgUEBAIAARIDLhspCgwK", 
            "BQQEAgADEgMuLC0KMQoCBAUSBDMAPAEaJei/nOeoi+iwg+eUqO+8jOeJueWu", 
            "muiwg+eUqOeahOe7n+iuoQoKCgoDBAUBEgMzCBYKGgoEBAUCABIDNAQuIg3o", 
            "sIPnlKjor6bmg4UKCgwKBQQFAgAEEgM0BAwKDAoFBAUCAAYSAzQNHgoMCgUE", 
            "BQIAARIDNB8jCgwKBQQFAgADEgM0LC0KHQoEBAUCARIDNQQuIhDosIPnlKjm", 
            "gLvmrKHmlbAKCgwKBQQFAgEEEgM1BAwKDAoFBAUCAQUSAzUNEwoMCgUEBQIB", 
            "ARIDNRQgCgwKBQQFAgEDEgM1LC0KHQoEBAUCAhIDNgQuIhDmgLvlk43lupTm", 
            "l7bpl7QKCgwKBQQFAgIEEgM2BAwKDAoFBAUCAgUSAzYNEwoMCgUEBQICARID", 
            "NhQfCgwKBQQFAgIDEgM2LC0KIAoEBAUCAxIDNwQuIhPmnIDlpKflk43lupTm", 
            "l7bpl7QKCgwKBQQFAgMEEgM3BAwKDAoFBAUCAwUSAzcNEwoMCgUEBQIDARID", 
            "NxQfCgwKBQQFAgMDEgM3LC0KIAoEBAUCBBIDOAQuIhPmnIDlsI/lk43lupTm", 
            "l7bpl7QKCgwKBQQFAgQEEgM4BAwKDAoFBAUCBAUSAzgNEwoMCgUEBQIEARID", 
            "OBQfCgwKBQQFAgQDEgM4LC0KIAoEBAUCBRIDOQQuIhPlvZPliY3lk43lupTm", 
            "l7bpl7QKCgwKBQQFAgUEEgM5BAwKDAoFBAUCBQUSAzkNEwoMCgUEBQIFARID", 
            "ORQfCgwKBQQFAgUDEgM5LC0KHQoEBAUCBhIDOgQuIhDmhaLosIPnlKjmrKHm", 
            "lbAKCgwKBQQFAgYEEgM6BAwKDAoFBAUCBgUSAzoNEwoMCgUEBQIGARIDOhQd", 
            "CgwKBQQFAgYDEgM6LC0KIAoEBAUCBxIDOwQuIhPplJnor6/osIPnlKjmrKHm", 
            "lbAKCgwKBQQFAgcEEgM7BAwKDAoFBAUCBwUSAzsNEwoMCgUEBQIHARIDOxQe", 
            "CgwKBQQFAgcDEgM7LC0KGQoCBAYSBD4AQAEaDei/nOeoi+iwg+eUqAoKCgoD", 
            "BAYBEgM+CBIKIAoEBAYCABIDPwQwIhPlpJbpg6josIPnlKjor6bmg4UKCgwK", 
            "BQQGAgAEEgM/BAwKDAoFBAYCAAYSAz8NGwoMCgUEBgIAARIDPxwrCgwKBQQG", 
            "AgADEgM/Li8KIgoCBAcSBEQASQEaFuaFouWQjuerr+iwg+eUqOivt+axggoK", 
            "CgoDBAcBEgNECBYKHAoEBAcCABIDRQQyIg9hZ2VudCBpZGVudGl0eQoKDAoF", 
            "BAcCAAQSA0UEDAoMCgUEBwIABhIDRQ0aCgwKBQQHAgABEgNFGygKDAoFBAcC", 
            "AAMSA0UwMQoWCgQEBwIBEgNGBDIiCURC6LCD55SoCgoMCgUEBwIBBBIDRgQM", 
            "CgwKBQQHAgEGEgNGDRQKDAoFBAcCAQESA0YVHAoMCgUEBwIBAxIDRjAxChkK", 
            "BAQHAgISA0cEMiIMTm9TcWzosIPnlKgKCgwKBQQHAgIEEgNHBAwKDAoFBAcC", 
            "AgYSA0cNFgoMCgUEBwICARIDRxcgCgwKBQQHAgIDEgNHMDEKGgoEBAcCAxID", 
            "SAQyIg3lpJbpg6josIPnlKgKCgwKBQQHAgMEEgNIBAwKDAoFBAcCAwYSA0gN", 
          "FwoMCgUEBwIDARIDSBgiCgwKBQQHAgMDEgNIMDE="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_SqlCallItem__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_SqlCallItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SqlCallItem, global::BonreePB.SqlCallItem.Builder>(internal__static_BonreePB_SqlCallItem__Descriptor,
                new string[] { "Becd", "RequestCount", "SumRespTime", "MaxRespTime", "MinRespTime", "CurRespTime", "SlowCalls", "ErrorCalls", });
        internal__static_BonreePB_SqlCall__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_SqlCall__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SqlCall, global::BonreePB.SqlCall.Builder>(internal__static_BonreePB_SqlCall__Descriptor,
                new string[] { "SqlcallItems", });
        internal__static_BonreePB_NoSqlTopCall__Descriptor = Descriptor.MessageTypes[2];
        internal__static_BonreePB_NoSqlTopCall__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.NoSqlTopCall, global::BonreePB.NoSqlTopCall.Builder>(internal__static_BonreePB_NoSqlTopCall__Descriptor,
                new string[] { "TimeStamp", "RespTime", "Detail", "RequestGUID", });
        internal__static_BonreePB_NoSqlCallItem__Descriptor = Descriptor.MessageTypes[3];
        internal__static_BonreePB_NoSqlCallItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.NoSqlCallItem, global::BonreePB.NoSqlCallItem.Builder>(internal__static_BonreePB_NoSqlCallItem__Descriptor,
                new string[] { "Becd", "RequestCount", "SumRespTime", "MaxRespTime", "MinRespTime", "CurRespTime", "SlowCalls", "ErrorCalls", "Tops", });
        internal__static_BonreePB_NoSqlCall__Descriptor = Descriptor.MessageTypes[4];
        internal__static_BonreePB_NoSqlCall__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.NoSqlCall, global::BonreePB.NoSqlCall.Builder>(internal__static_BonreePB_NoSqlCall__Descriptor,
                new string[] { "NosqlCallItems", });
        internal__static_BonreePB_RemoteCallItem__Descriptor = Descriptor.MessageTypes[5];
        internal__static_BonreePB_RemoteCallItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.RemoteCallItem, global::BonreePB.RemoteCallItem.Builder>(internal__static_BonreePB_RemoteCallItem__Descriptor,
                new string[] { "Becd", "RequestCount", "SumRespTime", "MaxRespTime", "MinRespTime", "CurRespTime", "SlowCalls", "ErrorCalls", });
        internal__static_BonreePB_RemoteCall__Descriptor = Descriptor.MessageTypes[6];
        internal__static_BonreePB_RemoteCall__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.RemoteCall, global::BonreePB.RemoteCall.Builder>(internal__static_BonreePB_RemoteCall__Descriptor,
                new string[] { "RemoteCallItems", });
        internal__static_BonreePB_SlowBackendReq__Descriptor = Descriptor.MessageTypes[7];
        internal__static_BonreePB_SlowBackendReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SlowBackendReq, global::BonreePB.SlowBackendReq.Builder>(internal__static_BonreePB_SlowBackendReq__Descriptor,
                new string[] { "AgentIdentity", "SqlCall", "NosqlCall", "RemoteCall", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbAgent.RegisterAllExtensions(registry);
        global::BonreePB.PbBackend.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbAgent.Descriptor, 
          global::BonreePB.PbBackend.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SqlCallItem : pb::GeneratedMessage<SqlCallItem, SqlCallItem.Builder> {
    private SqlCallItem() { }
    private static readonly SqlCallItem defaultInstance = new SqlCallItem().MakeReadOnly();
    private static readonly string[] _sqlCallItemFieldNames = new string[] { "becd", "curRespTime", "errorCalls", "maxRespTime", "minRespTime", "requestCount", "slowCalls", "sumRespTime" };
    private static readonly uint[] _sqlCallItemFieldTags = new uint[] { 10, 48, 64, 32, 40, 16, 56, 24 };
    public static SqlCallItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SqlCallItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SqlCallItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_SqlCallItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SqlCallItem, SqlCallItem.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_SqlCallItem__FieldAccessorTable; }
    }
    
    public const int BecdFieldNumber = 1;
    private bool hasBecd;
    private global::BonreePB.BackendCallDetail becd_;
    public bool HasBecd {
      get { return hasBecd; }
    }
    public global::BonreePB.BackendCallDetail Becd {
      get { return becd_ ?? global::BonreePB.BackendCallDetail.DefaultInstance; }
    }
    
    public const int RequestCountFieldNumber = 2;
    private bool hasRequestCount;
    private uint requestCount_;
    public bool HasRequestCount {
      get { return hasRequestCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestCount {
      get { return requestCount_; }
    }
    
    public const int SumRespTimeFieldNumber = 3;
    private bool hasSumRespTime;
    private ulong sumRespTime_;
    public bool HasSumRespTime {
      get { return hasSumRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SumRespTime {
      get { return sumRespTime_; }
    }
    
    public const int MaxRespTimeFieldNumber = 4;
    private bool hasMaxRespTime;
    private uint maxRespTime_;
    public bool HasMaxRespTime {
      get { return hasMaxRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRespTime {
      get { return maxRespTime_; }
    }
    
    public const int MinRespTimeFieldNumber = 5;
    private bool hasMinRespTime;
    private uint minRespTime_;
    public bool HasMinRespTime {
      get { return hasMinRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinRespTime {
      get { return minRespTime_; }
    }
    
    public const int CurRespTimeFieldNumber = 6;
    private bool hasCurRespTime;
    private uint curRespTime_;
    public bool HasCurRespTime {
      get { return hasCurRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurRespTime {
      get { return curRespTime_; }
    }
    
    public const int SlowCallsFieldNumber = 7;
    private bool hasSlowCalls;
    private uint slowCalls_;
    public bool HasSlowCalls {
      get { return hasSlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlowCalls {
      get { return slowCalls_; }
    }
    
    public const int ErrorCallsFieldNumber = 8;
    private bool hasErrorCalls;
    private uint errorCalls_;
    public bool HasErrorCalls {
      get { return hasErrorCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCalls {
      get { return errorCalls_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _sqlCallItemFieldNames;
      if (hasBecd) {
        output.WriteMessage(1, field_names[0], Becd);
      }
      if (hasRequestCount) {
        output.WriteUInt32(2, field_names[5], RequestCount);
      }
      if (hasSumRespTime) {
        output.WriteUInt64(3, field_names[7], SumRespTime);
      }
      if (hasMaxRespTime) {
        output.WriteUInt32(4, field_names[3], MaxRespTime);
      }
      if (hasMinRespTime) {
        output.WriteUInt32(5, field_names[4], MinRespTime);
      }
      if (hasCurRespTime) {
        output.WriteUInt32(6, field_names[1], CurRespTime);
      }
      if (hasSlowCalls) {
        output.WriteUInt32(7, field_names[6], SlowCalls);
      }
      if (hasErrorCalls) {
        output.WriteUInt32(8, field_names[2], ErrorCalls);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBecd) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Becd);
      }
      if (hasRequestCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RequestCount);
      }
      if (hasSumRespTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SumRespTime);
      }
      if (hasMaxRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxRespTime);
      }
      if (hasMinRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MinRespTime);
      }
      if (hasCurRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, CurRespTime);
      }
      if (hasSlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SlowCalls);
      }
      if (hasErrorCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, ErrorCalls);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SqlCallItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SqlCallItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SqlCallItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SqlCallItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SqlCallItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SqlCallItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SqlCallItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SqlCallItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SqlCallItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SqlCallItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SqlCallItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SqlCallItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SqlCallItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SqlCallItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SqlCallItem result;
      
      private SqlCallItem PrepareBuilder() {
        if (resultIsReadOnly) {
          SqlCallItem original = result;
          result = new SqlCallItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SqlCallItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SqlCallItem.Descriptor; }
      }
      
      public override SqlCallItem DefaultInstanceForType {
        get { return global::BonreePB.SqlCallItem.DefaultInstance; }
      }
      
      public override SqlCallItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SqlCallItem) {
          return MergeFrom((SqlCallItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SqlCallItem other) {
        if (other == global::BonreePB.SqlCallItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBecd) {
          MergeBecd(other.Becd);
        }
        if (other.HasRequestCount) {
          RequestCount = other.RequestCount;
        }
        if (other.HasSumRespTime) {
          SumRespTime = other.SumRespTime;
        }
        if (other.HasMaxRespTime) {
          MaxRespTime = other.MaxRespTime;
        }
        if (other.HasMinRespTime) {
          MinRespTime = other.MinRespTime;
        }
        if (other.HasCurRespTime) {
          CurRespTime = other.CurRespTime;
        }
        if (other.HasSlowCalls) {
          SlowCalls = other.SlowCalls;
        }
        if (other.HasErrorCalls) {
          ErrorCalls = other.ErrorCalls;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sqlCallItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sqlCallItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.BackendCallDetail.Builder subBuilder = global::BonreePB.BackendCallDetail.CreateBuilder();
              if (result.hasBecd) {
                subBuilder.MergeFrom(Becd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Becd = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasRequestCount = input.ReadUInt32(ref result.requestCount_);
              break;
            }
            case 24: {
              result.hasSumRespTime = input.ReadUInt64(ref result.sumRespTime_);
              break;
            }
            case 32: {
              result.hasMaxRespTime = input.ReadUInt32(ref result.maxRespTime_);
              break;
            }
            case 40: {
              result.hasMinRespTime = input.ReadUInt32(ref result.minRespTime_);
              break;
            }
            case 48: {
              result.hasCurRespTime = input.ReadUInt32(ref result.curRespTime_);
              break;
            }
            case 56: {
              result.hasSlowCalls = input.ReadUInt32(ref result.slowCalls_);
              break;
            }
            case 64: {
              result.hasErrorCalls = input.ReadUInt32(ref result.errorCalls_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBecd {
       get { return result.hasBecd; }
      }
      public global::BonreePB.BackendCallDetail Becd {
        get { return result.Becd; }
        set { SetBecd(value); }
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = value;
        return this;
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBecd &&
            result.becd_ != global::BonreePB.BackendCallDetail.DefaultInstance) {
            result.becd_ = global::BonreePB.BackendCallDetail.CreateBuilder(result.becd_).MergeFrom(value).BuildPartial();
        } else {
          result.becd_ = value;
        }
        result.hasBecd = true;
        return this;
      }
      public Builder ClearBecd() {
        PrepareBuilder();
        result.hasBecd = false;
        result.becd_ = null;
        return this;
      }
      
      public bool HasRequestCount {
        get { return result.hasRequestCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint RequestCount {
        get { return result.RequestCount; }
        set { SetRequestCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRequestCount(uint value) {
        PrepareBuilder();
        result.hasRequestCount = true;
        result.requestCount_ = value;
        return this;
      }
      public Builder ClearRequestCount() {
        PrepareBuilder();
        result.hasRequestCount = false;
        result.requestCount_ = 0;
        return this;
      }
      
      public bool HasSumRespTime {
        get { return result.hasSumRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SumRespTime {
        get { return result.SumRespTime; }
        set { SetSumRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumRespTime(ulong value) {
        PrepareBuilder();
        result.hasSumRespTime = true;
        result.sumRespTime_ = value;
        return this;
      }
      public Builder ClearSumRespTime() {
        PrepareBuilder();
        result.hasSumRespTime = false;
        result.sumRespTime_ = 0UL;
        return this;
      }
      
      public bool HasMaxRespTime {
        get { return result.hasMaxRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRespTime {
        get { return result.MaxRespTime; }
        set { SetMaxRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRespTime(uint value) {
        PrepareBuilder();
        result.hasMaxRespTime = true;
        result.maxRespTime_ = value;
        return this;
      }
      public Builder ClearMaxRespTime() {
        PrepareBuilder();
        result.hasMaxRespTime = false;
        result.maxRespTime_ = 0;
        return this;
      }
      
      public bool HasMinRespTime {
        get { return result.hasMinRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinRespTime {
        get { return result.MinRespTime; }
        set { SetMinRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinRespTime(uint value) {
        PrepareBuilder();
        result.hasMinRespTime = true;
        result.minRespTime_ = value;
        return this;
      }
      public Builder ClearMinRespTime() {
        PrepareBuilder();
        result.hasMinRespTime = false;
        result.minRespTime_ = 0;
        return this;
      }
      
      public bool HasCurRespTime {
        get { return result.hasCurRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurRespTime {
        get { return result.CurRespTime; }
        set { SetCurRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurRespTime(uint value) {
        PrepareBuilder();
        result.hasCurRespTime = true;
        result.curRespTime_ = value;
        return this;
      }
      public Builder ClearCurRespTime() {
        PrepareBuilder();
        result.hasCurRespTime = false;
        result.curRespTime_ = 0;
        return this;
      }
      
      public bool HasSlowCalls {
        get { return result.hasSlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlowCalls {
        get { return result.SlowCalls; }
        set { SetSlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlowCalls(uint value) {
        PrepareBuilder();
        result.hasSlowCalls = true;
        result.slowCalls_ = value;
        return this;
      }
      public Builder ClearSlowCalls() {
        PrepareBuilder();
        result.hasSlowCalls = false;
        result.slowCalls_ = 0;
        return this;
      }
      
      public bool HasErrorCalls {
        get { return result.hasErrorCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCalls {
        get { return result.ErrorCalls; }
        set { SetErrorCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCalls(uint value) {
        PrepareBuilder();
        result.hasErrorCalls = true;
        result.errorCalls_ = value;
        return this;
      }
      public Builder ClearErrorCalls() {
        PrepareBuilder();
        result.hasErrorCalls = false;
        result.errorCalls_ = 0;
        return this;
      }
    }
    static SqlCallItem() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SqlCall : pb::GeneratedMessage<SqlCall, SqlCall.Builder> {
    private SqlCall() { }
    private static readonly SqlCall defaultInstance = new SqlCall().MakeReadOnly();
    private static readonly string[] _sqlCallFieldNames = new string[] { "sqlcallItems" };
    private static readonly uint[] _sqlCallFieldTags = new uint[] { 10 };
    public static SqlCall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SqlCall DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SqlCall ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_SqlCall__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SqlCall, SqlCall.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_SqlCall__FieldAccessorTable; }
    }
    
    public const int SqlcallItemsFieldNumber = 1;
    private pbc::PopsicleList<global::BonreePB.SqlCallItem> sqlcallItems_ = new pbc::PopsicleList<global::BonreePB.SqlCallItem>();
    public scg::IList<global::BonreePB.SqlCallItem> SqlcallItemsList {
      get { return sqlcallItems_; }
    }
    public int SqlcallItemsCount {
      get { return sqlcallItems_.Count; }
    }
    public global::BonreePB.SqlCallItem GetSqlcallItems(int index) {
      return sqlcallItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _sqlCallFieldNames;
      if (sqlcallItems_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], sqlcallItems_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::BonreePB.SqlCallItem element in SqlcallItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SqlCall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SqlCall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SqlCall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SqlCall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SqlCall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SqlCall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SqlCall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SqlCall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SqlCall ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SqlCall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SqlCall MakeReadOnly() {
      sqlcallItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SqlCall prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SqlCall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SqlCall cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SqlCall result;
      
      private SqlCall PrepareBuilder() {
        if (resultIsReadOnly) {
          SqlCall original = result;
          result = new SqlCall();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SqlCall MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SqlCall.Descriptor; }
      }
      
      public override SqlCall DefaultInstanceForType {
        get { return global::BonreePB.SqlCall.DefaultInstance; }
      }
      
      public override SqlCall BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SqlCall) {
          return MergeFrom((SqlCall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SqlCall other) {
        if (other == global::BonreePB.SqlCall.DefaultInstance) return this;
        PrepareBuilder();
        if (other.sqlcallItems_.Count != 0) {
          result.sqlcallItems_.Add(other.sqlcallItems_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sqlCallFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sqlCallFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.sqlcallItems_, global::BonreePB.SqlCallItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::BonreePB.SqlCallItem> SqlcallItemsList {
        get { return PrepareBuilder().sqlcallItems_; }
      }
      public int SqlcallItemsCount {
        get { return result.SqlcallItemsCount; }
      }
      public global::BonreePB.SqlCallItem GetSqlcallItems(int index) {
        return result.GetSqlcallItems(index);
      }
      public Builder SetSqlcallItems(int index, global::BonreePB.SqlCallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sqlcallItems_[index] = value;
        return this;
      }
      public Builder SetSqlcallItems(int index, global::BonreePB.SqlCallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sqlcallItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSqlcallItems(global::BonreePB.SqlCallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sqlcallItems_.Add(value);
        return this;
      }
      public Builder AddSqlcallItems(global::BonreePB.SqlCallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sqlcallItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSqlcallItems(scg::IEnumerable<global::BonreePB.SqlCallItem> values) {
        PrepareBuilder();
        result.sqlcallItems_.Add(values);
        return this;
      }
      public Builder ClearSqlcallItems() {
        PrepareBuilder();
        result.sqlcallItems_.Clear();
        return this;
      }
    }
    static SqlCall() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NoSqlTopCall : pb::GeneratedMessage<NoSqlTopCall, NoSqlTopCall.Builder> {
    private NoSqlTopCall() { }
    private static readonly NoSqlTopCall defaultInstance = new NoSqlTopCall().MakeReadOnly();
    private static readonly string[] _noSqlTopCallFieldNames = new string[] { "detail", "requestGUID", "respTime", "timeStamp" };
    private static readonly uint[] _noSqlTopCallFieldTags = new uint[] { 26, 34, 16, 8 };
    public static NoSqlTopCall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NoSqlTopCall DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoSqlTopCall ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_NoSqlTopCall__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NoSqlTopCall, NoSqlTopCall.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_NoSqlTopCall__FieldAccessorTable; }
    }
    
    public const int TimeStampFieldNumber = 1;
    private bool hasTimeStamp;
    private ulong timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int RespTimeFieldNumber = 2;
    private bool hasRespTime;
    private uint respTime_;
    public bool HasRespTime {
      get { return hasRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint RespTime {
      get { return respTime_; }
    }
    
    public const int DetailFieldNumber = 3;
    private bool hasDetail;
    private string detail_ = "";
    public bool HasDetail {
      get { return hasDetail; }
    }
    public string Detail {
      get { return detail_; }
    }
    
    public const int RequestGUIDFieldNumber = 4;
    private bool hasRequestGUID;
    private string requestGUID_ = "";
    public bool HasRequestGUID {
      get { return hasRequestGUID; }
    }
    public string RequestGUID {
      get { return requestGUID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _noSqlTopCallFieldNames;
      if (hasTimeStamp) {
        output.WriteUInt64(1, field_names[3], TimeStamp);
      }
      if (hasRespTime) {
        output.WriteUInt32(2, field_names[2], RespTime);
      }
      if (hasDetail) {
        output.WriteString(3, field_names[0], Detail);
      }
      if (hasRequestGUID) {
        output.WriteString(4, field_names[1], RequestGUID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, TimeStamp);
      }
      if (hasRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RespTime);
      }
      if (hasDetail) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Detail);
      }
      if (hasRequestGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(4, RequestGUID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NoSqlTopCall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoSqlTopCall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoSqlTopCall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoSqlTopCall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoSqlTopCall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoSqlTopCall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NoSqlTopCall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NoSqlTopCall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NoSqlTopCall ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoSqlTopCall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoSqlTopCall MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NoSqlTopCall prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NoSqlTopCall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoSqlTopCall cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoSqlTopCall result;
      
      private NoSqlTopCall PrepareBuilder() {
        if (resultIsReadOnly) {
          NoSqlTopCall original = result;
          result = new NoSqlTopCall();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoSqlTopCall MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.NoSqlTopCall.Descriptor; }
      }
      
      public override NoSqlTopCall DefaultInstanceForType {
        get { return global::BonreePB.NoSqlTopCall.DefaultInstance; }
      }
      
      public override NoSqlTopCall BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NoSqlTopCall) {
          return MergeFrom((NoSqlTopCall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoSqlTopCall other) {
        if (other == global::BonreePB.NoSqlTopCall.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasRespTime) {
          RespTime = other.RespTime;
        }
        if (other.HasDetail) {
          Detail = other.Detail;
        }
        if (other.HasRequestGUID) {
          RequestGUID = other.RequestGUID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noSqlTopCallFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noSqlTopCallFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimeStamp = input.ReadUInt64(ref result.timeStamp_);
              break;
            }
            case 16: {
              result.hasRespTime = input.ReadUInt32(ref result.respTime_);
              break;
            }
            case 26: {
              result.hasDetail = input.ReadString(ref result.detail_);
              break;
            }
            case 34: {
              result.hasRequestGUID = input.ReadString(ref result.requestGUID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0UL;
        return this;
      }
      
      public bool HasRespTime {
        get { return result.hasRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint RespTime {
        get { return result.RespTime; }
        set { SetRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRespTime(uint value) {
        PrepareBuilder();
        result.hasRespTime = true;
        result.respTime_ = value;
        return this;
      }
      public Builder ClearRespTime() {
        PrepareBuilder();
        result.hasRespTime = false;
        result.respTime_ = 0;
        return this;
      }
      
      public bool HasDetail {
        get { return result.hasDetail; }
      }
      public string Detail {
        get { return result.Detail; }
        set { SetDetail(value); }
      }
      public Builder SetDetail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDetail = true;
        result.detail_ = value;
        return this;
      }
      public Builder ClearDetail() {
        PrepareBuilder();
        result.hasDetail = false;
        result.detail_ = "";
        return this;
      }
      
      public bool HasRequestGUID {
        get { return result.hasRequestGUID; }
      }
      public string RequestGUID {
        get { return result.RequestGUID; }
        set { SetRequestGUID(value); }
      }
      public Builder SetRequestGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestGUID = true;
        result.requestGUID_ = value;
        return this;
      }
      public Builder ClearRequestGUID() {
        PrepareBuilder();
        result.hasRequestGUID = false;
        result.requestGUID_ = "";
        return this;
      }
    }
    static NoSqlTopCall() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NoSqlCallItem : pb::GeneratedMessage<NoSqlCallItem, NoSqlCallItem.Builder> {
    private NoSqlCallItem() { }
    private static readonly NoSqlCallItem defaultInstance = new NoSqlCallItem().MakeReadOnly();
    private static readonly string[] _noSqlCallItemFieldNames = new string[] { "becd", "curRespTime", "errorCalls", "maxRespTime", "minRespTime", "requestCount", "slowCalls", "sumRespTime", "tops" };
    private static readonly uint[] _noSqlCallItemFieldTags = new uint[] { 10, 48, 64, 32, 40, 16, 56, 24, 74 };
    public static NoSqlCallItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NoSqlCallItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoSqlCallItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_NoSqlCallItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NoSqlCallItem, NoSqlCallItem.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_NoSqlCallItem__FieldAccessorTable; }
    }
    
    public const int BecdFieldNumber = 1;
    private bool hasBecd;
    private global::BonreePB.BackendCallDetail becd_;
    public bool HasBecd {
      get { return hasBecd; }
    }
    public global::BonreePB.BackendCallDetail Becd {
      get { return becd_ ?? global::BonreePB.BackendCallDetail.DefaultInstance; }
    }
    
    public const int RequestCountFieldNumber = 2;
    private bool hasRequestCount;
    private uint requestCount_;
    public bool HasRequestCount {
      get { return hasRequestCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestCount {
      get { return requestCount_; }
    }
    
    public const int SumRespTimeFieldNumber = 3;
    private bool hasSumRespTime;
    private ulong sumRespTime_;
    public bool HasSumRespTime {
      get { return hasSumRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SumRespTime {
      get { return sumRespTime_; }
    }
    
    public const int MaxRespTimeFieldNumber = 4;
    private bool hasMaxRespTime;
    private uint maxRespTime_;
    public bool HasMaxRespTime {
      get { return hasMaxRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRespTime {
      get { return maxRespTime_; }
    }
    
    public const int MinRespTimeFieldNumber = 5;
    private bool hasMinRespTime;
    private uint minRespTime_;
    public bool HasMinRespTime {
      get { return hasMinRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinRespTime {
      get { return minRespTime_; }
    }
    
    public const int CurRespTimeFieldNumber = 6;
    private bool hasCurRespTime;
    private uint curRespTime_;
    public bool HasCurRespTime {
      get { return hasCurRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurRespTime {
      get { return curRespTime_; }
    }
    
    public const int SlowCallsFieldNumber = 7;
    private bool hasSlowCalls;
    private uint slowCalls_;
    public bool HasSlowCalls {
      get { return hasSlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlowCalls {
      get { return slowCalls_; }
    }
    
    public const int ErrorCallsFieldNumber = 8;
    private bool hasErrorCalls;
    private uint errorCalls_;
    public bool HasErrorCalls {
      get { return hasErrorCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCalls {
      get { return errorCalls_; }
    }
    
    public const int TopsFieldNumber = 9;
    private pbc::PopsicleList<global::BonreePB.NoSqlTopCall> tops_ = new pbc::PopsicleList<global::BonreePB.NoSqlTopCall>();
    public scg::IList<global::BonreePB.NoSqlTopCall> TopsList {
      get { return tops_; }
    }
    public int TopsCount {
      get { return tops_.Count; }
    }
    public global::BonreePB.NoSqlTopCall GetTops(int index) {
      return tops_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _noSqlCallItemFieldNames;
      if (hasBecd) {
        output.WriteMessage(1, field_names[0], Becd);
      }
      if (hasRequestCount) {
        output.WriteUInt32(2, field_names[5], RequestCount);
      }
      if (hasSumRespTime) {
        output.WriteUInt64(3, field_names[7], SumRespTime);
      }
      if (hasMaxRespTime) {
        output.WriteUInt32(4, field_names[3], MaxRespTime);
      }
      if (hasMinRespTime) {
        output.WriteUInt32(5, field_names[4], MinRespTime);
      }
      if (hasCurRespTime) {
        output.WriteUInt32(6, field_names[1], CurRespTime);
      }
      if (hasSlowCalls) {
        output.WriteUInt32(7, field_names[6], SlowCalls);
      }
      if (hasErrorCalls) {
        output.WriteUInt32(8, field_names[2], ErrorCalls);
      }
      if (tops_.Count > 0) {
        output.WriteMessageArray(9, field_names[8], tops_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBecd) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Becd);
      }
      if (hasRequestCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RequestCount);
      }
      if (hasSumRespTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SumRespTime);
      }
      if (hasMaxRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxRespTime);
      }
      if (hasMinRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MinRespTime);
      }
      if (hasCurRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, CurRespTime);
      }
      if (hasSlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SlowCalls);
      }
      if (hasErrorCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, ErrorCalls);
      }
      foreach (global::BonreePB.NoSqlTopCall element in TopsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NoSqlCallItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoSqlCallItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoSqlCallItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoSqlCallItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoSqlCallItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoSqlCallItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NoSqlCallItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NoSqlCallItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NoSqlCallItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoSqlCallItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoSqlCallItem MakeReadOnly() {
      tops_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NoSqlCallItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NoSqlCallItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoSqlCallItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoSqlCallItem result;
      
      private NoSqlCallItem PrepareBuilder() {
        if (resultIsReadOnly) {
          NoSqlCallItem original = result;
          result = new NoSqlCallItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoSqlCallItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.NoSqlCallItem.Descriptor; }
      }
      
      public override NoSqlCallItem DefaultInstanceForType {
        get { return global::BonreePB.NoSqlCallItem.DefaultInstance; }
      }
      
      public override NoSqlCallItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NoSqlCallItem) {
          return MergeFrom((NoSqlCallItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoSqlCallItem other) {
        if (other == global::BonreePB.NoSqlCallItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBecd) {
          MergeBecd(other.Becd);
        }
        if (other.HasRequestCount) {
          RequestCount = other.RequestCount;
        }
        if (other.HasSumRespTime) {
          SumRespTime = other.SumRespTime;
        }
        if (other.HasMaxRespTime) {
          MaxRespTime = other.MaxRespTime;
        }
        if (other.HasMinRespTime) {
          MinRespTime = other.MinRespTime;
        }
        if (other.HasCurRespTime) {
          CurRespTime = other.CurRespTime;
        }
        if (other.HasSlowCalls) {
          SlowCalls = other.SlowCalls;
        }
        if (other.HasErrorCalls) {
          ErrorCalls = other.ErrorCalls;
        }
        if (other.tops_.Count != 0) {
          result.tops_.Add(other.tops_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noSqlCallItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noSqlCallItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.BackendCallDetail.Builder subBuilder = global::BonreePB.BackendCallDetail.CreateBuilder();
              if (result.hasBecd) {
                subBuilder.MergeFrom(Becd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Becd = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasRequestCount = input.ReadUInt32(ref result.requestCount_);
              break;
            }
            case 24: {
              result.hasSumRespTime = input.ReadUInt64(ref result.sumRespTime_);
              break;
            }
            case 32: {
              result.hasMaxRespTime = input.ReadUInt32(ref result.maxRespTime_);
              break;
            }
            case 40: {
              result.hasMinRespTime = input.ReadUInt32(ref result.minRespTime_);
              break;
            }
            case 48: {
              result.hasCurRespTime = input.ReadUInt32(ref result.curRespTime_);
              break;
            }
            case 56: {
              result.hasSlowCalls = input.ReadUInt32(ref result.slowCalls_);
              break;
            }
            case 64: {
              result.hasErrorCalls = input.ReadUInt32(ref result.errorCalls_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.tops_, global::BonreePB.NoSqlTopCall.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBecd {
       get { return result.hasBecd; }
      }
      public global::BonreePB.BackendCallDetail Becd {
        get { return result.Becd; }
        set { SetBecd(value); }
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = value;
        return this;
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBecd &&
            result.becd_ != global::BonreePB.BackendCallDetail.DefaultInstance) {
            result.becd_ = global::BonreePB.BackendCallDetail.CreateBuilder(result.becd_).MergeFrom(value).BuildPartial();
        } else {
          result.becd_ = value;
        }
        result.hasBecd = true;
        return this;
      }
      public Builder ClearBecd() {
        PrepareBuilder();
        result.hasBecd = false;
        result.becd_ = null;
        return this;
      }
      
      public bool HasRequestCount {
        get { return result.hasRequestCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint RequestCount {
        get { return result.RequestCount; }
        set { SetRequestCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRequestCount(uint value) {
        PrepareBuilder();
        result.hasRequestCount = true;
        result.requestCount_ = value;
        return this;
      }
      public Builder ClearRequestCount() {
        PrepareBuilder();
        result.hasRequestCount = false;
        result.requestCount_ = 0;
        return this;
      }
      
      public bool HasSumRespTime {
        get { return result.hasSumRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SumRespTime {
        get { return result.SumRespTime; }
        set { SetSumRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumRespTime(ulong value) {
        PrepareBuilder();
        result.hasSumRespTime = true;
        result.sumRespTime_ = value;
        return this;
      }
      public Builder ClearSumRespTime() {
        PrepareBuilder();
        result.hasSumRespTime = false;
        result.sumRespTime_ = 0UL;
        return this;
      }
      
      public bool HasMaxRespTime {
        get { return result.hasMaxRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRespTime {
        get { return result.MaxRespTime; }
        set { SetMaxRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRespTime(uint value) {
        PrepareBuilder();
        result.hasMaxRespTime = true;
        result.maxRespTime_ = value;
        return this;
      }
      public Builder ClearMaxRespTime() {
        PrepareBuilder();
        result.hasMaxRespTime = false;
        result.maxRespTime_ = 0;
        return this;
      }
      
      public bool HasMinRespTime {
        get { return result.hasMinRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinRespTime {
        get { return result.MinRespTime; }
        set { SetMinRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinRespTime(uint value) {
        PrepareBuilder();
        result.hasMinRespTime = true;
        result.minRespTime_ = value;
        return this;
      }
      public Builder ClearMinRespTime() {
        PrepareBuilder();
        result.hasMinRespTime = false;
        result.minRespTime_ = 0;
        return this;
      }
      
      public bool HasCurRespTime {
        get { return result.hasCurRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurRespTime {
        get { return result.CurRespTime; }
        set { SetCurRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurRespTime(uint value) {
        PrepareBuilder();
        result.hasCurRespTime = true;
        result.curRespTime_ = value;
        return this;
      }
      public Builder ClearCurRespTime() {
        PrepareBuilder();
        result.hasCurRespTime = false;
        result.curRespTime_ = 0;
        return this;
      }
      
      public bool HasSlowCalls {
        get { return result.hasSlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlowCalls {
        get { return result.SlowCalls; }
        set { SetSlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlowCalls(uint value) {
        PrepareBuilder();
        result.hasSlowCalls = true;
        result.slowCalls_ = value;
        return this;
      }
      public Builder ClearSlowCalls() {
        PrepareBuilder();
        result.hasSlowCalls = false;
        result.slowCalls_ = 0;
        return this;
      }
      
      public bool HasErrorCalls {
        get { return result.hasErrorCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCalls {
        get { return result.ErrorCalls; }
        set { SetErrorCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCalls(uint value) {
        PrepareBuilder();
        result.hasErrorCalls = true;
        result.errorCalls_ = value;
        return this;
      }
      public Builder ClearErrorCalls() {
        PrepareBuilder();
        result.hasErrorCalls = false;
        result.errorCalls_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.NoSqlTopCall> TopsList {
        get { return PrepareBuilder().tops_; }
      }
      public int TopsCount {
        get { return result.TopsCount; }
      }
      public global::BonreePB.NoSqlTopCall GetTops(int index) {
        return result.GetTops(index);
      }
      public Builder SetTops(int index, global::BonreePB.NoSqlTopCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tops_[index] = value;
        return this;
      }
      public Builder SetTops(int index, global::BonreePB.NoSqlTopCall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tops_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTops(global::BonreePB.NoSqlTopCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tops_.Add(value);
        return this;
      }
      public Builder AddTops(global::BonreePB.NoSqlTopCall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tops_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTops(scg::IEnumerable<global::BonreePB.NoSqlTopCall> values) {
        PrepareBuilder();
        result.tops_.Add(values);
        return this;
      }
      public Builder ClearTops() {
        PrepareBuilder();
        result.tops_.Clear();
        return this;
      }
    }
    static NoSqlCallItem() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NoSqlCall : pb::GeneratedMessage<NoSqlCall, NoSqlCall.Builder> {
    private NoSqlCall() { }
    private static readonly NoSqlCall defaultInstance = new NoSqlCall().MakeReadOnly();
    private static readonly string[] _noSqlCallFieldNames = new string[] { "nosqlCallItems" };
    private static readonly uint[] _noSqlCallFieldTags = new uint[] { 10 };
    public static NoSqlCall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NoSqlCall DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoSqlCall ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_NoSqlCall__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NoSqlCall, NoSqlCall.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_NoSqlCall__FieldAccessorTable; }
    }
    
    public const int NosqlCallItemsFieldNumber = 1;
    private pbc::PopsicleList<global::BonreePB.NoSqlCallItem> nosqlCallItems_ = new pbc::PopsicleList<global::BonreePB.NoSqlCallItem>();
    public scg::IList<global::BonreePB.NoSqlCallItem> NosqlCallItemsList {
      get { return nosqlCallItems_; }
    }
    public int NosqlCallItemsCount {
      get { return nosqlCallItems_.Count; }
    }
    public global::BonreePB.NoSqlCallItem GetNosqlCallItems(int index) {
      return nosqlCallItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _noSqlCallFieldNames;
      if (nosqlCallItems_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], nosqlCallItems_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::BonreePB.NoSqlCallItem element in NosqlCallItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NoSqlCall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoSqlCall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoSqlCall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NoSqlCall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NoSqlCall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoSqlCall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NoSqlCall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NoSqlCall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NoSqlCall ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NoSqlCall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoSqlCall MakeReadOnly() {
      nosqlCallItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NoSqlCall prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NoSqlCall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoSqlCall cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoSqlCall result;
      
      private NoSqlCall PrepareBuilder() {
        if (resultIsReadOnly) {
          NoSqlCall original = result;
          result = new NoSqlCall();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoSqlCall MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.NoSqlCall.Descriptor; }
      }
      
      public override NoSqlCall DefaultInstanceForType {
        get { return global::BonreePB.NoSqlCall.DefaultInstance; }
      }
      
      public override NoSqlCall BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NoSqlCall) {
          return MergeFrom((NoSqlCall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoSqlCall other) {
        if (other == global::BonreePB.NoSqlCall.DefaultInstance) return this;
        PrepareBuilder();
        if (other.nosqlCallItems_.Count != 0) {
          result.nosqlCallItems_.Add(other.nosqlCallItems_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noSqlCallFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noSqlCallFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.nosqlCallItems_, global::BonreePB.NoSqlCallItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::BonreePB.NoSqlCallItem> NosqlCallItemsList {
        get { return PrepareBuilder().nosqlCallItems_; }
      }
      public int NosqlCallItemsCount {
        get { return result.NosqlCallItemsCount; }
      }
      public global::BonreePB.NoSqlCallItem GetNosqlCallItems(int index) {
        return result.GetNosqlCallItems(index);
      }
      public Builder SetNosqlCallItems(int index, global::BonreePB.NoSqlCallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nosqlCallItems_[index] = value;
        return this;
      }
      public Builder SetNosqlCallItems(int index, global::BonreePB.NoSqlCallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nosqlCallItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNosqlCallItems(global::BonreePB.NoSqlCallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nosqlCallItems_.Add(value);
        return this;
      }
      public Builder AddNosqlCallItems(global::BonreePB.NoSqlCallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nosqlCallItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNosqlCallItems(scg::IEnumerable<global::BonreePB.NoSqlCallItem> values) {
        PrepareBuilder();
        result.nosqlCallItems_.Add(values);
        return this;
      }
      public Builder ClearNosqlCallItems() {
        PrepareBuilder();
        result.nosqlCallItems_.Clear();
        return this;
      }
    }
    static NoSqlCall() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RemoteCallItem : pb::GeneratedMessage<RemoteCallItem, RemoteCallItem.Builder> {
    private RemoteCallItem() { }
    private static readonly RemoteCallItem defaultInstance = new RemoteCallItem().MakeReadOnly();
    private static readonly string[] _remoteCallItemFieldNames = new string[] { "becd", "curRespTime", "errorCalls", "maxRespTime", "minRespTime", "requestCount", "slowCalls", "sumRespTime" };
    private static readonly uint[] _remoteCallItemFieldTags = new uint[] { 10, 48, 64, 32, 40, 16, 56, 24 };
    public static RemoteCallItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RemoteCallItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RemoteCallItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_RemoteCallItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RemoteCallItem, RemoteCallItem.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_RemoteCallItem__FieldAccessorTable; }
    }
    
    public const int BecdFieldNumber = 1;
    private bool hasBecd;
    private global::BonreePB.BackendCallDetail becd_;
    public bool HasBecd {
      get { return hasBecd; }
    }
    public global::BonreePB.BackendCallDetail Becd {
      get { return becd_ ?? global::BonreePB.BackendCallDetail.DefaultInstance; }
    }
    
    public const int RequestCountFieldNumber = 2;
    private bool hasRequestCount;
    private uint requestCount_;
    public bool HasRequestCount {
      get { return hasRequestCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestCount {
      get { return requestCount_; }
    }
    
    public const int SumRespTimeFieldNumber = 3;
    private bool hasSumRespTime;
    private ulong sumRespTime_;
    public bool HasSumRespTime {
      get { return hasSumRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SumRespTime {
      get { return sumRespTime_; }
    }
    
    public const int MaxRespTimeFieldNumber = 4;
    private bool hasMaxRespTime;
    private uint maxRespTime_;
    public bool HasMaxRespTime {
      get { return hasMaxRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRespTime {
      get { return maxRespTime_; }
    }
    
    public const int MinRespTimeFieldNumber = 5;
    private bool hasMinRespTime;
    private uint minRespTime_;
    public bool HasMinRespTime {
      get { return hasMinRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinRespTime {
      get { return minRespTime_; }
    }
    
    public const int CurRespTimeFieldNumber = 6;
    private bool hasCurRespTime;
    private uint curRespTime_;
    public bool HasCurRespTime {
      get { return hasCurRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurRespTime {
      get { return curRespTime_; }
    }
    
    public const int SlowCallsFieldNumber = 7;
    private bool hasSlowCalls;
    private uint slowCalls_;
    public bool HasSlowCalls {
      get { return hasSlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlowCalls {
      get { return slowCalls_; }
    }
    
    public const int ErrorCallsFieldNumber = 8;
    private bool hasErrorCalls;
    private uint errorCalls_;
    public bool HasErrorCalls {
      get { return hasErrorCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCalls {
      get { return errorCalls_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _remoteCallItemFieldNames;
      if (hasBecd) {
        output.WriteMessage(1, field_names[0], Becd);
      }
      if (hasRequestCount) {
        output.WriteUInt32(2, field_names[5], RequestCount);
      }
      if (hasSumRespTime) {
        output.WriteUInt64(3, field_names[7], SumRespTime);
      }
      if (hasMaxRespTime) {
        output.WriteUInt32(4, field_names[3], MaxRespTime);
      }
      if (hasMinRespTime) {
        output.WriteUInt32(5, field_names[4], MinRespTime);
      }
      if (hasCurRespTime) {
        output.WriteUInt32(6, field_names[1], CurRespTime);
      }
      if (hasSlowCalls) {
        output.WriteUInt32(7, field_names[6], SlowCalls);
      }
      if (hasErrorCalls) {
        output.WriteUInt32(8, field_names[2], ErrorCalls);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBecd) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Becd);
      }
      if (hasRequestCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RequestCount);
      }
      if (hasSumRespTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SumRespTime);
      }
      if (hasMaxRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxRespTime);
      }
      if (hasMinRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MinRespTime);
      }
      if (hasCurRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, CurRespTime);
      }
      if (hasSlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SlowCalls);
      }
      if (hasErrorCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, ErrorCalls);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RemoteCallItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoteCallItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoteCallItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoteCallItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoteCallItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoteCallItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RemoteCallItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RemoteCallItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RemoteCallItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoteCallItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RemoteCallItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RemoteCallItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RemoteCallItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RemoteCallItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RemoteCallItem result;
      
      private RemoteCallItem PrepareBuilder() {
        if (resultIsReadOnly) {
          RemoteCallItem original = result;
          result = new RemoteCallItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RemoteCallItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.RemoteCallItem.Descriptor; }
      }
      
      public override RemoteCallItem DefaultInstanceForType {
        get { return global::BonreePB.RemoteCallItem.DefaultInstance; }
      }
      
      public override RemoteCallItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RemoteCallItem) {
          return MergeFrom((RemoteCallItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RemoteCallItem other) {
        if (other == global::BonreePB.RemoteCallItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBecd) {
          MergeBecd(other.Becd);
        }
        if (other.HasRequestCount) {
          RequestCount = other.RequestCount;
        }
        if (other.HasSumRespTime) {
          SumRespTime = other.SumRespTime;
        }
        if (other.HasMaxRespTime) {
          MaxRespTime = other.MaxRespTime;
        }
        if (other.HasMinRespTime) {
          MinRespTime = other.MinRespTime;
        }
        if (other.HasCurRespTime) {
          CurRespTime = other.CurRespTime;
        }
        if (other.HasSlowCalls) {
          SlowCalls = other.SlowCalls;
        }
        if (other.HasErrorCalls) {
          ErrorCalls = other.ErrorCalls;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_remoteCallItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _remoteCallItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.BackendCallDetail.Builder subBuilder = global::BonreePB.BackendCallDetail.CreateBuilder();
              if (result.hasBecd) {
                subBuilder.MergeFrom(Becd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Becd = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasRequestCount = input.ReadUInt32(ref result.requestCount_);
              break;
            }
            case 24: {
              result.hasSumRespTime = input.ReadUInt64(ref result.sumRespTime_);
              break;
            }
            case 32: {
              result.hasMaxRespTime = input.ReadUInt32(ref result.maxRespTime_);
              break;
            }
            case 40: {
              result.hasMinRespTime = input.ReadUInt32(ref result.minRespTime_);
              break;
            }
            case 48: {
              result.hasCurRespTime = input.ReadUInt32(ref result.curRespTime_);
              break;
            }
            case 56: {
              result.hasSlowCalls = input.ReadUInt32(ref result.slowCalls_);
              break;
            }
            case 64: {
              result.hasErrorCalls = input.ReadUInt32(ref result.errorCalls_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBecd {
       get { return result.hasBecd; }
      }
      public global::BonreePB.BackendCallDetail Becd {
        get { return result.Becd; }
        set { SetBecd(value); }
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = value;
        return this;
      }
      public Builder SetBecd(global::BonreePB.BackendCallDetail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBecd = true;
        result.becd_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBecd(global::BonreePB.BackendCallDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBecd &&
            result.becd_ != global::BonreePB.BackendCallDetail.DefaultInstance) {
            result.becd_ = global::BonreePB.BackendCallDetail.CreateBuilder(result.becd_).MergeFrom(value).BuildPartial();
        } else {
          result.becd_ = value;
        }
        result.hasBecd = true;
        return this;
      }
      public Builder ClearBecd() {
        PrepareBuilder();
        result.hasBecd = false;
        result.becd_ = null;
        return this;
      }
      
      public bool HasRequestCount {
        get { return result.hasRequestCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint RequestCount {
        get { return result.RequestCount; }
        set { SetRequestCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRequestCount(uint value) {
        PrepareBuilder();
        result.hasRequestCount = true;
        result.requestCount_ = value;
        return this;
      }
      public Builder ClearRequestCount() {
        PrepareBuilder();
        result.hasRequestCount = false;
        result.requestCount_ = 0;
        return this;
      }
      
      public bool HasSumRespTime {
        get { return result.hasSumRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SumRespTime {
        get { return result.SumRespTime; }
        set { SetSumRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumRespTime(ulong value) {
        PrepareBuilder();
        result.hasSumRespTime = true;
        result.sumRespTime_ = value;
        return this;
      }
      public Builder ClearSumRespTime() {
        PrepareBuilder();
        result.hasSumRespTime = false;
        result.sumRespTime_ = 0UL;
        return this;
      }
      
      public bool HasMaxRespTime {
        get { return result.hasMaxRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRespTime {
        get { return result.MaxRespTime; }
        set { SetMaxRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRespTime(uint value) {
        PrepareBuilder();
        result.hasMaxRespTime = true;
        result.maxRespTime_ = value;
        return this;
      }
      public Builder ClearMaxRespTime() {
        PrepareBuilder();
        result.hasMaxRespTime = false;
        result.maxRespTime_ = 0;
        return this;
      }
      
      public bool HasMinRespTime {
        get { return result.hasMinRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinRespTime {
        get { return result.MinRespTime; }
        set { SetMinRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinRespTime(uint value) {
        PrepareBuilder();
        result.hasMinRespTime = true;
        result.minRespTime_ = value;
        return this;
      }
      public Builder ClearMinRespTime() {
        PrepareBuilder();
        result.hasMinRespTime = false;
        result.minRespTime_ = 0;
        return this;
      }
      
      public bool HasCurRespTime {
        get { return result.hasCurRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurRespTime {
        get { return result.CurRespTime; }
        set { SetCurRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurRespTime(uint value) {
        PrepareBuilder();
        result.hasCurRespTime = true;
        result.curRespTime_ = value;
        return this;
      }
      public Builder ClearCurRespTime() {
        PrepareBuilder();
        result.hasCurRespTime = false;
        result.curRespTime_ = 0;
        return this;
      }
      
      public bool HasSlowCalls {
        get { return result.hasSlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlowCalls {
        get { return result.SlowCalls; }
        set { SetSlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlowCalls(uint value) {
        PrepareBuilder();
        result.hasSlowCalls = true;
        result.slowCalls_ = value;
        return this;
      }
      public Builder ClearSlowCalls() {
        PrepareBuilder();
        result.hasSlowCalls = false;
        result.slowCalls_ = 0;
        return this;
      }
      
      public bool HasErrorCalls {
        get { return result.hasErrorCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCalls {
        get { return result.ErrorCalls; }
        set { SetErrorCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCalls(uint value) {
        PrepareBuilder();
        result.hasErrorCalls = true;
        result.errorCalls_ = value;
        return this;
      }
      public Builder ClearErrorCalls() {
        PrepareBuilder();
        result.hasErrorCalls = false;
        result.errorCalls_ = 0;
        return this;
      }
    }
    static RemoteCallItem() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RemoteCall : pb::GeneratedMessage<RemoteCall, RemoteCall.Builder> {
    private RemoteCall() { }
    private static readonly RemoteCall defaultInstance = new RemoteCall().MakeReadOnly();
    private static readonly string[] _remoteCallFieldNames = new string[] { "remoteCallItems" };
    private static readonly uint[] _remoteCallFieldTags = new uint[] { 10 };
    public static RemoteCall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RemoteCall DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RemoteCall ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_RemoteCall__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RemoteCall, RemoteCall.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_RemoteCall__FieldAccessorTable; }
    }
    
    public const int RemoteCallItemsFieldNumber = 1;
    private pbc::PopsicleList<global::BonreePB.RemoteCallItem> remoteCallItems_ = new pbc::PopsicleList<global::BonreePB.RemoteCallItem>();
    public scg::IList<global::BonreePB.RemoteCallItem> RemoteCallItemsList {
      get { return remoteCallItems_; }
    }
    public int RemoteCallItemsCount {
      get { return remoteCallItems_.Count; }
    }
    public global::BonreePB.RemoteCallItem GetRemoteCallItems(int index) {
      return remoteCallItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _remoteCallFieldNames;
      if (remoteCallItems_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], remoteCallItems_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::BonreePB.RemoteCallItem element in RemoteCallItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RemoteCall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoteCall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoteCall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoteCall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoteCall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoteCall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RemoteCall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RemoteCall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RemoteCall ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoteCall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RemoteCall MakeReadOnly() {
      remoteCallItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RemoteCall prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RemoteCall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RemoteCall cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RemoteCall result;
      
      private RemoteCall PrepareBuilder() {
        if (resultIsReadOnly) {
          RemoteCall original = result;
          result = new RemoteCall();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RemoteCall MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.RemoteCall.Descriptor; }
      }
      
      public override RemoteCall DefaultInstanceForType {
        get { return global::BonreePB.RemoteCall.DefaultInstance; }
      }
      
      public override RemoteCall BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RemoteCall) {
          return MergeFrom((RemoteCall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RemoteCall other) {
        if (other == global::BonreePB.RemoteCall.DefaultInstance) return this;
        PrepareBuilder();
        if (other.remoteCallItems_.Count != 0) {
          result.remoteCallItems_.Add(other.remoteCallItems_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_remoteCallFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _remoteCallFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.remoteCallItems_, global::BonreePB.RemoteCallItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::BonreePB.RemoteCallItem> RemoteCallItemsList {
        get { return PrepareBuilder().remoteCallItems_; }
      }
      public int RemoteCallItemsCount {
        get { return result.RemoteCallItemsCount; }
      }
      public global::BonreePB.RemoteCallItem GetRemoteCallItems(int index) {
        return result.GetRemoteCallItems(index);
      }
      public Builder SetRemoteCallItems(int index, global::BonreePB.RemoteCallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.remoteCallItems_[index] = value;
        return this;
      }
      public Builder SetRemoteCallItems(int index, global::BonreePB.RemoteCallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.remoteCallItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRemoteCallItems(global::BonreePB.RemoteCallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.remoteCallItems_.Add(value);
        return this;
      }
      public Builder AddRemoteCallItems(global::BonreePB.RemoteCallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.remoteCallItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRemoteCallItems(scg::IEnumerable<global::BonreePB.RemoteCallItem> values) {
        PrepareBuilder();
        result.remoteCallItems_.Add(values);
        return this;
      }
      public Builder ClearRemoteCallItems() {
        PrepareBuilder();
        result.remoteCallItems_.Clear();
        return this;
      }
    }
    static RemoteCall() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SlowBackendReq : pb::GeneratedMessage<SlowBackendReq, SlowBackendReq.Builder> {
    private SlowBackendReq() { }
    private static readonly SlowBackendReq defaultInstance = new SlowBackendReq().MakeReadOnly();
    private static readonly string[] _slowBackendReqFieldNames = new string[] { "agentIdentity", "nosqlCall", "remoteCall", "sqlCall" };
    private static readonly uint[] _slowBackendReqFieldTags = new uint[] { 10, 26, 34, 18 };
    public static SlowBackendReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SlowBackendReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SlowBackendReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_SlowBackendReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SlowBackendReq, SlowBackendReq.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbSlowBackend.internal__static_BonreePB_SlowBackendReq__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::BonreePB.AgentIdentity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::BonreePB.AgentIdentity AgentIdentity {
      get { return agentIdentity_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int SqlCallFieldNumber = 2;
    private bool hasSqlCall;
    private global::BonreePB.SqlCall sqlCall_;
    public bool HasSqlCall {
      get { return hasSqlCall; }
    }
    public global::BonreePB.SqlCall SqlCall {
      get { return sqlCall_ ?? global::BonreePB.SqlCall.DefaultInstance; }
    }
    
    public const int NosqlCallFieldNumber = 3;
    private bool hasNosqlCall;
    private global::BonreePB.NoSqlCall nosqlCall_;
    public bool HasNosqlCall {
      get { return hasNosqlCall; }
    }
    public global::BonreePB.NoSqlCall NosqlCall {
      get { return nosqlCall_ ?? global::BonreePB.NoSqlCall.DefaultInstance; }
    }
    
    public const int RemoteCallFieldNumber = 4;
    private bool hasRemoteCall;
    private global::BonreePB.RemoteCall remoteCall_;
    public bool HasRemoteCall {
      get { return hasRemoteCall; }
    }
    public global::BonreePB.RemoteCall RemoteCall {
      get { return remoteCall_ ?? global::BonreePB.RemoteCall.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _slowBackendReqFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (hasSqlCall) {
        output.WriteMessage(2, field_names[3], SqlCall);
      }
      if (hasNosqlCall) {
        output.WriteMessage(3, field_names[1], NosqlCall);
      }
      if (hasRemoteCall) {
        output.WriteMessage(4, field_names[2], RemoteCall);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentIdentity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
      }
      if (hasSqlCall) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SqlCall);
      }
      if (hasNosqlCall) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, NosqlCall);
      }
      if (hasRemoteCall) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, RemoteCall);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SlowBackendReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SlowBackendReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SlowBackendReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SlowBackendReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SlowBackendReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SlowBackendReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SlowBackendReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SlowBackendReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SlowBackendReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SlowBackendReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SlowBackendReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SlowBackendReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SlowBackendReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SlowBackendReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SlowBackendReq result;
      
      private SlowBackendReq PrepareBuilder() {
        if (resultIsReadOnly) {
          SlowBackendReq original = result;
          result = new SlowBackendReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SlowBackendReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SlowBackendReq.Descriptor; }
      }
      
      public override SlowBackendReq DefaultInstanceForType {
        get { return global::BonreePB.SlowBackendReq.DefaultInstance; }
      }
      
      public override SlowBackendReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SlowBackendReq) {
          return MergeFrom((SlowBackendReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SlowBackendReq other) {
        if (other == global::BonreePB.SlowBackendReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.HasSqlCall) {
          MergeSqlCall(other.SqlCall);
        }
        if (other.HasNosqlCall) {
          MergeNosqlCall(other.NosqlCall);
        }
        if (other.HasRemoteCall) {
          MergeRemoteCall(other.RemoteCall);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_slowBackendReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _slowBackendReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::BonreePB.SqlCall.Builder subBuilder = global::BonreePB.SqlCall.CreateBuilder();
              if (result.hasSqlCall) {
                subBuilder.MergeFrom(SqlCall);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SqlCall = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::BonreePB.NoSqlCall.Builder subBuilder = global::BonreePB.NoSqlCall.CreateBuilder();
              if (result.hasNosqlCall) {
                subBuilder.MergeFrom(NosqlCall);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NosqlCall = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::BonreePB.RemoteCall.Builder subBuilder = global::BonreePB.RemoteCall.CreateBuilder();
              if (result.hasRemoteCall) {
                subBuilder.MergeFrom(RemoteCall);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RemoteCall = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::BonreePB.AgentIdentity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIdentity_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public bool HasSqlCall {
       get { return result.hasSqlCall; }
      }
      public global::BonreePB.SqlCall SqlCall {
        get { return result.SqlCall; }
        set { SetSqlCall(value); }
      }
      public Builder SetSqlCall(global::BonreePB.SqlCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSqlCall = true;
        result.sqlCall_ = value;
        return this;
      }
      public Builder SetSqlCall(global::BonreePB.SqlCall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSqlCall = true;
        result.sqlCall_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSqlCall(global::BonreePB.SqlCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSqlCall &&
            result.sqlCall_ != global::BonreePB.SqlCall.DefaultInstance) {
            result.sqlCall_ = global::BonreePB.SqlCall.CreateBuilder(result.sqlCall_).MergeFrom(value).BuildPartial();
        } else {
          result.sqlCall_ = value;
        }
        result.hasSqlCall = true;
        return this;
      }
      public Builder ClearSqlCall() {
        PrepareBuilder();
        result.hasSqlCall = false;
        result.sqlCall_ = null;
        return this;
      }
      
      public bool HasNosqlCall {
       get { return result.hasNosqlCall; }
      }
      public global::BonreePB.NoSqlCall NosqlCall {
        get { return result.NosqlCall; }
        set { SetNosqlCall(value); }
      }
      public Builder SetNosqlCall(global::BonreePB.NoSqlCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNosqlCall = true;
        result.nosqlCall_ = value;
        return this;
      }
      public Builder SetNosqlCall(global::BonreePB.NoSqlCall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNosqlCall = true;
        result.nosqlCall_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNosqlCall(global::BonreePB.NoSqlCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNosqlCall &&
            result.nosqlCall_ != global::BonreePB.NoSqlCall.DefaultInstance) {
            result.nosqlCall_ = global::BonreePB.NoSqlCall.CreateBuilder(result.nosqlCall_).MergeFrom(value).BuildPartial();
        } else {
          result.nosqlCall_ = value;
        }
        result.hasNosqlCall = true;
        return this;
      }
      public Builder ClearNosqlCall() {
        PrepareBuilder();
        result.hasNosqlCall = false;
        result.nosqlCall_ = null;
        return this;
      }
      
      public bool HasRemoteCall {
       get { return result.hasRemoteCall; }
      }
      public global::BonreePB.RemoteCall RemoteCall {
        get { return result.RemoteCall; }
        set { SetRemoteCall(value); }
      }
      public Builder SetRemoteCall(global::BonreePB.RemoteCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRemoteCall = true;
        result.remoteCall_ = value;
        return this;
      }
      public Builder SetRemoteCall(global::BonreePB.RemoteCall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRemoteCall = true;
        result.remoteCall_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRemoteCall(global::BonreePB.RemoteCall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRemoteCall &&
            result.remoteCall_ != global::BonreePB.RemoteCall.DefaultInstance) {
            result.remoteCall_ = global::BonreePB.RemoteCall.CreateBuilder(result.remoteCall_).MergeFrom(value).BuildPartial();
        } else {
          result.remoteCall_ = value;
        }
        result.hasRemoteCall = true;
        return this;
      }
      public Builder ClearRemoteCall() {
        PrepareBuilder();
        result.hasRemoteCall = false;
        result.remoteCall_ = null;
        return this;
      }
    }
    static SlowBackendReq() {
      object.ReferenceEquals(global::BonreePB.PbSlowBackend.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
