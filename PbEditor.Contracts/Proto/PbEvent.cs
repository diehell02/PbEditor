// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbEvent {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_Event__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.Event, global::BonreePB.Event.Builder> internal__static_BonreePB_Event__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_EventsReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.EventsReq, global::BonreePB.EventsReq.Builder> internal__static_BonreePB_EventsReq__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbEvent() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wYl9ldmVudC5wcm90bxIIQm9ucmVlUEIaDnBiX2FnZW50LnByb3RvGhxw", 
            "Yl9idXNpbmVzc1RyYW5zYWN0aW9uLnByb3RvIogBCgVFdmVudBIhCgR0eXBl", 
            "GAEgASgOMhMuQm9ucmVlUEIuRXZlbnRUeXBlEg4KBnN1bWFyeRgCIAEoCRIO", 
            "CgZkZXRhaWwYAyABKAkSEQoJdGltZXN0YW1wGAQgASgEEikKAmJ0GAUgASgL", 
            "Mh0uQm9ucmVlUEIuQnVzaW5lc3NUcmFuc2FjdGlvbiJcCglFdmVudHNSZXES", 
            "LgoNYWdlbnRJZGVudGl0eRgBIAEoCzIXLkJvbnJlZVBCLkFnZW50SWRlbnRp", 
            "dHkSHwoGZXZlbnRzGAIgAygLMg8uQm9ucmVlUEIuRXZlbnQqSAoJRXZlbnRU", 
            "eXBlEiAKHEVWRU5UX1RZUEVfQ09OVEFJTkVSX1JFU1RBUlQQARIZChVFVkVO", 
            "VF9UWVBFX0VOVl9NT0RJRlkQAkIZChdjb20uYm9ucmVlLnByb3RvYnVmLmFw", 
            "bUrWBwoGEgQAABcBCggKAQISAwAIEAoICgEIEgMBADAKCwoECOcHABIDAQAw", 
            "CgwKBQjnBwACEgMBBxMKDQoGCOcHAAIAEgMBBxMKDgoHCOcHAAIAARIDAQcT", 
            "CgwKBQjnBwAHEgMBFi8KCQoCAwASAwMHFwoJCgIDARIDBAclCh8KAgUAEgQH", 
            "AAoBGhNldmVudHPkuovku7bnsbvlnosKCgoKAwUAARIDBwUOChoKBAUAAgAS", 
            "AwgEKCIN5a655Zmo6YeN5ZCvCgoMCgUFAAIAARIDCAQgCgwKBQUAAgACEgMI", 
            "JicKMQoEBQACARIDCQQoIiTnjq/looPlj5jph4/jgIFWTeeOr+Wig+WPmOmH", 
            "j+WPmOabtAoKDAoFBQACAQESAwkEGQoMCgUFAAIBAhIDCSYnChkKAgQAEgQM", 
            "ABIBGg3kuovku7bmlbDmja4KCgoKAwQAARIDDAgNChoKBAQAAgASAw0ELiIN", 
            "5LqL5Lu257G75Z6LCgoMCgUEAAIABBIDDQQMCgwKBQQAAgAGEgMNDRYKDAoF", 
            "BAACAAESAw0XGwoMCgUEAAIAAxIDDSwtChoKBAQAAgESAw4ELiIN5LqL5Lu2", 
            "5qaC6KaBCgoMCgUEAAIBBBIDDgQMCgwKBQQAAgEFEgMODRMKDAoFBAACAQES", 
            "Aw4UGgoMCgUEAAIBAxIDDiwtChoKBAQAAgISAw8ELiIN5LqL5Lu26K+m5oOF", 
            "CgoMCgUEAAICBBIDDwQMCgwKBQQAAgIFEgMPDRMKDAoFBAACAgESAw8UGgoM", 
            "CgUEAAICAxIDDywtCiAKBAQAAgMSAxAELiIT5LqL5Lu25Y+R55Sf5pe26Ze0", 
            "CgoMCgUEAAIDBBIDEAQMCgwKBQQAAgMFEgMQDRMKDAoFBAACAwESAxAUHQoM", 
            "CgUEAAIDAxIDECwtChQKBAQAAgQSAxEELiIH5Lia5YqhCgoMCgUEAAIEBBID", 
            "EQQMCgwKBQQAAgQGEgMRDSAKDAoFBAACBAESAxEhIwoMCgUEAAIEAxIDESwt", 
            "CiUKAgQBEgQUABcBGhnkuovku7bmlbDmja7kuIrkvKDor7fmsYIKCgoKAwQB", 
            "ARIDFAgRChwKBAQBAgASAxUELSIPYWdlbnQgaWRlbnRpdHkKCgwKBQQBAgAE", 
            "EgMVBAwKDAoFBAECAAYSAxUNGgoMCgUEAQIAARIDFRsoCgwKBQQBAgADEgMV", 
            "KywKGgoEBAECARIDFgQtIg3kuovku7bmlbDmja4KCgwKBQQBAgEEEgMWBAwK", 
          "DAoFBAECAQYSAxYNEgoMCgUEAQIBARIDFhMZCgwKBQQBAgEDEgMWKyw="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_Event__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_Event__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.Event, global::BonreePB.Event.Builder>(internal__static_BonreePB_Event__Descriptor,
                new string[] { "Type", "Sumary", "Detail", "Timestamp", "Bt", });
        internal__static_BonreePB_EventsReq__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_EventsReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.EventsReq, global::BonreePB.EventsReq.Builder>(internal__static_BonreePB_EventsReq__Descriptor,
                new string[] { "AgentIdentity", "Events", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbAgent.RegisterAllExtensions(registry);
        global::BonreePB.PbBusinessTransaction.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbAgent.Descriptor, 
          global::BonreePB.PbBusinessTransaction.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum EventType {
    EVENT_TYPE_CONTAINER_RESTART = 1,
    EVENT_TYPE_ENV_MODIFY = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Event : pb::GeneratedMessage<Event, Event.Builder> {
    private Event() { }
    private static readonly Event defaultInstance = new Event().MakeReadOnly();
    private static readonly string[] _eventFieldNames = new string[] { "bt", "detail", "sumary", "timestamp", "type" };
    private static readonly uint[] _eventFieldTags = new uint[] { 42, 26, 18, 32, 8 };
    public static Event DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Event DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Event ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbEvent.internal__static_BonreePB_Event__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Event, Event.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbEvent.internal__static_BonreePB_Event__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::BonreePB.EventType type_ = global::BonreePB.EventType.EVENT_TYPE_CONTAINER_RESTART;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.EventType Type {
      get { return type_; }
    }
    
    public const int SumaryFieldNumber = 2;
    private bool hasSumary;
    private string sumary_ = "";
    public bool HasSumary {
      get { return hasSumary; }
    }
    public string Sumary {
      get { return sumary_; }
    }
    
    public const int DetailFieldNumber = 3;
    private bool hasDetail;
    private string detail_ = "";
    public bool HasDetail {
      get { return hasDetail; }
    }
    public string Detail {
      get { return detail_; }
    }
    
    public const int TimestampFieldNumber = 4;
    private bool hasTimestamp;
    private ulong timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Timestamp {
      get { return timestamp_; }
    }
    
    public const int BtFieldNumber = 5;
    private bool hasBt;
    private global::BonreePB.BusinessTransaction bt_;
    public bool HasBt {
      get { return hasBt; }
    }
    public global::BonreePB.BusinessTransaction Bt {
      get { return bt_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _eventFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[4], (int) Type, Type);
      }
      if (hasSumary) {
        output.WriteString(2, field_names[2], Sumary);
      }
      if (hasDetail) {
        output.WriteString(3, field_names[1], Detail);
      }
      if (hasTimestamp) {
        output.WriteUInt64(4, field_names[3], Timestamp);
      }
      if (hasBt) {
        output.WriteMessage(5, field_names[0], Bt);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasSumary) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Sumary);
      }
      if (hasDetail) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Detail);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, Timestamp);
      }
      if (hasBt) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Bt);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Event ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Event ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Event ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Event ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Event ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Event ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Event ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Event ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Event ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Event ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Event MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Event prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Event, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Event cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Event result;
      
      private Event PrepareBuilder() {
        if (resultIsReadOnly) {
          Event original = result;
          result = new Event();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Event MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.Event.Descriptor; }
      }
      
      public override Event DefaultInstanceForType {
        get { return global::BonreePB.Event.DefaultInstance; }
      }
      
      public override Event BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Event) {
          return MergeFrom((Event) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Event other) {
        if (other == global::BonreePB.Event.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasSumary) {
          Sumary = other.Sumary;
        }
        if (other.HasDetail) {
          Detail = other.Detail;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasBt) {
          MergeBt(other.Bt);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_eventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _eventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasSumary = input.ReadString(ref result.sumary_);
              break;
            }
            case 26: {
              result.hasDetail = input.ReadString(ref result.detail_);
              break;
            }
            case 32: {
              result.hasTimestamp = input.ReadUInt64(ref result.timestamp_);
              break;
            }
            case 42: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasBt) {
                subBuilder.MergeFrom(Bt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bt = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.EventType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.EventType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.EventType.EVENT_TYPE_CONTAINER_RESTART;
        return this;
      }
      
      public bool HasSumary {
        get { return result.hasSumary; }
      }
      public string Sumary {
        get { return result.Sumary; }
        set { SetSumary(value); }
      }
      public Builder SetSumary(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSumary = true;
        result.sumary_ = value;
        return this;
      }
      public Builder ClearSumary() {
        PrepareBuilder();
        result.hasSumary = false;
        result.sumary_ = "";
        return this;
      }
      
      public bool HasDetail {
        get { return result.hasDetail; }
      }
      public string Detail {
        get { return result.Detail; }
        set { SetDetail(value); }
      }
      public Builder SetDetail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDetail = true;
        result.detail_ = value;
        return this;
      }
      public Builder ClearDetail() {
        PrepareBuilder();
        result.hasDetail = false;
        result.detail_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(ulong value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0UL;
        return this;
      }
      
      public bool HasBt {
       get { return result.hasBt; }
      }
      public global::BonreePB.BusinessTransaction Bt {
        get { return result.Bt; }
        set { SetBt(value); }
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = value;
        return this;
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBt &&
            result.bt_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.bt_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.bt_).MergeFrom(value).BuildPartial();
        } else {
          result.bt_ = value;
        }
        result.hasBt = true;
        return this;
      }
      public Builder ClearBt() {
        PrepareBuilder();
        result.hasBt = false;
        result.bt_ = null;
        return this;
      }
    }
    static Event() {
      object.ReferenceEquals(global::BonreePB.PbEvent.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EventsReq : pb::GeneratedMessage<EventsReq, EventsReq.Builder> {
    private EventsReq() { }
    private static readonly EventsReq defaultInstance = new EventsReq().MakeReadOnly();
    private static readonly string[] _eventsReqFieldNames = new string[] { "agentIdentity", "events" };
    private static readonly uint[] _eventsReqFieldTags = new uint[] { 10, 18 };
    public static EventsReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EventsReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EventsReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbEvent.internal__static_BonreePB_EventsReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EventsReq, EventsReq.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbEvent.internal__static_BonreePB_EventsReq__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::BonreePB.AgentIdentity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::BonreePB.AgentIdentity AgentIdentity {
      get { return agentIdentity_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int EventsFieldNumber = 2;
    private pbc::PopsicleList<global::BonreePB.Event> events_ = new pbc::PopsicleList<global::BonreePB.Event>();
    public scg::IList<global::BonreePB.Event> EventsList {
      get { return events_; }
    }
    public int EventsCount {
      get { return events_.Count; }
    }
    public global::BonreePB.Event GetEvents(int index) {
      return events_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _eventsReqFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (events_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], events_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentIdentity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
      }
      foreach (global::BonreePB.Event element in EventsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EventsReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EventsReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EventsReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EventsReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EventsReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EventsReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EventsReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EventsReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EventsReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EventsReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EventsReq MakeReadOnly() {
      events_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EventsReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EventsReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EventsReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EventsReq result;
      
      private EventsReq PrepareBuilder() {
        if (resultIsReadOnly) {
          EventsReq original = result;
          result = new EventsReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EventsReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.EventsReq.Descriptor; }
      }
      
      public override EventsReq DefaultInstanceForType {
        get { return global::BonreePB.EventsReq.DefaultInstance; }
      }
      
      public override EventsReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EventsReq) {
          return MergeFrom((EventsReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EventsReq other) {
        if (other == global::BonreePB.EventsReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.events_.Count != 0) {
          result.events_.Add(other.events_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_eventsReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _eventsReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.events_, global::BonreePB.Event.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::BonreePB.AgentIdentity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIdentity_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.Event> EventsList {
        get { return PrepareBuilder().events_; }
      }
      public int EventsCount {
        get { return result.EventsCount; }
      }
      public global::BonreePB.Event GetEvents(int index) {
        return result.GetEvents(index);
      }
      public Builder SetEvents(int index, global::BonreePB.Event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.events_[index] = value;
        return this;
      }
      public Builder SetEvents(int index, global::BonreePB.Event.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.events_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEvents(global::BonreePB.Event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.events_.Add(value);
        return this;
      }
      public Builder AddEvents(global::BonreePB.Event.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.events_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEvents(scg::IEnumerable<global::BonreePB.Event> values) {
        PrepareBuilder();
        result.events_.Add(values);
        return this;
      }
      public Builder ClearEvents() {
        PrepareBuilder();
        result.events_.Clear();
        return this;
      }
    }
    static EventsReq() {
      object.ReferenceEquals(global::BonreePB.PbEvent.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
