// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbError {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_ErrorItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ErrorItem, global::BonreePB.ErrorItem.Builder> internal__static_BonreePB_ErrorItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_Error__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.Error, global::BonreePB.Error.Builder> internal__static_BonreePB_Error__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_ErrorsReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ErrorsReq, global::BonreePB.ErrorsReq.Builder> internal__static_BonreePB_ErrorsReq__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbError() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wYl9lcnJvci5wcm90bxIIQm9ucmVlUEIaDnBiX2FnZW50LnByb3RvGhxw", 
            "Yl9idXNpbmVzc1RyYW5zYWN0aW9uLnByb3RvIqkBCglFcnJvckl0ZW0SKQoC", 
            "YnQYASABKAsyHS5Cb25yZWVQQi5CdXNpbmVzc1RyYW5zYWN0aW9uEhEKCXRp", 
            "bWVTdGFtcBgCIAEoBBIRCgllcnJvclR5cGUYAyABKAkSEwoLZXJyb3JTdW1h", 
            "cnkYBCABKAkSFAoMZXJyb3JEZXRhaWxzGAUgASgJEgsKA3VybBgGIAEoCRIT", 
            "CgtyZXF1ZXN0R1VJRBgHIAEoCSK/AQoFRXJyb3ISGwoTZmlyc3RFcnJvclRp", 
            "bWVTdGFtcBgBIAEoBBIaChJsYXN0RXJyb3JUaW1lU3RhbXAYAiABKAQSEQoJ", 
            "ZXJyb3JOYW1lGAMgASgJEhQKDGVycm9yU3VtbWFyeRgEIAEoCRINCgVjb3Vu", 
            "dBgFIAEoDRIiCgVpdGVtcxgGIAMoCzITLkJvbnJlZVBCLkVycm9ySXRlbRIh", 
            "CgR0eXBlGAcgASgOMhMuQm9ucmVlUEIuRXJyb3JUeXBlIlwKCUVycm9yc1Jl", 
            "cRIuCg1hZ2VudElkZW50aXR5GAEgASgLMhcuQm9ucmVlUEIuQWdlbnRJZGVu", 
            "dGl0eRIfCgZlcnJvcnMYAiADKAsyDy5Cb25yZWVQQi5FcnJvcio6CglFcnJv", 
            "clR5cGUSEwoPRVJST1JfVFlQRV9IVFRQEAESGAoURVJST1JfVFlQRV9FWENF", 
            "UFRJT04QAkIZChdjb20uYm9ucmVlLnByb3RvYnVmLmFwbUqWDgoGEgQAACYB", 
            "CggKAQISAwAIEAoICgEIEgMBADAKCwoECOcHABIDAQAwCgwKBQjnBwACEgMB", 
            "BxMKDQoGCOcHAAIAEgMBBxMKDgoHCOcHAAIAARIDAQcTCgwKBQjnBwAHEgMB", 
            "Fi8KCQoCAwASAwMHFwoJCgIDARIDBAclCigKAgQAEgQHAA8BGhzlhbfkvZPm", 
            "n5DkuIDmrKHplJnor6/kv6Hmga8KCgoKAwQAARIDBwgRChQKBAQAAgASAwgE", 
            "KiIH5Lia5YqhCgoMCgUEAAIABBIDCAQMCgwKBQQAAgAGEgMIDSAKDAoFBAAC", 
            "AAESAwghIwoMCgUEAAIAAxIDCCgpCiAKBAQAAgESAwkEKiIT6ZSZ6K+v5Y+R", 
            "55Sf5pe26Ze0CgoMCgUEAAIBBBIDCQQMCgwKBQQAAgEFEgMJDRMKDAoFBAAC", 
            "AQESAwkUHQoMCgUEAAIBAxIDCSgpChoKBAQAAgISAwoEKiIN6ZSZ6K+v57G7", 
            "5Z6LCgoMCgUEAAICBBIDCgQMCgwKBQQAAgIFEgMKDRMKDAoFBAACAgESAwoU", 
            "HQoMCgUEAAICAxIDCigpChoKBAQAAgMSAwsEKiIN6ZSZ6K+v5qaC6KaBCgoM", 
            "CgUEAAIDBBIDCwQMCgwKBQQAAgMFEgMLDRMKDAoFBAACAwESAwsUHwoMCgUE", 
            "AAIDAxIDCygpChoKBAQAAgQSAwwEKiIN6ZSZ6K+v5o+P6L+wCgoMCgUEAAIE", 
            "BBIDDAQMCgwKBQQAAgQFEgMMDRMKDAoFBAACBAESAwwUIAoMCgUEAAIEAxID", 
            "DCgpCiYKBAQAAgUSAw0EKiIZ5Y+R55Sf6ZSZ6K+v55qEdXJs6K+35rGCCgoM", 
            "CgUEAAIFBBIDDQQMCgwKBQQAAgUFEgMNDRMKDAoFBAACBQESAw0UFwoMCgUE", 
            "AAIFAxIDDSgpCjMKBAQAAgYSAw4EKiIm5pyJ6K6w5b2V5b+r54Wn5pe277yM", 
            "6ZyA6KaB5aGr5YWFZ3VpZAoKDAoFBAACBgQSAw4EDAoMCgUEAAIGBRIDDg0T", 
            "CgwKBQQAAgYBEgMOFB8KDAoFBAACBgMSAw4oKQoZCgIFABIEEgAVARoN6ZSZ", 
            "6K+v57G75Z6LCgoKCgMFAAESAxIFDgoLCgQFAAIAEgMTAioKDAoFBQACAAES", 
            "AxMCEQoMCgUFAAIAAhIDEygpCgsKBAUAAgESAxQCKgoMCgUFAAIBARIDFAIW", 
            "CgwKBQUAAgECEgMUKCkKGQoCBAESBBgAIAEaDemUmeivr+S/oeaBrwoKCgoD", 
            "BAEBEgMYCA0KIAoEBAECABIDGQQyIhPpppbmrKHlj5HnlJ/ml7bpl7QKCgwK", 
            "BQQBAgAEEgMZBAwKDAoFBAECAAUSAxkNEwoMCgUEAQIAARIDGRQnCgwKBQQB", 
            "AgADEgMZMDEKIAoEBAECARIDGgQyIhPmnIDlkI7lj5HnlJ/ml7bpl7QKCgwK", 
            "BQQBAgEEEgMaBAwKDAoFBAECAQUSAxoNEwoMCgUEAQIBARIDGhQmCgwKBQQB", 
            "AgEDEgMaMDEKGwoEBAECAhIDGwQyIg7plJnor6/lkI3vvIwgCgoMCgUEAQIC", 
            "BBIDGwQMCgwKBQQBAgIFEgMbDRMKDAoFBAECAgESAxsUHQoMCgUEAQICAxID", 
            "GzAxChoKBAQBAgMSAxwEMiIN6ZSZ6K+v5qaC6KaBCgoMCgUEAQIDBBIDHAQM", 
            "CgwKBQQBAgMFEgMcDRMKDAoFBAECAwESAxwUIAoMCgUEAQIDAxIDHDAxChoK", 
            "BAQBAgQSAx0EMiIN6ZSZ6K+v5qyh5pWwCgoMCgUEAQIEBBIDHQQMCgwKBQQB", 
            "AgQFEgMdDRMKDAoFBAECBAESAx0UGQoMCgUEAQIEAxIDHTAxCkUKBAQBAgUS", 
            "Ax4EMiI46K+m57uG6ZSZ6K+v77yM5q+P56eN6ZSZ6K+v5qaC6KaB5pyA5aSa", 
            "6K6w5b2VNeasoemUmeivrwoKDAoFBAECBQQSAx4EDAoMCgUEAQIFBhIDHg0W", 
            "CgwKBQQBAgUBEgMeFxwKDAoFBAECBQMSAx4wMQoaCgQEAQIGEgMfBDIiDemU", 
            "meivr+exu+WeiwoKDAoFBAECBgQSAx8EDAoMCgUEAQIGBhIDHw0WCgwKBQQB", 
            "AgYBEgMfFxsKDAoFBAECBgMSAx8wMQofCgIEAhIEIwAmARoT5LiK5Lyg6ZSZ", 
            "6K+v6K+35rGCCgoKCgMEAgESAyMIEQocCgQEAgIAEgMkBC4iD2FnZW50IGlk", 
            "ZW50aXR5CgoMCgUEAgIABBIDJAQMCgwKBQQCAgAGEgMkDRoKDAoFBAICAAES", 
            "AyQbKAoMCgUEAgIAAxIDJCwtChQKBAQCAgESAyUELiIH6ZSZ6K+vCgoMCgUE", 
            "AgIBBBIDJQQMCgwKBQQCAgEGEgMlDRIKDAoFBAICAQESAyUTGQoMCgUEAgIB", 
          "AxIDJSwt"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_ErrorItem__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_ErrorItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ErrorItem, global::BonreePB.ErrorItem.Builder>(internal__static_BonreePB_ErrorItem__Descriptor,
                new string[] { "Bt", "TimeStamp", "ErrorType", "ErrorSumary", "ErrorDetails", "Url", "RequestGUID", });
        internal__static_BonreePB_Error__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_Error__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.Error, global::BonreePB.Error.Builder>(internal__static_BonreePB_Error__Descriptor,
                new string[] { "FirstErrorTimeStamp", "LastErrorTimeStamp", "ErrorName", "ErrorSummary", "Count", "Items", "Type", });
        internal__static_BonreePB_ErrorsReq__Descriptor = Descriptor.MessageTypes[2];
        internal__static_BonreePB_ErrorsReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ErrorsReq, global::BonreePB.ErrorsReq.Builder>(internal__static_BonreePB_ErrorsReq__Descriptor,
                new string[] { "AgentIdentity", "Errors", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbAgent.RegisterAllExtensions(registry);
        global::BonreePB.PbBusinessTransaction.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbAgent.Descriptor, 
          global::BonreePB.PbBusinessTransaction.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ErrorType {
    ERROR_TYPE_HTTP = 1,
    ERROR_TYPE_EXCEPTION = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorItem : pb::GeneratedMessage<ErrorItem, ErrorItem.Builder> {
    private ErrorItem() { }
    private static readonly ErrorItem defaultInstance = new ErrorItem().MakeReadOnly();
    private static readonly string[] _errorItemFieldNames = new string[] { "bt", "errorDetails", "errorSumary", "errorType", "requestGUID", "timeStamp", "url" };
    private static readonly uint[] _errorItemFieldTags = new uint[] { 10, 42, 34, 26, 58, 16, 50 };
    public static ErrorItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ErrorItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbError.internal__static_BonreePB_ErrorItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorItem, ErrorItem.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbError.internal__static_BonreePB_ErrorItem__FieldAccessorTable; }
    }
    
    public const int BtFieldNumber = 1;
    private bool hasBt;
    private global::BonreePB.BusinessTransaction bt_;
    public bool HasBt {
      get { return hasBt; }
    }
    public global::BonreePB.BusinessTransaction Bt {
      get { return bt_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public const int TimeStampFieldNumber = 2;
    private bool hasTimeStamp;
    private ulong timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int ErrorTypeFieldNumber = 3;
    private bool hasErrorType;
    private string errorType_ = "";
    public bool HasErrorType {
      get { return hasErrorType; }
    }
    public string ErrorType {
      get { return errorType_; }
    }
    
    public const int ErrorSumaryFieldNumber = 4;
    private bool hasErrorSumary;
    private string errorSumary_ = "";
    public bool HasErrorSumary {
      get { return hasErrorSumary; }
    }
    public string ErrorSumary {
      get { return errorSumary_; }
    }
    
    public const int ErrorDetailsFieldNumber = 5;
    private bool hasErrorDetails;
    private string errorDetails_ = "";
    public bool HasErrorDetails {
      get { return hasErrorDetails; }
    }
    public string ErrorDetails {
      get { return errorDetails_; }
    }
    
    public const int UrlFieldNumber = 6;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int RequestGUIDFieldNumber = 7;
    private bool hasRequestGUID;
    private string requestGUID_ = "";
    public bool HasRequestGUID {
      get { return hasRequestGUID; }
    }
    public string RequestGUID {
      get { return requestGUID_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorItemFieldNames;
      if (hasBt) {
        output.WriteMessage(1, field_names[0], Bt);
      }
      if (hasTimeStamp) {
        output.WriteUInt64(2, field_names[5], TimeStamp);
      }
      if (hasErrorType) {
        output.WriteString(3, field_names[3], ErrorType);
      }
      if (hasErrorSumary) {
        output.WriteString(4, field_names[2], ErrorSumary);
      }
      if (hasErrorDetails) {
        output.WriteString(5, field_names[1], ErrorDetails);
      }
      if (hasUrl) {
        output.WriteString(6, field_names[6], Url);
      }
      if (hasRequestGUID) {
        output.WriteString(7, field_names[4], RequestGUID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBt) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Bt);
      }
      if (hasTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TimeStamp);
      }
      if (hasErrorType) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ErrorType);
      }
      if (hasErrorSumary) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ErrorSumary);
      }
      if (hasErrorDetails) {
        size += pb::CodedOutputStream.ComputeStringSize(5, ErrorDetails);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Url);
      }
      if (hasRequestGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(7, RequestGUID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ErrorItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ErrorItem result;
      
      private ErrorItem PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorItem original = result;
          result = new ErrorItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ErrorItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ErrorItem.Descriptor; }
      }
      
      public override ErrorItem DefaultInstanceForType {
        get { return global::BonreePB.ErrorItem.DefaultInstance; }
      }
      
      public override ErrorItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorItem) {
          return MergeFrom((ErrorItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorItem other) {
        if (other == global::BonreePB.ErrorItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBt) {
          MergeBt(other.Bt);
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasErrorType) {
          ErrorType = other.ErrorType;
        }
        if (other.HasErrorSumary) {
          ErrorSumary = other.ErrorSumary;
        }
        if (other.HasErrorDetails) {
          ErrorDetails = other.ErrorDetails;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasRequestGUID) {
          RequestGUID = other.RequestGUID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasBt) {
                subBuilder.MergeFrom(Bt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bt = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasTimeStamp = input.ReadUInt64(ref result.timeStamp_);
              break;
            }
            case 26: {
              result.hasErrorType = input.ReadString(ref result.errorType_);
              break;
            }
            case 34: {
              result.hasErrorSumary = input.ReadString(ref result.errorSumary_);
              break;
            }
            case 42: {
              result.hasErrorDetails = input.ReadString(ref result.errorDetails_);
              break;
            }
            case 50: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 58: {
              result.hasRequestGUID = input.ReadString(ref result.requestGUID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBt {
       get { return result.hasBt; }
      }
      public global::BonreePB.BusinessTransaction Bt {
        get { return result.Bt; }
        set { SetBt(value); }
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = value;
        return this;
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBt &&
            result.bt_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.bt_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.bt_).MergeFrom(value).BuildPartial();
        } else {
          result.bt_ = value;
        }
        result.hasBt = true;
        return this;
      }
      public Builder ClearBt() {
        PrepareBuilder();
        result.hasBt = false;
        result.bt_ = null;
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0UL;
        return this;
      }
      
      public bool HasErrorType {
        get { return result.hasErrorType; }
      }
      public string ErrorType {
        get { return result.ErrorType; }
        set { SetErrorType(value); }
      }
      public Builder SetErrorType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorType = true;
        result.errorType_ = value;
        return this;
      }
      public Builder ClearErrorType() {
        PrepareBuilder();
        result.hasErrorType = false;
        result.errorType_ = "";
        return this;
      }
      
      public bool HasErrorSumary {
        get { return result.hasErrorSumary; }
      }
      public string ErrorSumary {
        get { return result.ErrorSumary; }
        set { SetErrorSumary(value); }
      }
      public Builder SetErrorSumary(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorSumary = true;
        result.errorSumary_ = value;
        return this;
      }
      public Builder ClearErrorSumary() {
        PrepareBuilder();
        result.hasErrorSumary = false;
        result.errorSumary_ = "";
        return this;
      }
      
      public bool HasErrorDetails {
        get { return result.hasErrorDetails; }
      }
      public string ErrorDetails {
        get { return result.ErrorDetails; }
        set { SetErrorDetails(value); }
      }
      public Builder SetErrorDetails(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorDetails = true;
        result.errorDetails_ = value;
        return this;
      }
      public Builder ClearErrorDetails() {
        PrepareBuilder();
        result.hasErrorDetails = false;
        result.errorDetails_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasRequestGUID {
        get { return result.hasRequestGUID; }
      }
      public string RequestGUID {
        get { return result.RequestGUID; }
        set { SetRequestGUID(value); }
      }
      public Builder SetRequestGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestGUID = true;
        result.requestGUID_ = value;
        return this;
      }
      public Builder ClearRequestGUID() {
        PrepareBuilder();
        result.hasRequestGUID = false;
        result.requestGUID_ = "";
        return this;
      }
    }
    static ErrorItem() {
      object.ReferenceEquals(global::BonreePB.PbError.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Error : pb::GeneratedMessage<Error, Error.Builder> {
    private Error() { }
    private static readonly Error defaultInstance = new Error().MakeReadOnly();
    private static readonly string[] _errorFieldNames = new string[] { "count", "errorName", "errorSummary", "firstErrorTimeStamp", "items", "lastErrorTimeStamp", "type" };
    private static readonly uint[] _errorFieldTags = new uint[] { 40, 26, 34, 8, 50, 16, 56 };
    public static Error DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Error DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Error ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbError.internal__static_BonreePB_Error__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Error, Error.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbError.internal__static_BonreePB_Error__FieldAccessorTable; }
    }
    
    public const int FirstErrorTimeStampFieldNumber = 1;
    private bool hasFirstErrorTimeStamp;
    private ulong firstErrorTimeStamp_;
    public bool HasFirstErrorTimeStamp {
      get { return hasFirstErrorTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong FirstErrorTimeStamp {
      get { return firstErrorTimeStamp_; }
    }
    
    public const int LastErrorTimeStampFieldNumber = 2;
    private bool hasLastErrorTimeStamp;
    private ulong lastErrorTimeStamp_;
    public bool HasLastErrorTimeStamp {
      get { return hasLastErrorTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong LastErrorTimeStamp {
      get { return lastErrorTimeStamp_; }
    }
    
    public const int ErrorNameFieldNumber = 3;
    private bool hasErrorName;
    private string errorName_ = "";
    public bool HasErrorName {
      get { return hasErrorName; }
    }
    public string ErrorName {
      get { return errorName_; }
    }
    
    public const int ErrorSummaryFieldNumber = 4;
    private bool hasErrorSummary;
    private string errorSummary_ = "";
    public bool HasErrorSummary {
      get { return hasErrorSummary; }
    }
    public string ErrorSummary {
      get { return errorSummary_; }
    }
    
    public const int CountFieldNumber = 5;
    private bool hasCount;
    private uint count_;
    public bool HasCount {
      get { return hasCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint Count {
      get { return count_; }
    }
    
    public const int ItemsFieldNumber = 6;
    private pbc::PopsicleList<global::BonreePB.ErrorItem> items_ = new pbc::PopsicleList<global::BonreePB.ErrorItem>();
    public scg::IList<global::BonreePB.ErrorItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::BonreePB.ErrorItem GetItems(int index) {
      return items_[index];
    }
    
    public const int TypeFieldNumber = 7;
    private bool hasType;
    private global::BonreePB.ErrorType type_ = global::BonreePB.ErrorType.ERROR_TYPE_HTTP;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.ErrorType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorFieldNames;
      if (hasFirstErrorTimeStamp) {
        output.WriteUInt64(1, field_names[3], FirstErrorTimeStamp);
      }
      if (hasLastErrorTimeStamp) {
        output.WriteUInt64(2, field_names[5], LastErrorTimeStamp);
      }
      if (hasErrorName) {
        output.WriteString(3, field_names[1], ErrorName);
      }
      if (hasErrorSummary) {
        output.WriteString(4, field_names[2], ErrorSummary);
      }
      if (hasCount) {
        output.WriteUInt32(5, field_names[0], Count);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(6, field_names[4], items_);
      }
      if (hasType) {
        output.WriteEnum(7, field_names[6], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFirstErrorTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, FirstErrorTimeStamp);
      }
      if (hasLastErrorTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, LastErrorTimeStamp);
      }
      if (hasErrorName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ErrorName);
      }
      if (hasErrorSummary) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ErrorSummary);
      }
      if (hasCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Count);
      }
      foreach (global::BonreePB.ErrorItem element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(7, (int) Type);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Error ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Error ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Error ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Error ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Error ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Error ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Error ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Error ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Error ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Error ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Error MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Error prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Error, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Error cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Error result;
      
      private Error PrepareBuilder() {
        if (resultIsReadOnly) {
          Error original = result;
          result = new Error();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Error MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.Error.Descriptor; }
      }
      
      public override Error DefaultInstanceForType {
        get { return global::BonreePB.Error.DefaultInstance; }
      }
      
      public override Error BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Error) {
          return MergeFrom((Error) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Error other) {
        if (other == global::BonreePB.Error.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFirstErrorTimeStamp) {
          FirstErrorTimeStamp = other.FirstErrorTimeStamp;
        }
        if (other.HasLastErrorTimeStamp) {
          LastErrorTimeStamp = other.LastErrorTimeStamp;
        }
        if (other.HasErrorName) {
          ErrorName = other.ErrorName;
        }
        if (other.HasErrorSummary) {
          ErrorSummary = other.ErrorSummary;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFirstErrorTimeStamp = input.ReadUInt64(ref result.firstErrorTimeStamp_);
              break;
            }
            case 16: {
              result.hasLastErrorTimeStamp = input.ReadUInt64(ref result.lastErrorTimeStamp_);
              break;
            }
            case 26: {
              result.hasErrorName = input.ReadString(ref result.errorName_);
              break;
            }
            case 34: {
              result.hasErrorSummary = input.ReadString(ref result.errorSummary_);
              break;
            }
            case 40: {
              result.hasCount = input.ReadUInt32(ref result.count_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.items_, global::BonreePB.ErrorItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFirstErrorTimeStamp {
        get { return result.hasFirstErrorTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong FirstErrorTimeStamp {
        get { return result.FirstErrorTimeStamp; }
        set { SetFirstErrorTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFirstErrorTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasFirstErrorTimeStamp = true;
        result.firstErrorTimeStamp_ = value;
        return this;
      }
      public Builder ClearFirstErrorTimeStamp() {
        PrepareBuilder();
        result.hasFirstErrorTimeStamp = false;
        result.firstErrorTimeStamp_ = 0UL;
        return this;
      }
      
      public bool HasLastErrorTimeStamp {
        get { return result.hasLastErrorTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong LastErrorTimeStamp {
        get { return result.LastErrorTimeStamp; }
        set { SetLastErrorTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLastErrorTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasLastErrorTimeStamp = true;
        result.lastErrorTimeStamp_ = value;
        return this;
      }
      public Builder ClearLastErrorTimeStamp() {
        PrepareBuilder();
        result.hasLastErrorTimeStamp = false;
        result.lastErrorTimeStamp_ = 0UL;
        return this;
      }
      
      public bool HasErrorName {
        get { return result.hasErrorName; }
      }
      public string ErrorName {
        get { return result.ErrorName; }
        set { SetErrorName(value); }
      }
      public Builder SetErrorName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorName = true;
        result.errorName_ = value;
        return this;
      }
      public Builder ClearErrorName() {
        PrepareBuilder();
        result.hasErrorName = false;
        result.errorName_ = "";
        return this;
      }
      
      public bool HasErrorSummary {
        get { return result.hasErrorSummary; }
      }
      public string ErrorSummary {
        get { return result.ErrorSummary; }
        set { SetErrorSummary(value); }
      }
      public Builder SetErrorSummary(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorSummary = true;
        result.errorSummary_ = value;
        return this;
      }
      public Builder ClearErrorSummary() {
        PrepareBuilder();
        result.hasErrorSummary = false;
        result.errorSummary_ = "";
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCount(uint value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.ErrorItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::BonreePB.ErrorItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::BonreePB.ErrorItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::BonreePB.ErrorItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::BonreePB.ErrorItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::BonreePB.ErrorItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::BonreePB.ErrorItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.ErrorType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.ErrorType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.ErrorType.ERROR_TYPE_HTTP;
        return this;
      }
    }
    static Error() {
      object.ReferenceEquals(global::BonreePB.PbError.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorsReq : pb::GeneratedMessage<ErrorsReq, ErrorsReq.Builder> {
    private ErrorsReq() { }
    private static readonly ErrorsReq defaultInstance = new ErrorsReq().MakeReadOnly();
    private static readonly string[] _errorsReqFieldNames = new string[] { "agentIdentity", "errors" };
    private static readonly uint[] _errorsReqFieldTags = new uint[] { 10, 18 };
    public static ErrorsReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorsReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ErrorsReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbError.internal__static_BonreePB_ErrorsReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorsReq, ErrorsReq.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbError.internal__static_BonreePB_ErrorsReq__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::BonreePB.AgentIdentity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::BonreePB.AgentIdentity AgentIdentity {
      get { return agentIdentity_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int ErrorsFieldNumber = 2;
    private pbc::PopsicleList<global::BonreePB.Error> errors_ = new pbc::PopsicleList<global::BonreePB.Error>();
    public scg::IList<global::BonreePB.Error> ErrorsList {
      get { return errors_; }
    }
    public int ErrorsCount {
      get { return errors_.Count; }
    }
    public global::BonreePB.Error GetErrors(int index) {
      return errors_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorsReqFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (errors_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], errors_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentIdentity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
      }
      foreach (global::BonreePB.Error element in ErrorsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ErrorsReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorsReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorsReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorsReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorsReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorsReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorsReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorsReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorsReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorsReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorsReq MakeReadOnly() {
      errors_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorsReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorsReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorsReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ErrorsReq result;
      
      private ErrorsReq PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorsReq original = result;
          result = new ErrorsReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ErrorsReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ErrorsReq.Descriptor; }
      }
      
      public override ErrorsReq DefaultInstanceForType {
        get { return global::BonreePB.ErrorsReq.DefaultInstance; }
      }
      
      public override ErrorsReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorsReq) {
          return MergeFrom((ErrorsReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorsReq other) {
        if (other == global::BonreePB.ErrorsReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.errors_.Count != 0) {
          result.errors_.Add(other.errors_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorsReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorsReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.errors_, global::BonreePB.Error.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::BonreePB.AgentIdentity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIdentity_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.Error> ErrorsList {
        get { return PrepareBuilder().errors_; }
      }
      public int ErrorsCount {
        get { return result.ErrorsCount; }
      }
      public global::BonreePB.Error GetErrors(int index) {
        return result.GetErrors(index);
      }
      public Builder SetErrors(int index, global::BonreePB.Error value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.errors_[index] = value;
        return this;
      }
      public Builder SetErrors(int index, global::BonreePB.Error.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.errors_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddErrors(global::BonreePB.Error value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.errors_.Add(value);
        return this;
      }
      public Builder AddErrors(global::BonreePB.Error.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.errors_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeErrors(scg::IEnumerable<global::BonreePB.Error> values) {
        PrepareBuilder();
        result.errors_.Add(values);
        return this;
      }
      public Builder ClearErrors() {
        PrepareBuilder();
        result.errors_.Clear();
        return this;
      }
    }
    static ErrorsReq() {
      object.ReferenceEquals(global::BonreePB.PbError.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
