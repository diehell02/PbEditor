// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbConfig {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_ListenIPAndPort__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ListenIPAndPort, global::BonreePB.ListenIPAndPort.Builder> internal__static_BonreePB_ListenIPAndPort__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_ContainerInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ContainerInfo, global::BonreePB.ContainerInfo.Builder> internal__static_BonreePB_ContainerInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_NodeInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.NodeInfo, global::BonreePB.NodeInfo.Builder> internal__static_BonreePB_NodeInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_IgnoreException__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.IgnoreException, global::BonreePB.IgnoreException.Builder> internal__static_BonreePB_IgnoreException__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_IgnoreErrorMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.IgnoreErrorMessage, global::BonreePB.IgnoreErrorMessage.Builder> internal__static_BonreePB_IgnoreErrorMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_ErrorConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ErrorConfig, global::BonreePB.ErrorConfig.Builder> internal__static_BonreePB_ErrorConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_CallGraphConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.CallGraphConfig, global::BonreePB.CallGraphConfig.Builder> internal__static_BonreePB_CallGraphConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_BusinessTrasactionNamingConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.BusinessTrasactionNamingConfig, global::BonreePB.BusinessTrasactionNamingConfig.Builder> internal__static_BonreePB_BusinessTrasactionNamingConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_AppConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.AppConfig, global::BonreePB.AppConfig.Builder> internal__static_BonreePB_AppConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_AppGathererConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.AppGathererConfig, global::BonreePB.AppGathererConfig.Builder> internal__static_BonreePB_AppGathererConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_MethodInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.MethodInfo, global::BonreePB.MethodInfo.Builder> internal__static_BonreePB_MethodInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SnapshotGathererConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotGathererConfig, global::BonreePB.SnapshotGathererConfig.Builder> internal__static_BonreePB_SnapshotGathererConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_BTConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.BTConfig, global::BonreePB.BTConfig.Builder> internal__static_BonreePB_BTConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_SocketConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.SocketConfig, global::BonreePB.SocketConfig.Builder> internal__static_BonreePB_SocketConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_ThreadDumpTask__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadDumpTask, global::BonreePB.ThreadDumpTask.Builder> internal__static_BonreePB_ThreadDumpTask__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_CustomBTRule__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.CustomBTRule, global::BonreePB.CustomBTRule.Builder> internal__static_BonreePB_CustomBTRule__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_CustomBTRules__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.CustomBTRules, global::BonreePB.CustomBTRules.Builder> internal__static_BonreePB_CustomBTRules__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_InjectJSConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.InjectJSConfig, global::BonreePB.InjectJSConfig.Builder> internal__static_BonreePB_InjectJSConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_configReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.configReq, global::BonreePB.configReq.Builder> internal__static_BonreePB_configReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_configResp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.configResp, global::BonreePB.configResp.Builder> internal__static_BonreePB_configResp__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbConfig() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wYl9jb25maWcucHJvdG8SCEJvbnJlZVBCGg5wYl9hZ2VudC5wcm90bxoc", 
            "cGJfYnVzaW5lc3NUcmFuc2FjdGlvbi5wcm90byIrCg9MaXN0ZW5JUEFuZFBv", 
            "cnQSCgoCaXAYASABKAkSDAoEcG9ydBgCIAEoDSL0AgoNQ29udGFpbmVySW5m", 
            "bxIPCgdhcHBOYW1lGAEgASgJEhMKC2NsdXN0ZXJOYW1lGAIgASgJEhAKCHRp", 
            "ZXJOYW1lGAMgASgJEhEKCWFnZW50TmFtZRgEIAEoCRIRCglhZ2VudEdVSUQY", 
            "BSABKAkSFAoMYWdlbnRWZXJzaW9uGAYgASgJEh0KFWFnZW50SW5zdGFsbFRp", 
            "bWVzdGFtcBgHIAEoBBIXCg9hZ2VudEluc3RhbGxEaXIYCCABKAkSEQoJcHJv", 
            "Y2Vzc0lkGAkgASgNEioKB2xpc3RlbnMYCiADKAsyGS5Cb25yZWVQQi5MaXN0", 
            "ZW5JUEFuZFBvcnQSGAoQY29udGFpbmVyVmVyc2lvbhgLIAEoCRIbChNjb250", 
            "YWluZXJJbnN0YWxsRGlyGAwgASgJEg4KBlZNSW5mbxgNIAEoCRIYChBWTVN0", 
            "YXJ0dXBPcHRpb25zGA4gASgJEhcKD1ZNU3lzdGVtT3B0aW9ucxgPIAEoCSJ9", 
            "CghOb2RlSW5mbxIQCghub2RlR1VJRBgBIAEoCRIQCghub2RlTmFtZRgCIAEo", 
            "CRISCgp1bmlxdWVIb3N0GAMgASgJEg4KBk9TSW5mbxgEIAEoCRIcChRlbnZp", 
            "cm9ubWVudFZhcmlhYmxlcxgFIAEoCRILCgNpcHMYBiADKAkiKAoPSWdub3Jl", 
            "RXhjZXB0aW9uEhUKDWZ1bGxDbGFzc05hbWUYASABKAkiJgoSSWdub3JlRXJy", 
            "b3JNZXNzYWdlEhAKCG1hdGNoTXNnGAEgASgJIrgDCgtFcnJvckNvbmZpZxIj", 
            "ChtqYXZhRW5hYmxlRGV0ZWN0SmF2YUxvZ2dpbmcYASABKAgSHQoVamF2YUVu", 
            "YWJsZURldGVjdExvZzRqGAIgASgIEh0KFWphdmFFbmFibGVEZXRlY3RTTEY0", 
            "ahgDIAEoCBIiChplbmFibGVEZWZhdWx0SFRUUEVycm9yQ29kZRgEIAEoCBId", 
            "ChVkb25ldEVuYWJsZURldGVjdE5Mb2cYBSABKAgSIAoYZG9uZXRFbmFibGVE", 
            "ZXRlY3RMb2c0TmV0GAYgASgIEiQKHGRvbmV0RW5hYmxlRGV0ZWN0U3lzdGVt", 
            "VHJhY2UYByABKAgSIQoZZG9uZXRFbmFibGVEZXRlY3RFdmVudExvZxgIIAEo", 
            "CBIvCidtYXJrVHJhbnNhY3Rpb25Bc0Vycm9yT25FcnJvck1lc3NhZ2VMb2cY", 
            "CSABKAgSMwoQaWdub3JlRXhjZXB0aW9ucxgKIAMoCzIZLkJvbnJlZVBCLkln", 
            "bm9yZUV4Y2VwdGlvbhIyCgxpZ25vcmVFcnJNc2cYCyADKAsyHC5Cb25yZWVQ", 
            "Qi5JZ25vcmVFcnJvck1lc3NhZ2UibQoPQ2FsbEdyYXBoQ29uZmlnEhUKDW1p", 
            "bk1ldGhvZFRpbWUYASABKA0SFwoPbWluU1FMUXVlcnlUaW1lGAIgASgNEhQK", 
            "DGV4Y2x1ZGVOYW1lcxgDIAMoCRIUCgxpbmNsdWRlTmFtZXMYBCADKAkiZAoe", 
            "QnVzaW5lc3NUcmFzYWN0aW9uTmFtaW5nQ29uZmlnEh4KBHR5cGUYASABKA4y", 
            "EC5Cb25yZWVQQi5CVFR5cGUSDgoGZW5hYmxlGAIgASgIEhIKCnByb3BlcnRp", 
            "ZXMYAyABKAki3AQKCUFwcENvbmZpZxI3Cg9pbnN0cnVtZW50TGV2ZWwYASAB", 
            "KA4yHi5Cb25yZWVQQi5JbnN0cnVtZW50YXRpb25MZXZlbBITCgtidFRocmVz", 
            "aG9sZBgCIAEoDRIcChRidFRocmVzaG9sZFNsb3dUaW1lcxgDIAEoDRIgChhi", 
            "dFRocmVzaG9sZFZlcnlTbG93VGltZXMYBCABKA0SGwoTc3FsRXhlVGltZVRo", 
            "cmVzaG9sZBgFIAEoDRIuCg1zcWxSZWNvcmRUeXBlGAYgASgOMhcuQm9ucmVl", 
            "UEIuU1FMUmVjb3JkVHlwZRIdChVub3NxbEV4ZVRpbWVUaHJlc2hvbGQYByAB", 
            "KA0SIgoacmVtb3RlQ2FsbEV4ZVRpbWVUaHJlc2hvbGQYCCABKA0SOAoTYnRH", 
            "ZXRVUklTZWdtZW50VHlwZRgJIAEoDjIbLkJvbnJlZVBCLkdldFVSSVNlZ21l", 
            "bnRUeXBlEhUKDWJ0VVJJU2VnbWVudHMYCiABKA0SQAobcmVtb3RlQ2FsbEdl", 
            "dFVSSVNlZ21lbnRUeXBlGAsgASgOMhsuQm9ucmVlUEIuR2V0VVJJU2VnbWVu", 
            "dFR5cGUSHQoVcmVtb3RlQ2FsbFVSSVNlZ21lbnRzGAwgASgNEj8KDW5hbWlu", 
            "Z0NvbmZpZ3MYDSADKAsyKC5Cb25yZWVQQi5CdXNpbmVzc1RyYXNhY3Rpb25O", 
            "YW1pbmdDb25maWcSGwoTZW5hYmxlRGF0YUFnZ3JlZ2F0ZRgOIAEoCBIhChll", 
            "bmFibGVBdXRvSW5qZWN0QnJvd3NlckpzGA8gASgIItwBChFBcHBHYXRoZXJl", 
            "ckNvbmZpZxIVCg1lbmFibGVUcmFja0JUGAEgASgIEiYKHmVuYWJsZUNvbGxl", 
            "Y3RFcnJvckFuZEV4Y2VwdGlvbhgCIAEoCBIWCg5lbmFibGVUcmFja1NRTBgD", 
            "IAEoCBIYChBlbmFibGVUcmFja05vU1FMGAQgASgIEh0KFWVuYWJsZVRyYWNr", 
            "UmVtb3RlQ2FsbBgFIAEoCBIeChZlbmFibGVUcmFja0FzeW5jVGhyZWFkGAYg", 
            "ASgIEhcKD2dhdGhlcmVyUGVyY2VudBgHIAEoDSI0CgpNZXRob2RJbmZvEhEK", 
            "CWNsYXNzTmFtZRgBIAEoCRITCgttZXRob2ROYW1lcxgCIAMoCSLIAgoWU25h", 
            "cHNob3RHYXRoZXJlckNvbmZpZxIeChZleGNlZWRUaHJlc2hvbGRQZXJjZW50", 
            "GAEgASgNEhoKEmV4Y2VlZEVycm9yUGVyY2VudBgCIAEoDRIbChNzbmFwc2hv", 
            "dENvdW50UGVyTWluGAMgASgNEhMKC3NuYXBzaG90TWluGAQgASgNEhgKEHNu", 
            "YXBzaG90SW50ZXJ2YWwYBSABKA0SHgoWc25hcHNob3RUcnlUaW1lc1Blck1p", 
            "bhgGIAEoDRIZChFlbmFibGVBbGxTbmFwc2hvdBgHIAEoCBIkChxzbmFwc2hv", 
            "dFBlck1pblBlclRyYW5zYWN0aW9uGAggASgNEiwKDmhvdHNwb3RNZXRob2Rz", 
            "GAkgAygLMhQuQm9ucmVlUEIuTWV0aG9kSW5mbxIXCg9zbmFwc2hvdFBlcmNl", 
            "bnQYCiABKA0iXgoIQlRDb25maWcSGQoRZmlsdGVyVVJJUGF0dGVybnMYASAD", 
            "KAkSGwoTc25hcHNob3RVUklQYXR0ZXJucxgCIAMoCRIaChJpbmNsdWRlVVJJ", 
            "UGF0dGVybnMYAyADKAkibQoMU29ja2V0Q29uZmlnEhoKEmVuYWJsZVNvY2tl", 
            "dE1ldHJpYxgBIAEoCBIsCglyZW1vdGVJcHMYAiADKAsyGS5Cb25yZWVQQi5M", 
            "aXN0ZW5JUEFuZFBvcnQSEwoLYnRCeXRlQ291bnQYAyABKA0idgoOVGhyZWFk", 
            "RHVtcFRhc2sSKgoEdHlwZRgBIAIoDjIcLkJvbnJlZVBCLlRocmVhZER1bXBU", 
            "YXNrVHlwZRIQCgh0YXNrR1VJZBgCIAIoCRIQCghkdW1wVGltZRgDIAEoDRIU", 
            "CgxkdW1wSW50ZXJ2YWwYBCABKA0iuwIKDEN1c3RvbUJUUnVsZRIQCghydWxl", 
            "TmFtZRgBIAEoCRIOCgZlbmFibGUYAiABKAgSHgoEdHlwZRgDIAEoDjIQLkJv", 
            "bnJlZVBCLkJUVHlwZRIwCg5jbGFzc01hdGNoVHlwZRgEIAEoDjIYLkJvbnJl", 
            "ZVBCLkNsYXNzTWF0Y2hUeXBlEjUKEmNsYXNzTmFtZU1hdGNoVHlwZRgFIAEo", 
            "DjIZLkJvbnJlZVBCLlN0cmluZ01hdGNoVHlwZRIVCg1jbGFzc01hdGNoU3Ry", 
            "GAYgASgJEjYKE21ldGhvZE5hbWVNYXRjaFRZcGUYByABKA4yGS5Cb25yZWVQ", 
            "Qi5TdHJpbmdNYXRjaFR5cGUSFgoObWV0aG9kTWF0Y2hTdHIYCCABKAkSGQoR", 
            "Y3VzdG9tQnROYW1lRmxhZ3MYCSABKA0iPgoNQ3VzdG9tQlRSdWxlcxItCg1j", 
            "dXN0b21CVFJ1bGVzGAEgAygLMhYuQm9ucmVlUEIuQ3VzdG9tQlRSdWxlIjsK", 
            "DkluamVjdEpTQ29uZmlnEg4KBmVuYWJsZRgBIAEoCBINCgVqc01kNRgCIAEo", 
            "CRIKCgJqcxgDIAEoCSLPAQoJY29uZmlnUmVxEi4KDWNvbnRhaW5lckluZm8Y", 
            "ASABKAsyFy5Cb25yZWVQQi5Db250YWluZXJJbmZvEiQKCG5vZGVJbmZvGAIg", 
            "ASgLMhIuQm9ucmVlUEIuTm9kZUluZm8SKQoIYWdlbnRJRFMYAyABKAsyFy5C", 
            "b25yZWVQQi5BZ2VudElkZW50aXR5EhYKDmxhc3RDb25maWdUaW1lGAQgASgE", 
            "EhYKDmxhc3RNb2RpZnlUaW1lGAUgASgEEhEKCWxhc3RKc01kNRgGIAEoCSLg", 
            "BAoKY29uZmlnUmVzcBIpCghhZ2VudElEUxgBIAIoCzIXLkJvbnJlZVBCLkFn", 
            "ZW50SWRlbnRpdHkSEgoKY29uZmlnVGltZRgCIAEoBBIOCgZlbmFibGUYAyAB", 
            "KAgSKAoJZXJyQ29uZmlnGAQgASgLMhUuQm9ucmVlUEIuRXJyb3JDb25maWcS", 
            "MgoPY2FsbGdyYXBoQ29uZmlnGAUgASgLMhkuQm9ucmVlUEIuQ2FsbEdyYXBo", 
            "Q29uZmlnEiYKCWFwcENvbmZpZxgGIAEoCzITLkJvbnJlZVBCLkFwcENvbmZp", 
            "ZxI0Cg9hcHBHYXRoZXJDb25maWcYByABKAsyGy5Cb25yZWVQQi5BcHBHYXRo", 
            "ZXJlckNvbmZpZxI9ChNzbmFwc2hvdEdhdGhlcmVyQ2ZnGAggASgLMiAuQm9u", 
            "cmVlUEIuU25hcHNob3RHYXRoZXJlckNvbmZpZxIkCghidENvbmZpZxgJIAEo", 
            "CzISLkJvbnJlZVBCLkJUQ29uZmlnEiwKDHNvY2tldENvbmZpZxgKIAEoCzIW", 
            "LkJvbnJlZVBCLlNvY2tldENvbmZpZxIwCg50aHJlYWREdW1wVGFzaxgLIAEo", 
            "CzIYLkJvbnJlZVBCLlRocmVhZER1bXBUYXNrEi4KDWN1c3RvbUJUUnVsZXMY", 
            "DCABKAsyFy5Cb25yZWVQQi5DdXN0b21CVFJ1bGVzEhIKCm1vZGlmeVRpbWUY", 
            "DSABKAQSKgoIanNDb25maWcYDiABKAsyGC5Cb25yZWVQQi5JbmplY3RKU0Nv", 
            "bmZpZxISCgpyZVJlZ0FnZW50GA8gASgIKjcKFEluc3RydW1lbnRhdGlvbkxl", 
            "dmVsEg4KClBST0RVQ1RJT04QARIPCgtERVZFTE9QTUVOVBACKkgKDVNRTFJl", 
            "Y29yZFR5cGUSEAoMU1FMX1JUX0NMT1NFEAESEgoOU1FMX1JUX09CU0NVUkUQ", 
            "AhIRCg1TUUxfUlRfREVUQUlMEAMqcAoRR2V0VVJJU2VnbWVudFR5cGUSHgoa", 
            "R0VUX1VSSV9TRUdNRU5UX1RZUEVfU1RBUlQQARIcChhHRVRfVVJJX1NFR01F", 
            "TlRfVFlQRV9FTkQQAhIdChlHRVRfVVJJX1NFR01FTlRfVFlQRV9GVUxMEAMq", 
            "SwoSVGhyZWFkRHVtcFRhc2tUeXBlEhgKFFRIUkVBRF9EVU1QX1RBU0tfTkVX", 
            "EAESGwoXVEhSRUFEX0RVTVBfVEFTS19DQU5DTEUQAiqTAQoPU3RyaW5nTWF0", 
            "Y2hUeXBlEhwKGE1BVENIX1NUUklOR19UWVBFX0VRVUFMUxABEiEKHU1BVENI", 
            "X1NUUklOR19UWVBFX1NUQVJUU19XSVRIEAISHwobTUFUQ0hfU1RSSU5HX1RZ", 
            "UEVfRU5EU19XSVRIEAMSHgoaTUFUQ0hfU1RSSU5HX1RZUEVfQ09OVEFJTlMQ", 
            "BCqVAQoOQ2xhc3NNYXRjaFR5cGUSIAocTUFUQ0hfQ0xBU1NfV0lUSF9FWEFD", 
            "VF9DTEFTUxABEh8KG01BVENIX0NMQVNTX1dJVEhfQU5OT1RBVElPThACEiAK", 
            "HE1BVENIX0NMQVNTX1dJVEhfU1VQRVJfQ0xBU1MQAxIeChpNQVRDSF9DTEFT", 
            "U19XSVRIX0lOVEVSRkFDRRAEKr4BChBDdXN0b21CVE5hbWVUeXBlEiUKIUNV", 
            "U1RPTV9CVF9OQU1FX1RZUEVfVVNFX1JVTEVfTkFNRRABEisKJ0NVU1RPTV9C", 
            "VF9OQU1FX1RZUEVfVVNFX0ZVTExfQ0xBU1NfTkFNRRACEi0KKUNVU1RPTV9C", 
            "VF9OQU1FX1RZUEVfVVNFX1NJTVBMRV9DTEFTU19OQU1FEAQSJwojQ1VTVE9N", 
            "X0JUX05BTUVfVFlQRV9VU0VfTUVUSE9EX05BTUUQCEIZChdjb20uYm9ucmVl", 
            "LnByb3RvYnVmLmFwbUqUfAoHEgUAAJQCAQoICgECEgMACBAKCAoBCBIDAQAw", 
            "CgsKBAjnBwASAwEAMAoMCgUI5wcAAhIDAQcTCg0KBgjnBwACABIDAQcTCg4K", 
            "BwjnBwACAAESAwEHEwoMCgUI5wcABxIDARYvCgkKAgMAEgMDBxcKCQoCAwES", 
            "AwQHJQoZCgIEABIEBwAKARoN55uR5ZCs5L+h5oGvCgoKCgMEAAESAwcIFwoW", 
            "CgQEAAIAEgMIBCgiCeebkeWQrGlwCgoMCgUEAAIABBIDCAQMCgwKBQQAAgAF", 
            "EgMIDRMKDAoFBAACAAESAwgUFgoMCgUEAAIAAxIDCCYnChsKBAQAAgESAwkE", 
            "KCIO55uR5ZCs56uv5Y+jIAoKDAoFBAACAQQSAwkEDAoMCgUEAAIBBRIDCQ0T", 
            "CgwKBQQAAgEBEgMJFBgKDAoFBAACAQMSAwkmJwpDCgIEARIEDQAdARo3YWdl", 
            "bnQg5a655Zmo5L+h5oGv77yI5a+55bqU5LiA5Liq54mp55CG5a655Zmo6L+b", 
            "56iL77yJCgoKCgMEAQESAw0IFQo1CgQEAQIAEgMOBC4iKOW6lOeUqOWQjeen", 
            "sCzlronoo4VhZ2VudOaXtumFjee9rueahOmhuQoKDAoFBAECAAQSAw4EDAoM", 
            "CgUEAQIABRIDDg0TCgwKBQQBAgABEgMOFBsKDAoFBAECAAMSAw4sLQpBCgQE", 
            "AQIBEgMPBC4iNOS4gOe6p+WIhuexu+mbhuWQiOWQjeensCzlronoo4VhZ2Vu", 
            "dOaXtumFjee9rueahOmhuQoKDAoFBAECAQQSAw8EDAoMCgUEAQIBBRIDDw0T", 
            "CgwKBQQBAgEBEgMPFB8KDAoFBAECAQMSAw8sLQpBCgQEAQICEgMQBC4iNOS6", 
            "jOe6p+S4muWKoembhuWQiOWQjeensCzlronoo4VhZ2VudOaXtumFjee9ruea", 
            "hOmhuQoKDAoFBAECAgQSAxAEDAoMCgUEAQICBRIDEA0TCgwKBQQBAgIBEgMQ", 
            "FBwKDAoFBAECAgMSAxAsLQpmCgQEAQIDEgMRBC4iWWFnZW505ZCN56ew77yM", 
            "5a6J6KOFYWdlbnTml7bphY3nva7nmoTpobnvvIzlgZrkuLrpop3lpJbmmL7n", 
            "pLrnmoTpobnvvIzkuI3lgZrllK/kuIDmoIfor4YKCgwKBQQBAgMEEgMRBAwK", 
            "DAoFBAECAwUSAxENEwoMCgUEAQIDARIDERQdCgwKBQQBAgMDEgMRLC0KawoE", 
            "BAECBBIDEgQuIl5hZ2VudCBHVUlE77yM56ys5LiA5qyhY29uZmln55SxYWdl", 
            "bnTliIbphY3lubblhpnliLDmnKzlnLDphY3nva7vvIzkuYvlkI7ku47mnKzl", 
            "nLDphY3nva7or7vlj5YKCgwKBQQBAgQEEgMSBAwKDAoFBAECBAUSAxINEwoM", 
            "CgUEAQIEARIDEhQdCgwKBQQBAgQDEgMSLC0KGQoEBAECBRIDEwQuIgxhZ2Vu", 
            "dOeJiOacrAoKDAoFBAECBQQSAxMEDAoMCgUEAQIFBRIDEw0TCgwKBQQBAgUB", 
            "EgMTFCAKDAoFBAECBQMSAxMsLQofCgQEAQIGEgMUBC4iEmFnZW505a6J6KOF", 
            "5pel5pyfCgoMCgUEAQIGBBIDFAQMCgwKBQQBAgYFEgMUDRMKDAoFBAECBgES", 
            "AxQUKQoMCgUEAQIGAxIDFCwtCh8KBAQBAgcSAxUELiISYWdlbnTlronoo4Xo", 
            "t6/lvoQKCgwKBQQBAgcEEgMVBAwKDAoFBAECBwUSAxUNEwoMCgUEAQIHARID", 
            "FRQjCgwKBQQBAgcDEgMVLC0KFgoEBAECCBIDFgQuIgnov5vnqItpZAoKDAoF", 
            "BAECCAQSAxYEDAoMCgUEAQIIBRIDFg0TCgwKBQQBAggBEgMWFB0KDAoFBAEC", 
            "CAMSAxYsLQofCgQEAQIJEgMXBC8iEuebkeWQrGlw5Y+K56uv5Y+jCgoMCgUE", 
            "AQIJBBIDFwQMCgwKBQQBAgkGEgMXDRwKDAoFBAECCQESAxcdJAoMCgUEAQIJ", 
            "AxIDFywuChoKBAQBAgoSAxgELyIN5a655Zmo54mI5pysCgoMCgUEAQIKBBID", 
            "GAQMCgwKBQQBAgoFEgMYDRMKDAoFBAECCgESAxgUJAoMCgUEAQIKAxIDGCwu", 
            "CiAKBAQBAgsSAxkELyIT5a655Zmo5a6J6KOF55uu5b2VCgoMCgUEAQILBBID", 
            "GQQMCgwKBQQBAgsFEgMZDRMKDAoFBAECCwESAxkUJwoMCgUEAQILAxIDGSwu", 
            "CjQKBAQBAgwSAxoELyIn6Jma5ouf5py654mI5pys5L+h5oGvKGphdmHjgIFk", 
            "b25ldOetiSkKCgwKBQQBAgwEEgMaBAwKDAoFBAECDAUSAxoNEwoMCgUEAQIM", 
            "ARIDGhQaCgwKBQQBAgwDEgMaLC4KIwoEBAECDRIDGwQvIhbomZrmi5/mnLrl", 
            "kK/liqjlj4LmlbAKCgwKBQQBAg0EEgMbBAwKDAoFBAECDQUSAxsNEwoMCgUE", 
            "AQINARIDGxQkCgwKBQQBAg0DEgMbLC4KIwoEBAECDhIDHAQvIhbomZrmi5/m", 
            "nLrns7vnu5/lj5jph48KCgwKBQQBAg4EEgMcBAwKDAoFBAECDgUSAxwNEwoM", 
            "CgUEAQIOARIDHBQjCgwKBQQBAg4DEgMcLC4KHgoCBAISBCAAJwEaEmFnZW50", 
            "6IqC54K55L+h5oGvCgoKCgMEAgESAyAIEAprCgQEAgIAEgMhBC4iXuiKgueC", 
            "uUdVSUTvvIznrKzkuIDmrKFjb25maWfnlLFhZ2VudOWIhumFjeW5tuWGmeWI", 
            "sOacrOWcsOmFjee9ru+8jOS5i+WQjuS7juacrOWcsOmFjee9ruivu+WPlgoK", 
            "DAoFBAICAAQSAyEEDAoMCgUEAgIABRIDIQ0TCgwKBQQCAgABEgMhFBwKDAoF", 
            "BAICAAMSAyEsLQpnCgQEAgIBEgMiBC4iWuiKgueCueWQjeensO+8jOWuieij", 
            "hWFnZW505pe26YWN572u55qE6aG577yM5YGa5Li66aKd5aSW5pi+56S655qE", 
            "6aG577yM5LiN5YGa5ZSv5LiA5qCH6K+GCgoMCgUEAgIBBBIDIgQMCgwKBQQC", 
            "AgEFEgMiDRMKDAoFBAICAQESAyIUHAoMCgUEAgIBAxIDIiwtCi8KBAQCAgIS", 
            "AyMELiIi6IqC54K55ZSv5LiA5qCH6K+G77yM5py65Zmo5ZCN56ewCgoMCgUE", 
            "AgICBBIDIwQMCgwKBQQCAgIFEgMjDRMKDAoFBAICAgESAyMUHgoMCgUEAgIC", 
            "AxIDIywtCiAKBAQCAgMSAyQELiIT5pON5L2c57O757uf5L+h5oGvCgoMCgUE", 
            "AgIDBBIDJAQMCgwKBQQCAgMFEgMkDRMKDAoFBAICAwESAyQUGgoMCgUEAgID", 
            "AxIDJCwtCiAKBAQCAgQSAyUELiIT57O757uf546v5aKD5Y+Y6YePCgoMCgUE", 
            "AgIEBBIDJQQMCgwKBQQCAgQFEgMlDRMKDAoFBAICBAESAyUUKAoMCgUEAgIE", 
            "AxIDJSwtCh8KBAQCAgUSAyYELiIS5pyN5Yqh5ZmoaXDkv6Hmga8KCgwKBQQC", 
            "AgUEEgMmBAwKDAoFBAICBQUSAyYNEwoMCgUEAgIFARIDJhQXCgwKBQQCAgUD", 
            "EgMmLC0KHAoCBAMSBCoALAEaEOW/veeVpeeahOW8guW4uAoKCgoDBAMBEgMq", 
            "CBcKRQoEBAMCABIDKwQmIjjlrozmlbTnmoTnsbvlnovvvIzmr5TlpoJjb20u", 
            "eW91ckNvbXBhbnkuSWdub3JlRXhjZXB0aW9uCgoMCgUEAwIABBIDKwQMCgwK", 
            "BQQDAgAFEgMrDRMKDAoFBAMCAAESAysUIQoMCgUEAwIAAxIDKyQlCiIKAgQE", 
            "EgQuADABGhblv73nlaXnmoTplJnor6/mtojmga8KCgoKAwQEARIDLggaCh0K", 
            "BAQEAgASAy8EJiIQ5Yy56YWN55qE5raI5oGvCgoMCgUEBAIABBIDLwQMCgwK", 
            "BQQEAgAFEgMvDRMKDAoFBAQCAAESAy8YIAoMCgUEBAIAAxIDLyQlChkKAgQF", 
            "EgQ0AEABGg3plJnor6/phY3nva4KCgoKAwQFARIDNAgTCj4KBAQFAgASAzUE", 
            "PiIxamF2YeaOoumSiO+8jOaYr+WQpuWIhuaekGphdmEudXRpbC5sb2dnaW5n", 
            "6ZSZ6K+vCgoMCgUEBQIABBIDNQQMCgwKBQQFAgAFEgM1DREKDAoFBAUCAAES", 
            "AzUSLQoMCgUEBQIAAxIDNTw9CjIKBAQFAgESAzYEPiIlamF2YeaOoumSiO+8", 
            "jOaYr+WQpuWIhuaekExvZzRq6ZSZ6K+vCgoMCgUEBQIBBBIDNgQMCgwKBQQF", 
            "AgEFEgM2DREKDAoFBAUCAQESAzYSJwoMCgUEBQIBAxIDNjw9CjoKBAQFAgIS", 
            "AzcEPiItamF2YeaOoumSiO+8jOaYr+WQpuWIhuaekFNMRjRqL0xvZ2JhY2vp", 
            "lJnor68KCgwKBQQFAgIEEgM3BAwKDAoFBAUCAgUSAzcNEQoMCgUEBQICARID", 
            "NxInCgwKBQQFAgIDEgM3PD0KRAoEBAUCAxIDOAQ+IjdqYXZh44CBLm5ldOet", 
            "ieaOoumSiO+8jOaYr+WQpuWIhuaekOm7mOiupGh0dHDplJnor6/noIEKCgwK", 
            "BQQFAgMEEgM4BAwKDAoFBAUCAwUSAzgNEQoMCgUEBQIDARIDOBIsCgwKBQQF", 
            "AgMDEgM4PD0KMQoEBAUCBBIDOQQ+IiQubmV05o6i6ZKI77yM5piv5ZCm5YiG", 
            "5p6QTkxvZ+mUmeivrwoKDAoFBAUCBAQSAzkEDAoMCgUEBQIEBRIDOQ0RCgwK", 
            "BQQFAgQBEgM5EicKDAoFBAUCBAMSAzk8PQozCgQEBQIFEgM6BD4iJi5uZXTm", 
            "jqLpkojvvIzmmK/lkKbliIbmnpBMb2dOZXTplJnor68KCgwKBQQFAgUEEgM6", 
            "BAwKDAoFBAUCBQUSAzoNEQoMCgUEBQIFARIDOhIqCgwKBQQFAgUDEgM6PD0K", 
            "MwoEBAUCBhIDOwQ+IiYubmV05o6i6ZKI77yM5piv5ZCm5YiG5p6Qc3lzdGVt", 
            "IHRyYWNlCgoMCgUEBQIGBBIDOwQMCgwKBQQFAgYFEgM7DREKDAoFBAUCBgES", 
            "AzsSLgoMCgUEBQIGAxIDOzw9CjAKBAQFAgcSAzwEPiIjLm5ldOaOoumSiO+8", 
            "jOaYr+WQpuWIhuaekEV2ZW50IGxvZwoKDAoFBAUCBwQSAzwEDAoMCgUEBQIH", 
            "BRIDPA0RCgwKBQQFAgcBEgM8EisKDAoFBAUCBwMSAzw8PQpVCgQEBQIIEgM9", 
            "BD4iSGphdmHjgIEubmV0562J5o6i6ZKI77yM5o2V6I635Yiw6ZSZ6K+v5pel", 
            "5b+X5pe277yM5qCH6K6w5Lia5Yqh5Li66ZSZ6K+vCgoMCgUEBQIIBBIDPQQM", 
            "CgwKBQQFAggFEgM9DREKDAoFBAUCCAESAz0SOQoMCgUEBQIIAxIDPTw9CjQK", 
            "BAQFAgkSAz4EPyInamF2YeOAgS5uZXTnrYnmjqLpkojvvIzlv73nlaXnmoTl", 
            "vILluLgKCgwKBQQFAgkEEgM+BAwKDAoFBAUCCQYSAz4NHAoMCgUEBQIJARID", 
            "Ph0tCgwKBQQFAgkDEgM+PD4KOgoEBAUCChIDPwQ/Ii1qYXZh44CBLm5ldOet", 
            "ieaOoumSiO+8jOW/veeVpeeahOmUmeivr+a2iOaBrwoKDAoFBAUCCgQSAz8E", 
            "DAoMCgUEBQIKBhIDPw0fCgwKBQQFAgoBEgM/ICwKDAoFBAUCCgMSAz88Pgoc", 
            "CgIEBhIERABJARoQ6LCD55So5qCI6YWN572uCgoKCgMEBgESA0QIFwpRCgQE", 
            "BgIAEgNFBCsiROW9k+aWueazleiAl+aXtuWkp+S6juivpeWAvO+8jOmcgOim", 
            "geiOt+WPluiwg+eUqOaWueazleWIsGNhbGwgZ3JhcGgKCgwKBQQGAgAEEgNF", 
            "BAwKDAoFBAYCAAUSA0UNEwoMCgUEBgIAARIDRRQhCgwKBQQGAgADEgNFKSoK", 
            "VAoEBAYCARIDRgQrIkflvZNzcWzmn6Xor6Lml7bpl7TlpKfkuo7or6XlgLzv", 
            "vIzpnIDopoHojrflj5bosIPnlKjmlrnms5XliLBjYWxsIGdyYXBoCgoMCgUE", 
            "BgIBBBIDRgQMCgwKBQQGAgEFEgNGDRMKDAoFBAYCAQESA0YUIwoMCgUEBgIB", 
            "AxIDRikqClIKBAQGAgISA0cEKyJFamF2YeOAgS5uZXTmjqLpkojvvIzpnIDo", 
            "poHku45jYWxsIGdyYXBo5o6S6Zmk55qE5YyFL+exuy/lkb3lkI3nqbrpl7QK", 
            "CgwKBQQGAgIEEgNHBAwKDAoFBAYCAgUSA0cNEwoMCgUEBgICARIDRxQgCgwK", 
            "BQQGAgIDEgNHKSoKUgoEBAYCAxIDSAQrIkVqYXZh44CBLm5ldOaOoumSiO+8", 
            "jOmcgOimgeWcqGNhbGwgZ3JhcGjmmL7npLrnmoTljIUv57G7L+WRveWQjeep", 
            "uumXtAoKDAoFBAYCAwQSA0gEDAoMCgUEBgIDBRIDSA0TCgwKBQQGAgMBEgNI", 
            "FCAKDAoFBAYCAwMSA0gpKgoKCgIFABIESwBOAQoKCgMFAAESA0sFGQoaCgQF", 
            "AAIAEgNMAxYiDeeUn+S6p+eOr+WigwoKDAoFBQACAAESA0wDDQoMCgUFAAIA", 
            "AhIDTBQVChoKBAUAAgESA00DFiIN5byA5Y+R546v5aKDCgoMCgUFAAIBARID", 
            "TQMOCgwKBQUAAgECEgNNFBUKCgoCBQESBFAAVAEKCgoDBQEBEgNQBRIKFAoE", 
            "BQECABIDUQQaIgflhbPpl60KCgwKBQUBAgABEgNRBBAKDAoFBQECAAISA1EY", 
            "GQoUCgQFAQIBEgNSBBoiB+a3t+a3hgoKDAoFBQECAQESA1IEEgoMCgUFAQIB", 
            "AhIDUhgZChQKBAUBAgISA1MEGiIH6K+m57uGCgoMCgUFAQICARIDUwQRCgwK", 
            "BQUBAgICEgNTGBkKIgoCBQISBFcAWwEaFuaIquWPlnVyaeauteaVsOexu+We", 
            "iwoKCgoDBQIBEgNXBRYKFAoEBQICABIDWAQmIgfliY3pnaIKCgwKBQUCAgAB", 
            "EgNYBB4KDAoFBQICAAISA1gkJQoUCgQFAgIBEgNZBCYiB+WQjumdogoKDAoF", 
            "BQICAQESA1kEHAoMCgUFAgIBAhIDWSQlChcKBAUCAgISA1oEJiIK5YWo6Lev", 
            "5b6ECgoMCgUFAgICARIDWgQdCgwKBQUCAgICEgNaJCUKHwoCBAcSBG4AdQEa", 
            "E+S4muWKoeWRveWQjeinhOWImQoKCgoDBAcBEgNuCCYKGgoEBAcCABIDbwQy", 
            "Ig3kuJrliqHnsbvlnosKCgwKBQQHAgAEEgNvBAwKDAoFBAcCAAYSA28NEwoM", 
            "CgUEBwIAARIDbxQYCgwKBQQHAgADEgNvMDEKFAoEBAcCARIDcAQyIgflvIDl", 
            "kK8KCgwKBQQHAgEEEgNwBAwKDAoFBAcCAQUSA3ANEQoMCgUEBwIBARIDcBIY", 
            "CgwKBQQHAgEDEgNwMDEKRQoEBAcCAhIDcQQyIjjlsZ7mgKcsIGUuZy4xIHVy", 
            "aS1sZW5ndGg9ZnVsbDtwYXJhbWV0ZXIta2V5PWNhdGVnb3J5OyAgCgoMCgUE", 
            "BwICBBIDcQQMCgwKBQQHAgIFEgNxDRMKDAoFBAcCAgESA3EUHgoMCgUEBwIC", 
            "AxIDcTAxChoKAgQIEgV4AIgBARoN5bqU55So6YWN572uCgoKCgMECAESA3gI", 
            "EQoaCgQECAIAEgN5BEIiDeWIhuaekOe6p+WIqwoKDAoFBAgCAAQSA3kEDAoM", 
            "CgUECAIABhIDeQ0hCgwKBQQIAgABEgN5IjEKDAoFBAgCAAMSA3lAQQogCgQE", 
            "CAIBEgN6BEIiE+WBpeW6t+S4muWKoemYgOWAvAoKDAoFBAgCAQQSA3oEDAoM", 
            "CgUECAIBBRIDeg0TCgwKBQQIAgEBEgN6FB8KDAoFBAgCAQMSA3pAQQomCgQE", 
            "CAICEgN7BEIiGei+g+aFouS4muWKoemYgOWAvOWAjeaVsAoKDAoFBAgCAgQS", 
            "A3sEDAoMCgUECAICBRIDew0TCgwKBQQIAgIBEgN7FCgKDAoFBAgCAgMSA3tA", 
            "QQomCgQECAIDEgN8BEIiGeW+iOaFouS4muWKoemYgOWAvOWAjeaVsAoKDAoF", 
            "BAgCAwQSA3wEDAoMCgUECAIDBRIDfA0TCgwKBQQIAgMBEgN8FCwKDAoFBAgC", 
            "AwMSA3xAQQodCgQECAIEEgN9BEIiEHNxbOWBpeW6t+mYgOWAvAoKDAoFBAgC", 
            "BAQSA30EDAoMCgUECAIEBRIDfQ0TCgwKBQQIAgQBEgN9FCcKDAoFBAgCBAMS", 
            "A31AQQojCgQECAIFEgN+BEIiFnNxbOivreWPpeiusOW9leaWueW8jwoKDAoF", 
            "BAgCBQQSA34EDAoMCgUECAIFBhIDfg0aCgwKBQQIAgUBEgN+GygKDAoFBAgC", 
            "BQMSA35AQQofCgQECAIGEgN/BEIiEm5vc3Fs5YGl5bq36ZiA5YC8CgoMCgUE", 
            "CAIGBBIDfwQMCgwKBQQIAgYFEgN/DRMKDAoFBAgCBgESA38UKQoMCgUECAIG", 
            "AxIDf0BBCicKBAQIAgcSBIABBEIiGeWklumDqOiwg+eUqOWBpeW6t+mYgOWA", 
            "vAoKDQoFBAgCBwQSBIABBAwKDQoFBAgCBwUSBIABDRMKDQoFBAgCBwESBIAB", 
            "FC4KDQoFBAgCBwMSBIABQEEKZQoEBAgCCBIEgQEEQiJXZGVwcmVjYXRlZCh2", 
            "My4w5byA5aeLKe+8jOaIquWPluS4muWKoVVSSeexu+Wei++8jOexu+Wei+S4", 
            "ukZVTEzml7bvvIxVUknmrrXmlbDkuI3nlJ/mlYgKCg0KBQQIAggEEgSBAQQM", 
            "Cg0KBQQIAggGEgSBAQ0eCg0KBQQIAggBEgSBAR8yCg0KBQQIAggDEgSBAUBB", 
            "Cj0KBAQIAgkSBIIBBEMiL2RlcHJlY2F0ZWQodjMuMOW8gOWniynvvIzmiKrl", 
            "j5bkuJrliqFVUknmrrXmlbAKCg0KBQQIAgkEEgSCAQQMCg0KBQQIAgkFEgSC", 
            "AQ0TCg0KBQQIAgkBEgSCARQhCg0KBQQIAgkDEgSCAUBCClIKBAQIAgoSBIMB", 
            "BEMiROaIquWPluWklumDqOiwg+eUqFVSSeexu+Wei++8jOexu+Wei+S4ukZV", 
            "TEzml7bvvIxVUknmrrXmlbDkuI3nlJ/mlYgKCg0KBQQIAgoEEgSDAQQMCg0K", 
            "BQQIAgoGEgSDAQ0eCg0KBQQIAgoBEgSDAR86Cg0KBQQIAgoDEgSDAUBCCioK", 
            "BAQIAgsSBIQBBEMiHOaIquWPluWklumDqOiwg+eUqFVSSeauteaVsAoKDQoF", 
            "BAgCCwQSBIQBBAwKDQoFBAgCCwUSBIQBDRMKDQoFBAgCCwESBIQBFCkKDQoF", 
            "BAgCCwMSBIQBQEIKGwoEBAgCDBIEhQEEQyIN5ZG95ZCN6KeE5YiZCgoNCgUE", 
            "CAIMBBIEhQEEDAoNCgUECAIMBhIEhQENKwoNCgUECAIMARIEhQEtOgoNCgUE", 
            "CAIMAxIEhQFAQgonCgQECAINEgSGAQRDIhnmmK/lkKblvIDlkK/mlbDmja7o", 
            "no3lkIgKCg0KBQQIAg0EEgSGAQQMCg0KBQQIAg0FEgSGAQ0RCg0KBQQIAg0B", 
            "EgSGARIlCg0KBQQIAg0DEgSGAUBCCj4KBAQIAg4SBIcBBEMiMGRlcHJlY2F0", 
            "ZWTvvIzmmK/lkKblvIDlkK9icm93c2VyIGpz6Ieq5Yqo5bWM56CBCgoNCgUE", 
            "CAIOBBIEhwEEDAoNCgUECAIOBRIEhwENEQoNCgUECAIOARIEhwESKwoNCgUE", 
            "CAIOAxIEhwFAQgonCgIECRIGiwEAkwEBGhnlupTnlKjph4fpm4bmlbDmja7p", 
            "hY3nva4KCgsKAwQJARIEiwEIGQonCgQECQIAEgSMAQQ2IhnlvIDlkK/kuJrl", 
            "iqHov4fnqIvov73ouKoKCg0KBQQJAgAEEgSMAQQMCg0KBQQJAgAFEgSMAQ0R", 
            "Cg0KBQQJAgABEgSMARIfCg0KBQQJAgADEgSMATQ1CjAKBAQJAgESBI0BBDYi", 
            "IuW8gOWQr+mHh+mbhumUmeivr+WSjOW8guW4uOS/oeaBrwoKDQoFBAkCAQQS", 
            "BI0BBAwKDQoFBAkCAQUSBI0BDREKDQoFBAkCAQESBI0BEjAKDQoFBAkCAQMS", 
            "BI0BNDUKJAoEBAkCAhIEjgEENiIW5byA5ZCvc3Fs6LCD55So6L+96LiqCgoN", 
            "CgUECQICBBIEjgEEDAoNCgUECQICBRIEjgENEQoNCgUECQICARIEjgESIAoN", 
            "CgUECQICAxIEjgE0NQomCgQECQIDEgSPAQQ2IhjlvIDlkK9ub3NxbOiwg+eU", 
            "qOi/vei4qgoKDQoFBAkCAwQSBI8BBAwKDQoFBAkCAwUSBI8BDREKDQoFBAkC", 
            "AwESBI8BEiIKDQoFBAkCAwMSBI8BNDUKJwoEBAkCBBIEkAEENiIZ5byA5ZCv", 
            "6L+c56iL6LCD55So6L+96LiqCgoNCgUECQIEBBIEkAEEDAoNCgUECQIEBRIE", 
            "kAENEQoNCgUECQIEARIEkAESJwoNCgUECQIEAxIEkAE0NQonCgQECQIFEgSR", 
            "AQQ2IhnlvIDlkK/lvILmraXnur/nqIvov73ouKoKCg0KBQQJAgUEEgSRAQQM", 
            "Cg0KBQQJAgUFEgSRAQ0RCg0KBQQJAgUBEgSRARIoCg0KBQQJAgUDEgSRATQ1", 
            "CiEKBAQJAgYSBJIBBDYiE+aVsOaNrumHh+mbhuavlOS+iwoKDQoFBAkCBgQS", 
            "BJIBBAwKDQoFBAkCBgUSBJIBDRMKDQoFBAkCBgESBJIBFCMKDQoFBAkCBgMS", 
            "BJIBNDUKGwoCBAoSBpYBAJkBARoN5a6a5LmJ5pa55rOVCgoLCgMECgESBJYB", 
            "CBIKFQoEBAoCABIElwEELiIH57G75ZCNCgoNCgUECgIABBIElwEEDAoNCgUE", 
            "CgIABRIElwENEwoNCgUECgIAARIElwEUHQoNCgUECgIAAxIElwEsLQoYCgQE", 
            "CgIBEgSYAQQuIgrmlrnms5XlkI0KCg0KBQQKAgEEEgSYAQQMCg0KBQQKAgEF", 
            "EgSYAQ0TCg0KBQQKAgEBEgSYARQfCg0KBQQKAgEDEgSYASwtCiEKAgQLEgac", 
            "AQCnAQEaE+W/q+eFp+mHh+mbhumFjee9rgoKCwoDBAsBEgScAQgeCjgKBAQL", 
            "AgASBJ0BBDYiKui2hei/h+S4gOWIhumSn+mYgOWAvOavlOS+iyjljZXkvY0x", 
            "LzEwMDApCgoNCgUECwIABBIEnQEEDAoNCgUECwIABRIEnQENEwoNCgUECwIA", 
            "ARIEnQEUKgoNCgUECwIAAxIEnQE0NQo4CgQECwIBEgSeAQQ2IirotoXov4fk", 
            "uIDliIbpkp/plJnor6/mr5Tkvoso5Y2V5L2NMS8xMDAwKQoKDQoFBAsCAQQS", 
            "BJ4BBAwKDQoFBAsCAQUSBJ4BDRMKDQoFBAsCAQESBJ4BFCYKDQoFBAsCAQMS", 
            "BJ4BNDUKKgoEBAsCAhIEnwEENiIc5q+P5YiG6ZKf5pyA5aSa5b+r54Wn5qyh", 
            "5pWwCgoNCgUECwICBBIEnwEEDAoNCgUECwICBRIEnwENEwoNCgUECwICARIE", 
            "nwEUJwoNCgUECwICAxIEnwE0NQotCgQECwIDEgSgAQQ2Ih/op6blj5HmnaHk", 
            "u7bml7bmlLbpm4blh6DliIbpkp8KCg0KBQQLAgMEEgSgAQQMCg0KBQQLAgMF", 
            "EgSgAQ0TCg0KBQQLAgMBEgSgARQfCg0KBQQLAgMDEgSgATQ1CicKBAQLAgQS", 
            "BKEBBDYiGeW/q+eFp+mHh+mbhuWRqOacn+mXtOmalAoKDQoFBAsCBAQSBKEB", 
            "BAwKDQoFBAsCBAUSBKEBDRMKDQoFBAsCBAESBKEBFCQKDQoFBAsCBAMSBKEB", 
            "NDUKMAoEBAsCBRIEogEENiIi5q+P5YiG6ZKf5pyA5aSa5bCd6K+V5b+r54Wn", 
            "5qyh5pWwCgoNCgUECwIFBBIEogEEDAoNCgUECwIFBRIEogENEwoNCgUECwIF", 
            "ARIEogEUKgoNCgUECwIFAxIEogE0NQohCgQECwIGEgSjAQQ2IhPlvIDlkK/n", 
            "g63ngrnlv6vnhacKCg0KBQQLAgYEEgSjAQQMCg0KBQQLAgYFEgSjAQ0RCg0K", 
            "BQQLAgYBEgSjARIjCg0KBQQLAgYDEgSjATQ1Ck4KBAQLAgcSBKQBBDYiQOWF", 
            "qOmHj+W/q+eFp++8jOavj+S4quS4muWKoeavj+WIhumSn+acgOWkmuaUtumb", 
            "huWkmuWwkeS4quW/q+eFpwoKDQoFBAsCBwQSBKQBBAwKDQoFBAsCBwUSBKQB", 
            "DRMKDQoFBAsCBwESBKQBFDAKDQoFBAsCBwMSBKQBNDUKIgoEBAsCCBIEpQEE", 
            "NiIUaG90c3BvdOaWueazleWIl+ihqAoKDQoFBAsCCAQSBKUBBAwKDQoFBAsC", 
            "CAYSBKUBDRcKDQoFBAsCCAESBKUBGCYKDQoFBAsCCAMSBKUBNDUKSQoEBAsC", 
            "CRIEpgEENyI76ZyA6KaB6YeH6ZuG5b+r54Wn55qE5q+U5L6LKOWNleS9jTEv", 
            "MTAwMCnvvIzpu5jorqTlgLzvvJoxMAoKDQoFBAsCCQQSBKYBBAwKDQoFBAsC", 
            "CQUSBKYBDRMKDQoFBAsCCQESBKYBFCMKDQoFBAsCCQMSBKYBNDYKGwoCBAwS", 
            "BqsBAK8BARoN5Lia5Yqh6YWN572uCgoLCgMEDAESBKsBCBAKgAEKBAQMAgAS", 
            "BKwBBDcicuS4muWKoem7keWQjeWNle+8jOavlOWmgi9Gb3J1bS9pbmRleC5q", 
            "c3DnrYnvvIxjb250cm9sbGVy5Y+q6L+U5Zue5Lia5Yqh6buR5ZCN5Y2V5oiW", 
            "6ICF5Lia5Yqh55m95ZCN5Y2V5YW25Lit5LiA56eNCgoNCgUEDAIABBIErAEE", 
            "DAoNCgUEDAIABRIErAENEwoNCgUEDAIAARIErAEUJQoNCgUEDAIAAxIErAE1", 
            "Ngo6CgQEDAIBEgStAQQ3Iizlv6vnhafnmb3lkI3ljZXvvIzmr5TlpoIvRm9y", 
            "dW0vaW5kZXguanNw562JCgoNCgUEDAIBBBIErQEEDAoNCgUEDAIBBRIErQEN", 
            "EwoNCgUEDAIBARIErQEUJwoNCgUEDAIBAxIErQE1NgqAAQoEBAwCAhIErgEE", 
            "NyJy5Lia5Yqh55m95ZCN5Y2V77yM5q+U5aaCL0ZvcnVtL2luZGV4LmpzcOet", 
            "ie+8jGNvbnRyb2xsZXLlj6rov5Tlm57kuJrliqHpu5HlkI3ljZXmiJbogIXk", 
            "uJrliqHnmb3lkI3ljZXlhbbkuK3kuIDnp40KCg0KBQQMAgIEEgSuAQQMCg0K", 
            "BQQMAgIFEgSuAQ0TCg0KBQQMAgIBEgSuARQmCg0KBQQMAgIDEgSuATU2ChsK", 
            "AgQNEgazAQC3AQEaDXNvY2tldOmFjee9rgoKCwoDBA0BEgSzAQgUCiEKBAQN", 
            "AgASBLQBBDYiE+W8gOWQr3NvY2tldOWIhuaekAoKDQoFBA0CAAQSBLQBBAwK", 
            "DQoFBA0CAAUSBLQBDREKDQoFBA0CAAESBLQBEiQKDQoFBA0CAAMSBLQBNDUK", 
            "KQoEBA0CARIEtQEENiIb6L+c56iL5pyN5Yqh5ZmoaXDjgIHnq6/lj6MKCg0K", 
            "BQQNAgEEEgS1AQQMCg0KBQQNAgEGEgS1AQ0cCg0KBQQNAgEBEgS1AR0mCg0K", 
            "BQQNAgEDEgS1ATQ1CkgKBAQNAgISBLYBBDYiOueUqOadpeWIhuaekHNvY2tl", 
            "dOi/nOeoi+iwg+eUqOS4muWKoeeahOWJjeWHoOS4quWtl+iKguaVsAoKDQoF", 
            "BA0CAgQSBLYBBAwKDQoFBA0CAgUSBLYBDRMKDQoFBA0CAgESBLYBFB8KDQoF", 
            "BA0CAgMSBLYBNDUKDAoCBQMSBroBAL0BAQoLCgMFAwESBLoBBRcKGwoEBQMC", 
            "ABIEuwEEIiIN5paw5bu65Lu75YqhCgoNCgUFAwIAARIEuwEEGAoNCgUFAwIA", 
            "AhIEuwEgIQobCgQFAwIBEgS8AQQiIg3lj5bmtojku7vliqEKCg0KBQUDAgEB", 
            "EgS8AQQbCg0KBQUDAgECEgS8ASAhCiEKAgQOEgbAAQDFAQEaE+e6v+eoi+WJ", 
            "luaekOS7u+WKoQoKCwoDBA4BEgTAAQgWChsKBAQOAgASBMEBBC4iDeS7u+WK", 
            "oeexu+WeiwoKDQoFBA4CAAQSBMEBBAwKDQoFBA4CAAYSBMEBDR8KDQoFBA4C", 
            "AAESBMEBICQKDQoFBA4CAAMSBMEBLC0KHwoEBA4CARIEwgEELiIR5YmW5p6Q", 
            "5Lu75YqhZ3VpZAoKDQoFBA4CAQQSBMIBBAwKDQoFBA4CAQUSBMIBDRMKDQoF", 
            "BA4CAQESBMIBFBwKDQoFBA4CAQMSBMIBLC0KLQoEBA4CAhIEwwEELiIf5YmW", 
            "5p6Q5pe26ZW/77yI5Y2V5L2N77ya56eS77yJCgoNCgUEDgICBBIEwwEEDAoN", 
            "CgUEDgICBRIEwwENEwoNCgUEDgICARIEwwEUHAoNCgUEDgICAxIEwwEsLQos", 
            "CgQEDgIDEgTEAQQuIh7liZbmnpDpl7TpmpTvvIjljZXkvY3vvJptc++8iQoK", 
            "DQoFBA4CAwQSBMQBBAwKDQoFBA4CAwUSBMQBDRMKDQoFBA4CAwESBMQBFCAK", 
            "DQoFBA4CAwMSBMQBLC0KJAoCBQQSBskBAM4BARoW5a2X56ym5Liy5Yy56YWN", 
            "57G75Z6LCgoLCgMFBAESBMkBBRQKHgoEBQQCABIEygEENiIQ5a2X56ym5Liy", 
            "55u4562JCgoNCgUFBAIAARIEygEEHAoNCgUFBAIAAhIEygE0NQohCgQFBAIB", 
            "EgTLAQQ2IhPku6XlrZfnrKbkuLLlvIDlpLQKCg0KBQUEAgEBEgTLAQQhCg0K", 
            "BQUEAgECEgTLATQ1CiEKBAUEAgISBMwBBDYiE+S7peWtl+espuS4sue7k+Ww", 
            "vgoKDQoFBQQCAgESBMwBBB8KDQoFBQQCAgISBMwBNDUKHgoEBQQCAxIEzQEE", 
            "NiIQ5YyF5ZCr5a2X56ym5LiyCgoNCgUFBAIDARIEzQEEHgoNCgUFBAIDAhIE", 
            "zQE0NQoeCgIFBRIG0QEA1gEBGhDnsbvljLnphY3nsbvlnosKCgsKAwUFARIE", 
            "0QEFEwoeCgQFBQIAEgTSAQQyIhDljLnphY3nibnlrprnsbsKCg0KBQUFAgAB", 
            "EgTSAQQgCg0KBQUFAgACEgTSATAxCicKBAUFAgESBNMBBDIiGeWMuemFjeWM", 
            "heWQq+azqOino+eahOexuwoKDQoFBQUCAQESBNMBBB8KDQoFBQUCAQISBNMB", 
            "MDEKLQoEBQUCAhIE1AEEMiIf5Yy56YWN5LuO54m55a6a57G757un5om/55qE", 
            "57G7CgoNCgUFBQICARIE1AEEIAoNCgUFBQICAhIE1AEwMQotCgQFBQIDEgTV", 
            "AQQyIh/ljLnphY3lrp7njrDnibnlrprmjqXlj6PnmoTnsbsKCg0KBQUFAgMB", 
            "EgTVAQQeCg0KBQUFAgMCEgTVATAxCiQKAgUGEgbZAQDeAQEaFuiHquWumuS5", 
            "ieS4muWKoeWRveWQjQoKCwoDBQYBEgTZAQUVCh4KBAUGAgASBNoBBD8iEOS9", 
            "v+eUqOinhOWImeWQjQoKDQoFBQYCAAESBNoBBCUKDQoFBQYCAAISBNoBND4K", 
            "IQoEBQYCARIE2wEEPyIT5L2/55So5a6M5pW057G75ZCNCgoNCgUFBgIBARIE", 
            "2wEEKwoNCgUFBgIBAhIE2wE0PgohCgQFBgICEgTcAQQ/IhPkvb/nlKjnroDl", 
            "jZXnsbvlkI0KCg0KBQUGAgIBEgTcAQQtCg0KBQUGAgICEgTcATQ+Ch4KBAUG", 
            "AgMSBN0BBD8iEOS9v+eUqOaWueazleWQjQoKDQoFBQYCAwESBN0BBCcKDQoF", 
            "BQYCAwISBN0BND4KJAoCBA8SBuIBAOwBARoW6Ieq5a6a5LmJ5Lia5Yqh6KeE", 
            "5YiZCgoLCgMEDwESBOIBCBQKGwoEBA8CABIE4wEENiIN6KeE5YiZ5ZCN56ew", 
            "CgoNCgUEDwIABBIE4wEEDAoNCgUEDwIABRIE4wENEwoNCgUEDwIAARIE4wEU", 
            "HAoNCgUEDwIAAxIE4wE0NQobCgQEDwIBEgTkAQQ2Ig3mmK/lkKblvIDlkK8K", 
            "Cg0KBQQPAgEEEgTkAQQMCg0KBQQPAgEFEgTkAQ0RCg0KBQQPAgEBEgTkARIY", 
            "Cg0KBQQPAgEDEgTkATQ1ChsKBAQPAgISBOUBBDYiDeS4muWKoeexu+WeiwoK", 
            "DQoFBA8CAgQSBOUBBAwKDQoFBA8CAgYSBOUBDRMKDQoFBA8CAgESBOUBFBgK", 
            "DQoFBA8CAgMSBOUBNDUKHgoEBA8CAxIE5gEENiIQ57G75Yy56YWN57G75Z6L", 
            "CgoNCgUEDwIDBBIE5gEEDAoNCgUEDwIDBhIE5gENGwoNCgUEDwIDARIE5gEd", 
            "KwoNCgUEDwIDAxIE5gE0NQohCgQEDwIEEgTnAQQ2IhPnsbvlkI3ljLnphY3n", 
            "sbvlnosKCg0KBQQPAgQEEgTnAQQMCg0KBQQPAgQGEgTnAQ0cCg0KBQQPAgQB", 
            "EgTnAR0vCg0KBQQPAgQDEgTnATQ1CiQKBAQPAgUSBOgBBDYiFuexu+WMuemF", 
            "jeeahOWtl+espuS4sgoKDQoFBA8CBQQSBOgBBAwKDQoFBA8CBQUSBOgBDRMK", 
            "DQoFBA8CBQESBOgBFCEKDQoFBA8CBQMSBOgBNDUKJAoEBA8CBhIE6QEENiIW", 
            "5pa55rOV5ZCN5Yy56YWN57G75Z6LCgoNCgUEDwIGBBIE6QEEDAoNCgUEDwIG", 
            "BhIE6QENHAoNCgUEDwIGARIE6QEdMAoNCgUEDwIGAxIE6QE0NQonCgQEDwIH", 
            "EgTqAQQ2Ihnmlrnms5XljLnphY3nmoTlrZfnrKbkuLIKCg0KBQQPAgcEEgTq", 
            "AQQMCg0KBQQPAgcFEgTqAQ0TCg0KBQQPAgcBEgTqARQiCg0KBQQPAgcDEgTq", 
            "ATQ1CioKBAQPAggSBOsBBDYiHOiHquWumuS5ieS4muWKoeWRveWQjeagh+W/", 
            "lwoKDQoFBA8CCAQSBOsBBAwKDQoFBA8CCAUSBOsBDRMKDQoFBA8CCAESBOsB", 
            "FCUKDQoFBA8CCAMSBOsBNDUKDAoCBBASBu4BAPABAQoLCgMEEAESBO4BCBUK", 
            "JAoEBBACABIE7wEENiIW6Ieq5a6a5LmJ5Lia5Yqh6KeE5YiZCgoNCgUEEAIA", 
            "BBIE7wEEDAoNCgUEEAIABhIE7wENGQoNCgUEEAIAARIE7wEaJwoNCgUEEAIA", 
            "AxIE7wE0NQoMCgIEERIG8gEA9wEBCgsKAwQRARIE8gEIFgobCgQEEQIAEgT0", 
            "AQQmIg3mmK/lkKblkK/nlKgKCg0KBQQRAgAEEgT0AQQMCg0KBQQRAgAFEgT0", 
            "AQ0RCg0KBQQRAgABEgT0ARIYCg0KBQQRAgADEgT0ASQlCnQKBAQRAgESBPUB", 
            "BCYiZmpz5YaF5a6555qEbWQ15YC877yM55So5LqO6aqM6K+BanPmmK/lkKbl", 
            "rozmlbTvvIzlv4XpobttZDXmoKHpqozpgJrov4fmiY3og73oh6rliqjltYzl", 
            "haXliLBodG1s5paH5qGjCgoNCgUEEQIBBBIE9QEEDAoNCgUEEQIBBRIE9QEN", 
            "EwoNCgUEEQIBARIE9QEUGQoNCgUEEQIBAxIE9QEkJQo3CgQEEQICEgT2AQQm", 
            "IinltYzlhaVqc+WGheWuue+8jDxzY3JpcHQ+5YaF5a65PC9zY3JpcHQ+CgoN", 
            "CgUEEQICBBIE9gEEDAoNCgUEEQICBRIE9gENEwoNCgUEEQICARIE9gEUFgoN", 
            "CgUEEQICAxIE9gEkJQohCgIEEhIG+gEAgQIBGhNhZ2VudCBjb25maWfor7fm", 
            "sYIKCgsKAwQSARIE+gEIEQpACgQEEgIAEgT7AQQuIjLnrKzkuIDmrKFjb25m", 
            "aWfor7fmsYLvvIzpnIDopoHluKbkuIpDb250YWluZXJJbmZvCgoNCgUEEgIA", 
            "BBIE+wEEDAoNCgUEEgIABhIE+wENGgoNCgUEEgIAARIE+wEbKAoNCgUEEgIA", 
            "AxIE+wEsLQo7CgQEEgIBEgT8AQQuIi3nrKzkuIDmrKFjb25maWfor7fmsYLv", 
            "vIzpnIDopoHluKbkuIpOb2RlSW5mbwoKDQoFBBICAQQSBPwBBAwKDQoFBBIC", 
            "AQYSBPwBDRUKDQoFBBICAQESBPwBFh4KDQoFBBICAQMSBPwBLC0KGgoEBBIC", 
            "AhIE/QEELiIMYWdlbnTkv6Hmga8KCg0KBQQSAgIEEgT9AQQMCg0KBQQSAgIG", 
            "EgT9AQ0aCg0KBQQSAgIBEgT9ARsjCg0KBQQSAgIDEgT9ASwtCk8KBAQSAgMS", 
            "BP4BBC4iQeacgOWQjuS4gOasoWNvbnRyb2xsZXLov5Tlm57nmoTlvZPliY3m", 
            "l7bpl7TvvIznlKjkuo7ml7bpl7TlkIzmraUKCg0KBQQSAgMEEgT+AQQMCg0K", 
            "BQQSAgMFEgT+AQ0TCg0KBQQSAgMBEgT+ARQiCg0KBQQSAgMDEgT+ASwtCl4K", 
            "BAQSAgQSBP8BBC4iUOacgOWQjuS4gOasoWNvbnRyb2xsZXLov5Tlm57nmoTm", 
            "lbDmja7lupPmnIDlkI7kv67mlLnml7bpl7TvvIznlKjkuo7phY3nva7lkIzm", 
            "raUKCg0KBQQSAgQEEgT/AQQMCg0KBQQSAgQFEgT/AQ0TCg0KBQQSAgQBEgT/", 
            "ARQiCg0KBQQSAgQDEgT/ASwtCiwKBAQSAgUSBIACBC4iHuacgOWQjuS4gOas", 
            "oei/lOWbnmpz55qEbWQ15YC8CgoNCgUEEgIFBBIEgAIEDAoNCgUEEgIFBRIE", 
            "gAINEwoNCgUEEgIFARIEgAIUHQoNCgUEEgIFAxIEgAIsLQohCgIEExIGhAIA", 
            "lAIBGhNhZ2VudCBjb25maWflk43lupQKCgsKAwQTARIEhAIIEgoXCgQEEwIA", 
            "EgSFAgQ6IglhZ2VudCBpZAoKDQoFBBMCAAQSBIUCBAwKDQoFBBMCAAYSBIUC", 
            "DRoKDQoFBBMCAAESBIUCGyMKDQoFBBMCAAMSBIUCODkKQwoEBBMCARIEhgIE", 
            "OiI1Y29udHJvbGxlcui/lOWbnueahOW9k+WJjeaXtumXtO+8jOeUqOS6juaX", 
            "tumXtOWQjOatpQoKDQoFBBMCAQQSBIYCBAwKDQoFBBMCAQUSBIYCDRMKDQoF", 
            "BBMCAQESBIYCFB4KDQoFBBMCAQMSBIYCODkKIAoEBBMCAhIEhwIEOiIS5piv", 
            "5ZCm5byA5ZCvYWdlbnQKCg0KBQQTAgIEEgSHAgQMCg0KBQQTAgIFEgSHAg0R", 
            "Cg0KBQQTAgIBEgSHAhIYCg0KBQQTAgIDEgSHAjg5ChsKBAQTAgMSBIgCBDoi", 
            "DemUmeivr+mFjee9rgoKDQoFBBMCAwQSBIgCBAwKDQoFBBMCAwYSBIgCDRgK", 
            "DQoFBBMCAwESBIgCGSIKDQoFBBMCAwMSBIgCODkKHwoEBBMCBBIEiQIEOiIR", 
            "Y2FsbCBncmFwaOmFjee9rgoKDQoFBBMCBAQSBIkCBAwKDQoFBBMCBAYSBIkC", 
            "DRwKDQoFBBMCBAESBIkCHSwKDQoFBBMCBAMSBIkCODkKGwoEBBMCBRIEigIE", 
            "OiIN5bqU55So6YWN572uCgoNCgUEEwIFBBIEigIEDAoNCgUEEwIFBhIEigIN", 
            "FgoNCgUEEwIFARIEigIYIQoNCgUEEwIFAxIEigI4OQonCgQEEwIGEgSLAgQ6", 
            "IhnlupTnlKjmlbDmja7mlLbpm4bphY3nva4KCg0KBQQTAgYEEgSLAgQMCg0K", 
            "BQQTAgYGEgSLAg0eCg0KBQQTAgYBEgSLAh8uCg0KBQQTAgYDEgSLAjg5CicK", 
            "BAQTAgcSBIwCBDoiGeW/q+eFp+aVsOaNrumHh+mbhumFjee9rgoKDQoFBBMC", 
            "BwQSBIwCBAwKDQoFBBMCBwYSBIwCDSMKDQoFBBMCBwESBIwCJDcKDQoFBBMC", 
            "BwMSBIwCODkKIQoEBBMCCBIEjQIEOiIT5Lia5Yqh55u45YWz6YWN572uCgoN", 
            "CgUEEwIIBBIEjQIEDAoNCgUEEwIIBhIEjQINFQoNCgUEEwIIARIEjQIXHwoN", 
            "CgUEEwIIAxIEjQI4OQonCgQEEwIJEgSOAgQ7Ihlzb2NrZXTov5znqIvosIPn", 
            "lKjphY3nva4KCg0KBQQTAgkEEgSOAgQMCg0KBQQTAgkGEgSOAg0ZCg0KBQQT", 
            "AgkBEgSOAhomCg0KBQQTAgkDEgSOAjg6CiEKBAQTAgoSBI8CBDsiE+e6v+eo", 
            "i+WJluaekOS7u+WKoQoKDQoFBBMCCgQSBI8CBAwKDQoFBBMCCgYSBI8CDRsK", 
            "DQoFBBMCCgESBI8CHCoKDQoFBBMCCgMSBI8CODoKJAoEBBMCCxIEkAIEOyIW", 
            "6Ieq5a6a5LmJ5Lia5Yqh6KeE5YiZCgoNCgUEEwILBBIEkAIEDAoNCgUEEwIL", 
            "BhIEkAINGgoNCgUEEwILARIEkAIbKAoNCgUEEwILAxIEkAI4OgpSCgQEEwIM", 
            "EgSRAgQ7IkRjb250cm9sbGVy6L+U5Zue55qE5pWw5o2u5bqT5pyA5ZCO5L+u", 
            "5pS55pe26Ze077yM55So5LqO6YWN572u5ZCM5q2lCgoNCgUEEwIMBBIEkQIE", 
            "DAoNCgUEEwIMBRIEkQINEwoNCgUEEwIMARIEkQIUHgoNCgUEEwIMAxIEkQI4", 
            "OgojCgQEEwINEgSSAgQ7IhXoh6rliqjltYzlhaVqc+mFjee9rgoKDQoFBBMC", 
            "DQQSBJICBAwKDQoFBBMCDQYSBJICDRsKDQoFBBMCDQESBJICHCQKDQoFBBMC", 
            "DQMSBJICODoKhAEKBAQTAg4SBJMCBDsidmNvbnRyb2xsZXLov5Tlm550cnVl", 
            "55qE5pe25YCZYWdlbnTpnIDopoHlj5HpgIHlrozmlbTnmoRjb25maWdSZXHv", 
            "vIzph43mlrDms6jlhozvvIjnlKjkuo7liKDpmaRhZ2VudOWQjumHjeaWsOaz", 
            "qOWGjO+8iQoKDQoFBBMCDgQSBJMCBAwKDQoFBBMCDgUSBJMCDREKDQoFBBMC", 
          "DgESBJMCEhwKDQoFBBMCDgMSBJMCODo="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_ListenIPAndPort__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_ListenIPAndPort__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ListenIPAndPort, global::BonreePB.ListenIPAndPort.Builder>(internal__static_BonreePB_ListenIPAndPort__Descriptor,
                new string[] { "Ip", "Port", });
        internal__static_BonreePB_ContainerInfo__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_ContainerInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ContainerInfo, global::BonreePB.ContainerInfo.Builder>(internal__static_BonreePB_ContainerInfo__Descriptor,
                new string[] { "AppName", "ClusterName", "TierName", "AgentName", "AgentGUID", "AgentVersion", "AgentInstallTimestamp", "AgentInstallDir", "ProcessId", "Listens", "ContainerVersion", "ContainerInstallDir", "VMInfo", "VMStartupOptions", "VMSystemOptions", });
        internal__static_BonreePB_NodeInfo__Descriptor = Descriptor.MessageTypes[2];
        internal__static_BonreePB_NodeInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.NodeInfo, global::BonreePB.NodeInfo.Builder>(internal__static_BonreePB_NodeInfo__Descriptor,
                new string[] { "NodeGUID", "NodeName", "UniqueHost", "OSInfo", "EnvironmentVariables", "Ips", });
        internal__static_BonreePB_IgnoreException__Descriptor = Descriptor.MessageTypes[3];
        internal__static_BonreePB_IgnoreException__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.IgnoreException, global::BonreePB.IgnoreException.Builder>(internal__static_BonreePB_IgnoreException__Descriptor,
                new string[] { "FullClassName", });
        internal__static_BonreePB_IgnoreErrorMessage__Descriptor = Descriptor.MessageTypes[4];
        internal__static_BonreePB_IgnoreErrorMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.IgnoreErrorMessage, global::BonreePB.IgnoreErrorMessage.Builder>(internal__static_BonreePB_IgnoreErrorMessage__Descriptor,
                new string[] { "MatchMsg", });
        internal__static_BonreePB_ErrorConfig__Descriptor = Descriptor.MessageTypes[5];
        internal__static_BonreePB_ErrorConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ErrorConfig, global::BonreePB.ErrorConfig.Builder>(internal__static_BonreePB_ErrorConfig__Descriptor,
                new string[] { "JavaEnableDetectJavaLogging", "JavaEnableDetectLog4J", "JavaEnableDetectSLF4J", "EnableDefaultHTTPErrorCode", "DonetEnableDetectNLog", "DonetEnableDetectLog4Net", "DonetEnableDetectSystemTrace", "DonetEnableDetectEventLog", "MarkTransactionAsErrorOnErrorMessageLog", "IgnoreExceptions", "IgnoreErrMsg", });
        internal__static_BonreePB_CallGraphConfig__Descriptor = Descriptor.MessageTypes[6];
        internal__static_BonreePB_CallGraphConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.CallGraphConfig, global::BonreePB.CallGraphConfig.Builder>(internal__static_BonreePB_CallGraphConfig__Descriptor,
                new string[] { "MinMethodTime", "MinSQLQueryTime", "ExcludeNames", "IncludeNames", });
        internal__static_BonreePB_BusinessTrasactionNamingConfig__Descriptor = Descriptor.MessageTypes[7];
        internal__static_BonreePB_BusinessTrasactionNamingConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.BusinessTrasactionNamingConfig, global::BonreePB.BusinessTrasactionNamingConfig.Builder>(internal__static_BonreePB_BusinessTrasactionNamingConfig__Descriptor,
                new string[] { "Type", "Enable", "Properties", });
        internal__static_BonreePB_AppConfig__Descriptor = Descriptor.MessageTypes[8];
        internal__static_BonreePB_AppConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.AppConfig, global::BonreePB.AppConfig.Builder>(internal__static_BonreePB_AppConfig__Descriptor,
                new string[] { "InstrumentLevel", "BtThreshold", "BtThresholdSlowTimes", "BtThresholdVerySlowTimes", "SqlExeTimeThreshold", "SqlRecordType", "NosqlExeTimeThreshold", "RemoteCallExeTimeThreshold", "BtGetURISegmentType", "BtURISegments", "RemoteCallGetURISegmentType", "RemoteCallURISegments", "NamingConfigs", "EnableDataAggregate", "EnableAutoInjectBrowserJs", });
        internal__static_BonreePB_AppGathererConfig__Descriptor = Descriptor.MessageTypes[9];
        internal__static_BonreePB_AppGathererConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.AppGathererConfig, global::BonreePB.AppGathererConfig.Builder>(internal__static_BonreePB_AppGathererConfig__Descriptor,
                new string[] { "EnableTrackBT", "EnableCollectErrorAndException", "EnableTrackSQL", "EnableTrackNoSQL", "EnableTrackRemoteCall", "EnableTrackAsyncThread", "GathererPercent", });
        internal__static_BonreePB_MethodInfo__Descriptor = Descriptor.MessageTypes[10];
        internal__static_BonreePB_MethodInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.MethodInfo, global::BonreePB.MethodInfo.Builder>(internal__static_BonreePB_MethodInfo__Descriptor,
                new string[] { "ClassName", "MethodNames", });
        internal__static_BonreePB_SnapshotGathererConfig__Descriptor = Descriptor.MessageTypes[11];
        internal__static_BonreePB_SnapshotGathererConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SnapshotGathererConfig, global::BonreePB.SnapshotGathererConfig.Builder>(internal__static_BonreePB_SnapshotGathererConfig__Descriptor,
                new string[] { "ExceedThresholdPercent", "ExceedErrorPercent", "SnapshotCountPerMin", "SnapshotMin", "SnapshotInterval", "SnapshotTryTimesPerMin", "EnableAllSnapshot", "SnapshotPerMinPerTransaction", "HotspotMethods", "SnapshotPercent", });
        internal__static_BonreePB_BTConfig__Descriptor = Descriptor.MessageTypes[12];
        internal__static_BonreePB_BTConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.BTConfig, global::BonreePB.BTConfig.Builder>(internal__static_BonreePB_BTConfig__Descriptor,
                new string[] { "FilterURIPatterns", "SnapshotURIPatterns", "IncludeURIPatterns", });
        internal__static_BonreePB_SocketConfig__Descriptor = Descriptor.MessageTypes[13];
        internal__static_BonreePB_SocketConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.SocketConfig, global::BonreePB.SocketConfig.Builder>(internal__static_BonreePB_SocketConfig__Descriptor,
                new string[] { "EnableSocketMetric", "RemoteIps", "BtByteCount", });
        internal__static_BonreePB_ThreadDumpTask__Descriptor = Descriptor.MessageTypes[14];
        internal__static_BonreePB_ThreadDumpTask__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadDumpTask, global::BonreePB.ThreadDumpTask.Builder>(internal__static_BonreePB_ThreadDumpTask__Descriptor,
                new string[] { "Type", "TaskGUId", "DumpTime", "DumpInterval", });
        internal__static_BonreePB_CustomBTRule__Descriptor = Descriptor.MessageTypes[15];
        internal__static_BonreePB_CustomBTRule__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.CustomBTRule, global::BonreePB.CustomBTRule.Builder>(internal__static_BonreePB_CustomBTRule__Descriptor,
                new string[] { "RuleName", "Enable", "Type", "ClassMatchType", "ClassNameMatchType", "ClassMatchStr", "MethodNameMatchTYpe", "MethodMatchStr", "CustomBtNameFlags", });
        internal__static_BonreePB_CustomBTRules__Descriptor = Descriptor.MessageTypes[16];
        internal__static_BonreePB_CustomBTRules__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.CustomBTRules, global::BonreePB.CustomBTRules.Builder>(internal__static_BonreePB_CustomBTRules__Descriptor,
                new string[] { "CustomBTRules_", });
        internal__static_BonreePB_InjectJSConfig__Descriptor = Descriptor.MessageTypes[17];
        internal__static_BonreePB_InjectJSConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.InjectJSConfig, global::BonreePB.InjectJSConfig.Builder>(internal__static_BonreePB_InjectJSConfig__Descriptor,
                new string[] { "Enable", "JsMd5", "Js", });
        internal__static_BonreePB_configReq__Descriptor = Descriptor.MessageTypes[18];
        internal__static_BonreePB_configReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.configReq, global::BonreePB.configReq.Builder>(internal__static_BonreePB_configReq__Descriptor,
                new string[] { "ContainerInfo", "NodeInfo", "AgentIDS", "LastConfigTime", "LastModifyTime", "LastJsMd5", });
        internal__static_BonreePB_configResp__Descriptor = Descriptor.MessageTypes[19];
        internal__static_BonreePB_configResp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.configResp, global::BonreePB.configResp.Builder>(internal__static_BonreePB_configResp__Descriptor,
                new string[] { "AgentIDS", "ConfigTime", "Enable", "ErrConfig", "CallgraphConfig", "AppConfig", "AppGatherConfig", "SnapshotGathererCfg", "BtConfig", "SocketConfig", "ThreadDumpTask", "CustomBTRules", "ModifyTime", "JsConfig", "ReRegAgent", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbAgent.RegisterAllExtensions(registry);
        global::BonreePB.PbBusinessTransaction.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbAgent.Descriptor, 
          global::BonreePB.PbBusinessTransaction.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum InstrumentationLevel {
    PRODUCTION = 1,
    DEVELOPMENT = 2,
  }
  
  public enum SQLRecordType {
    SQL_RT_CLOSE = 1,
    SQL_RT_OBSCURE = 2,
    SQL_RT_DETAIL = 3,
  }
  
  public enum GetURISegmentType {
    GET_URI_SEGMENT_TYPE_START = 1,
    GET_URI_SEGMENT_TYPE_END = 2,
    GET_URI_SEGMENT_TYPE_FULL = 3,
  }
  
  public enum ThreadDumpTaskType {
    THREAD_DUMP_TASK_NEW = 1,
    THREAD_DUMP_TASK_CANCLE = 2,
  }
  
  public enum StringMatchType {
    MATCH_STRING_TYPE_EQUALS = 1,
    MATCH_STRING_TYPE_STARTS_WITH = 2,
    MATCH_STRING_TYPE_ENDS_WITH = 3,
    MATCH_STRING_TYPE_CONTAINS = 4,
  }
  
  public enum ClassMatchType {
    MATCH_CLASS_WITH_EXACT_CLASS = 1,
    MATCH_CLASS_WITH_ANNOTATION = 2,
    MATCH_CLASS_WITH_SUPER_CLASS = 3,
    MATCH_CLASS_WITH_INTERFACE = 4,
  }
  
  public enum CustomBTNameType {
    CUSTOM_BT_NAME_TYPE_USE_RULE_NAME = 1,
    CUSTOM_BT_NAME_TYPE_USE_FULL_CLASS_NAME = 2,
    CUSTOM_BT_NAME_TYPE_USE_SIMPLE_CLASS_NAME = 4,
    CUSTOM_BT_NAME_TYPE_USE_METHOD_NAME = 8,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ListenIPAndPort : pb::GeneratedMessage<ListenIPAndPort, ListenIPAndPort.Builder> {
    private ListenIPAndPort() { }
    private static readonly ListenIPAndPort defaultInstance = new ListenIPAndPort().MakeReadOnly();
    private static readonly string[] _listenIPAndPortFieldNames = new string[] { "ip", "port" };
    private static readonly uint[] _listenIPAndPortFieldTags = new uint[] { 10, 16 };
    public static ListenIPAndPort DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ListenIPAndPort DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ListenIPAndPort ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ListenIPAndPort__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ListenIPAndPort, ListenIPAndPort.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ListenIPAndPort__FieldAccessorTable; }
    }
    
    public const int IpFieldNumber = 1;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public const int PortFieldNumber = 2;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint Port {
      get { return port_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _listenIPAndPortFieldNames;
      if (hasIp) {
        output.WriteString(1, field_names[0], Ip);
      }
      if (hasPort) {
        output.WriteUInt32(2, field_names[1], Port);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Ip);
      }
      if (hasPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Port);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ListenIPAndPort ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListenIPAndPort ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListenIPAndPort ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ListenIPAndPort ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ListenIPAndPort ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListenIPAndPort ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ListenIPAndPort ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ListenIPAndPort ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ListenIPAndPort ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ListenIPAndPort ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ListenIPAndPort MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ListenIPAndPort prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ListenIPAndPort, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ListenIPAndPort cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ListenIPAndPort result;
      
      private ListenIPAndPort PrepareBuilder() {
        if (resultIsReadOnly) {
          ListenIPAndPort original = result;
          result = new ListenIPAndPort();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ListenIPAndPort MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ListenIPAndPort.Descriptor; }
      }
      
      public override ListenIPAndPort DefaultInstanceForType {
        get { return global::BonreePB.ListenIPAndPort.DefaultInstance; }
      }
      
      public override ListenIPAndPort BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ListenIPAndPort) {
          return MergeFrom((ListenIPAndPort) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ListenIPAndPort other) {
        if (other == global::BonreePB.ListenIPAndPort.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIp) {
          Ip = other.Ip;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_listenIPAndPortFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _listenIPAndPortFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
            case 16: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
    }
    static ListenIPAndPort() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ContainerInfo : pb::GeneratedMessage<ContainerInfo, ContainerInfo.Builder> {
    private ContainerInfo() { }
    private static readonly ContainerInfo defaultInstance = new ContainerInfo().MakeReadOnly();
    private static readonly string[] _containerInfoFieldNames = new string[] { "VMInfo", "VMStartupOptions", "VMSystemOptions", "agentGUID", "agentInstallDir", "agentInstallTimestamp", "agentName", "agentVersion", "appName", "clusterName", "containerInstallDir", "containerVersion", "listens", "processId", "tierName" };
    private static readonly uint[] _containerInfoFieldTags = new uint[] { 106, 114, 122, 42, 66, 56, 34, 50, 10, 18, 98, 90, 82, 72, 26 };
    public static ContainerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContainerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContainerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ContainerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContainerInfo, ContainerInfo.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ContainerInfo__FieldAccessorTable; }
    }
    
    public const int AppNameFieldNumber = 1;
    private bool hasAppName;
    private string appName_ = "";
    public bool HasAppName {
      get { return hasAppName; }
    }
    public string AppName {
      get { return appName_; }
    }
    
    public const int ClusterNameFieldNumber = 2;
    private bool hasClusterName;
    private string clusterName_ = "";
    public bool HasClusterName {
      get { return hasClusterName; }
    }
    public string ClusterName {
      get { return clusterName_; }
    }
    
    public const int TierNameFieldNumber = 3;
    private bool hasTierName;
    private string tierName_ = "";
    public bool HasTierName {
      get { return hasTierName; }
    }
    public string TierName {
      get { return tierName_; }
    }
    
    public const int AgentNameFieldNumber = 4;
    private bool hasAgentName;
    private string agentName_ = "";
    public bool HasAgentName {
      get { return hasAgentName; }
    }
    public string AgentName {
      get { return agentName_; }
    }
    
    public const int AgentGUIDFieldNumber = 5;
    private bool hasAgentGUID;
    private string agentGUID_ = "";
    public bool HasAgentGUID {
      get { return hasAgentGUID; }
    }
    public string AgentGUID {
      get { return agentGUID_; }
    }
    
    public const int AgentVersionFieldNumber = 6;
    private bool hasAgentVersion;
    private string agentVersion_ = "";
    public bool HasAgentVersion {
      get { return hasAgentVersion; }
    }
    public string AgentVersion {
      get { return agentVersion_; }
    }
    
    public const int AgentInstallTimestampFieldNumber = 7;
    private bool hasAgentInstallTimestamp;
    private ulong agentInstallTimestamp_;
    public bool HasAgentInstallTimestamp {
      get { return hasAgentInstallTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong AgentInstallTimestamp {
      get { return agentInstallTimestamp_; }
    }
    
    public const int AgentInstallDirFieldNumber = 8;
    private bool hasAgentInstallDir;
    private string agentInstallDir_ = "";
    public bool HasAgentInstallDir {
      get { return hasAgentInstallDir; }
    }
    public string AgentInstallDir {
      get { return agentInstallDir_; }
    }
    
    public const int ProcessIdFieldNumber = 9;
    private bool hasProcessId;
    private uint processId_;
    public bool HasProcessId {
      get { return hasProcessId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ProcessId {
      get { return processId_; }
    }
    
    public const int ListensFieldNumber = 10;
    private pbc::PopsicleList<global::BonreePB.ListenIPAndPort> listens_ = new pbc::PopsicleList<global::BonreePB.ListenIPAndPort>();
    public scg::IList<global::BonreePB.ListenIPAndPort> ListensList {
      get { return listens_; }
    }
    public int ListensCount {
      get { return listens_.Count; }
    }
    public global::BonreePB.ListenIPAndPort GetListens(int index) {
      return listens_[index];
    }
    
    public const int ContainerVersionFieldNumber = 11;
    private bool hasContainerVersion;
    private string containerVersion_ = "";
    public bool HasContainerVersion {
      get { return hasContainerVersion; }
    }
    public string ContainerVersion {
      get { return containerVersion_; }
    }
    
    public const int ContainerInstallDirFieldNumber = 12;
    private bool hasContainerInstallDir;
    private string containerInstallDir_ = "";
    public bool HasContainerInstallDir {
      get { return hasContainerInstallDir; }
    }
    public string ContainerInstallDir {
      get { return containerInstallDir_; }
    }
    
    public const int VMInfoFieldNumber = 13;
    private bool hasVMInfo;
    private string vMInfo_ = "";
    public bool HasVMInfo {
      get { return hasVMInfo; }
    }
    public string VMInfo {
      get { return vMInfo_; }
    }
    
    public const int VMStartupOptionsFieldNumber = 14;
    private bool hasVMStartupOptions;
    private string vMStartupOptions_ = "";
    public bool HasVMStartupOptions {
      get { return hasVMStartupOptions; }
    }
    public string VMStartupOptions {
      get { return vMStartupOptions_; }
    }
    
    public const int VMSystemOptionsFieldNumber = 15;
    private bool hasVMSystemOptions;
    private string vMSystemOptions_ = "";
    public bool HasVMSystemOptions {
      get { return hasVMSystemOptions; }
    }
    public string VMSystemOptions {
      get { return vMSystemOptions_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _containerInfoFieldNames;
      if (hasAppName) {
        output.WriteString(1, field_names[8], AppName);
      }
      if (hasClusterName) {
        output.WriteString(2, field_names[9], ClusterName);
      }
      if (hasTierName) {
        output.WriteString(3, field_names[14], TierName);
      }
      if (hasAgentName) {
        output.WriteString(4, field_names[6], AgentName);
      }
      if (hasAgentGUID) {
        output.WriteString(5, field_names[3], AgentGUID);
      }
      if (hasAgentVersion) {
        output.WriteString(6, field_names[7], AgentVersion);
      }
      if (hasAgentInstallTimestamp) {
        output.WriteUInt64(7, field_names[5], AgentInstallTimestamp);
      }
      if (hasAgentInstallDir) {
        output.WriteString(8, field_names[4], AgentInstallDir);
      }
      if (hasProcessId) {
        output.WriteUInt32(9, field_names[13], ProcessId);
      }
      if (listens_.Count > 0) {
        output.WriteMessageArray(10, field_names[12], listens_);
      }
      if (hasContainerVersion) {
        output.WriteString(11, field_names[11], ContainerVersion);
      }
      if (hasContainerInstallDir) {
        output.WriteString(12, field_names[10], ContainerInstallDir);
      }
      if (hasVMInfo) {
        output.WriteString(13, field_names[0], VMInfo);
      }
      if (hasVMStartupOptions) {
        output.WriteString(14, field_names[1], VMStartupOptions);
      }
      if (hasVMSystemOptions) {
        output.WriteString(15, field_names[2], VMSystemOptions);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAppName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, AppName);
      }
      if (hasClusterName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ClusterName);
      }
      if (hasTierName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, TierName);
      }
      if (hasAgentName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, AgentName);
      }
      if (hasAgentGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(5, AgentGUID);
      }
      if (hasAgentVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(6, AgentVersion);
      }
      if (hasAgentInstallTimestamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, AgentInstallTimestamp);
      }
      if (hasAgentInstallDir) {
        size += pb::CodedOutputStream.ComputeStringSize(8, AgentInstallDir);
      }
      if (hasProcessId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, ProcessId);
      }
      foreach (global::BonreePB.ListenIPAndPort element in ListensList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      if (hasContainerVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(11, ContainerVersion);
      }
      if (hasContainerInstallDir) {
        size += pb::CodedOutputStream.ComputeStringSize(12, ContainerInstallDir);
      }
      if (hasVMInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(13, VMInfo);
      }
      if (hasVMStartupOptions) {
        size += pb::CodedOutputStream.ComputeStringSize(14, VMStartupOptions);
      }
      if (hasVMSystemOptions) {
        size += pb::CodedOutputStream.ComputeStringSize(15, VMSystemOptions);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ContainerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContainerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContainerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContainerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContainerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContainerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContainerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContainerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContainerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContainerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContainerInfo MakeReadOnly() {
      listens_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContainerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ContainerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContainerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContainerInfo result;
      
      private ContainerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ContainerInfo original = result;
          result = new ContainerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContainerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ContainerInfo.Descriptor; }
      }
      
      public override ContainerInfo DefaultInstanceForType {
        get { return global::BonreePB.ContainerInfo.DefaultInstance; }
      }
      
      public override ContainerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContainerInfo) {
          return MergeFrom((ContainerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContainerInfo other) {
        if (other == global::BonreePB.ContainerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAppName) {
          AppName = other.AppName;
        }
        if (other.HasClusterName) {
          ClusterName = other.ClusterName;
        }
        if (other.HasTierName) {
          TierName = other.TierName;
        }
        if (other.HasAgentName) {
          AgentName = other.AgentName;
        }
        if (other.HasAgentGUID) {
          AgentGUID = other.AgentGUID;
        }
        if (other.HasAgentVersion) {
          AgentVersion = other.AgentVersion;
        }
        if (other.HasAgentInstallTimestamp) {
          AgentInstallTimestamp = other.AgentInstallTimestamp;
        }
        if (other.HasAgentInstallDir) {
          AgentInstallDir = other.AgentInstallDir;
        }
        if (other.HasProcessId) {
          ProcessId = other.ProcessId;
        }
        if (other.listens_.Count != 0) {
          result.listens_.Add(other.listens_);
        }
        if (other.HasContainerVersion) {
          ContainerVersion = other.ContainerVersion;
        }
        if (other.HasContainerInstallDir) {
          ContainerInstallDir = other.ContainerInstallDir;
        }
        if (other.HasVMInfo) {
          VMInfo = other.VMInfo;
        }
        if (other.HasVMStartupOptions) {
          VMStartupOptions = other.VMStartupOptions;
        }
        if (other.HasVMSystemOptions) {
          VMSystemOptions = other.VMSystemOptions;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_containerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _containerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAppName = input.ReadString(ref result.appName_);
              break;
            }
            case 18: {
              result.hasClusterName = input.ReadString(ref result.clusterName_);
              break;
            }
            case 26: {
              result.hasTierName = input.ReadString(ref result.tierName_);
              break;
            }
            case 34: {
              result.hasAgentName = input.ReadString(ref result.agentName_);
              break;
            }
            case 42: {
              result.hasAgentGUID = input.ReadString(ref result.agentGUID_);
              break;
            }
            case 50: {
              result.hasAgentVersion = input.ReadString(ref result.agentVersion_);
              break;
            }
            case 56: {
              result.hasAgentInstallTimestamp = input.ReadUInt64(ref result.agentInstallTimestamp_);
              break;
            }
            case 66: {
              result.hasAgentInstallDir = input.ReadString(ref result.agentInstallDir_);
              break;
            }
            case 72: {
              result.hasProcessId = input.ReadUInt32(ref result.processId_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.listens_, global::BonreePB.ListenIPAndPort.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              result.hasContainerVersion = input.ReadString(ref result.containerVersion_);
              break;
            }
            case 98: {
              result.hasContainerInstallDir = input.ReadString(ref result.containerInstallDir_);
              break;
            }
            case 106: {
              result.hasVMInfo = input.ReadString(ref result.vMInfo_);
              break;
            }
            case 114: {
              result.hasVMStartupOptions = input.ReadString(ref result.vMStartupOptions_);
              break;
            }
            case 122: {
              result.hasVMSystemOptions = input.ReadString(ref result.vMSystemOptions_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAppName {
        get { return result.hasAppName; }
      }
      public string AppName {
        get { return result.AppName; }
        set { SetAppName(value); }
      }
      public Builder SetAppName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppName = true;
        result.appName_ = value;
        return this;
      }
      public Builder ClearAppName() {
        PrepareBuilder();
        result.hasAppName = false;
        result.appName_ = "";
        return this;
      }
      
      public bool HasClusterName {
        get { return result.hasClusterName; }
      }
      public string ClusterName {
        get { return result.ClusterName; }
        set { SetClusterName(value); }
      }
      public Builder SetClusterName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClusterName = true;
        result.clusterName_ = value;
        return this;
      }
      public Builder ClearClusterName() {
        PrepareBuilder();
        result.hasClusterName = false;
        result.clusterName_ = "";
        return this;
      }
      
      public bool HasTierName {
        get { return result.hasTierName; }
      }
      public string TierName {
        get { return result.TierName; }
        set { SetTierName(value); }
      }
      public Builder SetTierName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTierName = true;
        result.tierName_ = value;
        return this;
      }
      public Builder ClearTierName() {
        PrepareBuilder();
        result.hasTierName = false;
        result.tierName_ = "";
        return this;
      }
      
      public bool HasAgentName {
        get { return result.hasAgentName; }
      }
      public string AgentName {
        get { return result.AgentName; }
        set { SetAgentName(value); }
      }
      public Builder SetAgentName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentName = true;
        result.agentName_ = value;
        return this;
      }
      public Builder ClearAgentName() {
        PrepareBuilder();
        result.hasAgentName = false;
        result.agentName_ = "";
        return this;
      }
      
      public bool HasAgentGUID {
        get { return result.hasAgentGUID; }
      }
      public string AgentGUID {
        get { return result.AgentGUID; }
        set { SetAgentGUID(value); }
      }
      public Builder SetAgentGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentGUID = true;
        result.agentGUID_ = value;
        return this;
      }
      public Builder ClearAgentGUID() {
        PrepareBuilder();
        result.hasAgentGUID = false;
        result.agentGUID_ = "";
        return this;
      }
      
      public bool HasAgentVersion {
        get { return result.hasAgentVersion; }
      }
      public string AgentVersion {
        get { return result.AgentVersion; }
        set { SetAgentVersion(value); }
      }
      public Builder SetAgentVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentVersion = true;
        result.agentVersion_ = value;
        return this;
      }
      public Builder ClearAgentVersion() {
        PrepareBuilder();
        result.hasAgentVersion = false;
        result.agentVersion_ = "";
        return this;
      }
      
      public bool HasAgentInstallTimestamp {
        get { return result.hasAgentInstallTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong AgentInstallTimestamp {
        get { return result.AgentInstallTimestamp; }
        set { SetAgentInstallTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAgentInstallTimestamp(ulong value) {
        PrepareBuilder();
        result.hasAgentInstallTimestamp = true;
        result.agentInstallTimestamp_ = value;
        return this;
      }
      public Builder ClearAgentInstallTimestamp() {
        PrepareBuilder();
        result.hasAgentInstallTimestamp = false;
        result.agentInstallTimestamp_ = 0UL;
        return this;
      }
      
      public bool HasAgentInstallDir {
        get { return result.hasAgentInstallDir; }
      }
      public string AgentInstallDir {
        get { return result.AgentInstallDir; }
        set { SetAgentInstallDir(value); }
      }
      public Builder SetAgentInstallDir(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentInstallDir = true;
        result.agentInstallDir_ = value;
        return this;
      }
      public Builder ClearAgentInstallDir() {
        PrepareBuilder();
        result.hasAgentInstallDir = false;
        result.agentInstallDir_ = "";
        return this;
      }
      
      public bool HasProcessId {
        get { return result.hasProcessId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ProcessId {
        get { return result.ProcessId; }
        set { SetProcessId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProcessId(uint value) {
        PrepareBuilder();
        result.hasProcessId = true;
        result.processId_ = value;
        return this;
      }
      public Builder ClearProcessId() {
        PrepareBuilder();
        result.hasProcessId = false;
        result.processId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.ListenIPAndPort> ListensList {
        get { return PrepareBuilder().listens_; }
      }
      public int ListensCount {
        get { return result.ListensCount; }
      }
      public global::BonreePB.ListenIPAndPort GetListens(int index) {
        return result.GetListens(index);
      }
      public Builder SetListens(int index, global::BonreePB.ListenIPAndPort value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.listens_[index] = value;
        return this;
      }
      public Builder SetListens(int index, global::BonreePB.ListenIPAndPort.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.listens_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddListens(global::BonreePB.ListenIPAndPort value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.listens_.Add(value);
        return this;
      }
      public Builder AddListens(global::BonreePB.ListenIPAndPort.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.listens_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeListens(scg::IEnumerable<global::BonreePB.ListenIPAndPort> values) {
        PrepareBuilder();
        result.listens_.Add(values);
        return this;
      }
      public Builder ClearListens() {
        PrepareBuilder();
        result.listens_.Clear();
        return this;
      }
      
      public bool HasContainerVersion {
        get { return result.hasContainerVersion; }
      }
      public string ContainerVersion {
        get { return result.ContainerVersion; }
        set { SetContainerVersion(value); }
      }
      public Builder SetContainerVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContainerVersion = true;
        result.containerVersion_ = value;
        return this;
      }
      public Builder ClearContainerVersion() {
        PrepareBuilder();
        result.hasContainerVersion = false;
        result.containerVersion_ = "";
        return this;
      }
      
      public bool HasContainerInstallDir {
        get { return result.hasContainerInstallDir; }
      }
      public string ContainerInstallDir {
        get { return result.ContainerInstallDir; }
        set { SetContainerInstallDir(value); }
      }
      public Builder SetContainerInstallDir(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContainerInstallDir = true;
        result.containerInstallDir_ = value;
        return this;
      }
      public Builder ClearContainerInstallDir() {
        PrepareBuilder();
        result.hasContainerInstallDir = false;
        result.containerInstallDir_ = "";
        return this;
      }
      
      public bool HasVMInfo {
        get { return result.hasVMInfo; }
      }
      public string VMInfo {
        get { return result.VMInfo; }
        set { SetVMInfo(value); }
      }
      public Builder SetVMInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVMInfo = true;
        result.vMInfo_ = value;
        return this;
      }
      public Builder ClearVMInfo() {
        PrepareBuilder();
        result.hasVMInfo = false;
        result.vMInfo_ = "";
        return this;
      }
      
      public bool HasVMStartupOptions {
        get { return result.hasVMStartupOptions; }
      }
      public string VMStartupOptions {
        get { return result.VMStartupOptions; }
        set { SetVMStartupOptions(value); }
      }
      public Builder SetVMStartupOptions(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVMStartupOptions = true;
        result.vMStartupOptions_ = value;
        return this;
      }
      public Builder ClearVMStartupOptions() {
        PrepareBuilder();
        result.hasVMStartupOptions = false;
        result.vMStartupOptions_ = "";
        return this;
      }
      
      public bool HasVMSystemOptions {
        get { return result.hasVMSystemOptions; }
      }
      public string VMSystemOptions {
        get { return result.VMSystemOptions; }
        set { SetVMSystemOptions(value); }
      }
      public Builder SetVMSystemOptions(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVMSystemOptions = true;
        result.vMSystemOptions_ = value;
        return this;
      }
      public Builder ClearVMSystemOptions() {
        PrepareBuilder();
        result.hasVMSystemOptions = false;
        result.vMSystemOptions_ = "";
        return this;
      }
    }
    static ContainerInfo() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NodeInfo : pb::GeneratedMessage<NodeInfo, NodeInfo.Builder> {
    private NodeInfo() { }
    private static readonly NodeInfo defaultInstance = new NodeInfo().MakeReadOnly();
    private static readonly string[] _nodeInfoFieldNames = new string[] { "OSInfo", "environmentVariables", "ips", "nodeGUID", "nodeName", "uniqueHost" };
    private static readonly uint[] _nodeInfoFieldTags = new uint[] { 34, 42, 50, 10, 18, 26 };
    public static NodeInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NodeInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NodeInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_NodeInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NodeInfo, NodeInfo.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_NodeInfo__FieldAccessorTable; }
    }
    
    public const int NodeGUIDFieldNumber = 1;
    private bool hasNodeGUID;
    private string nodeGUID_ = "";
    public bool HasNodeGUID {
      get { return hasNodeGUID; }
    }
    public string NodeGUID {
      get { return nodeGUID_; }
    }
    
    public const int NodeNameFieldNumber = 2;
    private bool hasNodeName;
    private string nodeName_ = "";
    public bool HasNodeName {
      get { return hasNodeName; }
    }
    public string NodeName {
      get { return nodeName_; }
    }
    
    public const int UniqueHostFieldNumber = 3;
    private bool hasUniqueHost;
    private string uniqueHost_ = "";
    public bool HasUniqueHost {
      get { return hasUniqueHost; }
    }
    public string UniqueHost {
      get { return uniqueHost_; }
    }
    
    public const int OSInfoFieldNumber = 4;
    private bool hasOSInfo;
    private string oSInfo_ = "";
    public bool HasOSInfo {
      get { return hasOSInfo; }
    }
    public string OSInfo {
      get { return oSInfo_; }
    }
    
    public const int EnvironmentVariablesFieldNumber = 5;
    private bool hasEnvironmentVariables;
    private string environmentVariables_ = "";
    public bool HasEnvironmentVariables {
      get { return hasEnvironmentVariables; }
    }
    public string EnvironmentVariables {
      get { return environmentVariables_; }
    }
    
    public const int IpsFieldNumber = 6;
    private pbc::PopsicleList<string> ips_ = new pbc::PopsicleList<string>();
    public scg::IList<string> IpsList {
      get { return pbc::Lists.AsReadOnly(ips_); }
    }
    public int IpsCount {
      get { return ips_.Count; }
    }
    public string GetIps(int index) {
      return ips_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _nodeInfoFieldNames;
      if (hasNodeGUID) {
        output.WriteString(1, field_names[3], NodeGUID);
      }
      if (hasNodeName) {
        output.WriteString(2, field_names[4], NodeName);
      }
      if (hasUniqueHost) {
        output.WriteString(3, field_names[5], UniqueHost);
      }
      if (hasOSInfo) {
        output.WriteString(4, field_names[0], OSInfo);
      }
      if (hasEnvironmentVariables) {
        output.WriteString(5, field_names[1], EnvironmentVariables);
      }
      if (ips_.Count > 0) {
        output.WriteStringArray(6, field_names[2], ips_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNodeGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(1, NodeGUID);
      }
      if (hasNodeName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, NodeName);
      }
      if (hasUniqueHost) {
        size += pb::CodedOutputStream.ComputeStringSize(3, UniqueHost);
      }
      if (hasOSInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(4, OSInfo);
      }
      if (hasEnvironmentVariables) {
        size += pb::CodedOutputStream.ComputeStringSize(5, EnvironmentVariables);
      }
      {
        int dataSize = 0;
        foreach (string element in IpsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * ips_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static NodeInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NodeInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NodeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NodeInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NodeInfo MakeReadOnly() {
      ips_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NodeInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NodeInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NodeInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NodeInfo result;
      
      private NodeInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          NodeInfo original = result;
          result = new NodeInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NodeInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.NodeInfo.Descriptor; }
      }
      
      public override NodeInfo DefaultInstanceForType {
        get { return global::BonreePB.NodeInfo.DefaultInstance; }
      }
      
      public override NodeInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NodeInfo) {
          return MergeFrom((NodeInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NodeInfo other) {
        if (other == global::BonreePB.NodeInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNodeGUID) {
          NodeGUID = other.NodeGUID;
        }
        if (other.HasNodeName) {
          NodeName = other.NodeName;
        }
        if (other.HasUniqueHost) {
          UniqueHost = other.UniqueHost;
        }
        if (other.HasOSInfo) {
          OSInfo = other.OSInfo;
        }
        if (other.HasEnvironmentVariables) {
          EnvironmentVariables = other.EnvironmentVariables;
        }
        if (other.ips_.Count != 0) {
          result.ips_.Add(other.ips_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nodeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nodeInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasNodeGUID = input.ReadString(ref result.nodeGUID_);
              break;
            }
            case 18: {
              result.hasNodeName = input.ReadString(ref result.nodeName_);
              break;
            }
            case 26: {
              result.hasUniqueHost = input.ReadString(ref result.uniqueHost_);
              break;
            }
            case 34: {
              result.hasOSInfo = input.ReadString(ref result.oSInfo_);
              break;
            }
            case 42: {
              result.hasEnvironmentVariables = input.ReadString(ref result.environmentVariables_);
              break;
            }
            case 50: {
              input.ReadStringArray(tag, field_name, result.ips_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNodeGUID {
        get { return result.hasNodeGUID; }
      }
      public string NodeGUID {
        get { return result.NodeGUID; }
        set { SetNodeGUID(value); }
      }
      public Builder SetNodeGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNodeGUID = true;
        result.nodeGUID_ = value;
        return this;
      }
      public Builder ClearNodeGUID() {
        PrepareBuilder();
        result.hasNodeGUID = false;
        result.nodeGUID_ = "";
        return this;
      }
      
      public bool HasNodeName {
        get { return result.hasNodeName; }
      }
      public string NodeName {
        get { return result.NodeName; }
        set { SetNodeName(value); }
      }
      public Builder SetNodeName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNodeName = true;
        result.nodeName_ = value;
        return this;
      }
      public Builder ClearNodeName() {
        PrepareBuilder();
        result.hasNodeName = false;
        result.nodeName_ = "";
        return this;
      }
      
      public bool HasUniqueHost {
        get { return result.hasUniqueHost; }
      }
      public string UniqueHost {
        get { return result.UniqueHost; }
        set { SetUniqueHost(value); }
      }
      public Builder SetUniqueHost(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUniqueHost = true;
        result.uniqueHost_ = value;
        return this;
      }
      public Builder ClearUniqueHost() {
        PrepareBuilder();
        result.hasUniqueHost = false;
        result.uniqueHost_ = "";
        return this;
      }
      
      public bool HasOSInfo {
        get { return result.hasOSInfo; }
      }
      public string OSInfo {
        get { return result.OSInfo; }
        set { SetOSInfo(value); }
      }
      public Builder SetOSInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOSInfo = true;
        result.oSInfo_ = value;
        return this;
      }
      public Builder ClearOSInfo() {
        PrepareBuilder();
        result.hasOSInfo = false;
        result.oSInfo_ = "";
        return this;
      }
      
      public bool HasEnvironmentVariables {
        get { return result.hasEnvironmentVariables; }
      }
      public string EnvironmentVariables {
        get { return result.EnvironmentVariables; }
        set { SetEnvironmentVariables(value); }
      }
      public Builder SetEnvironmentVariables(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnvironmentVariables = true;
        result.environmentVariables_ = value;
        return this;
      }
      public Builder ClearEnvironmentVariables() {
        PrepareBuilder();
        result.hasEnvironmentVariables = false;
        result.environmentVariables_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> IpsList {
        get { return PrepareBuilder().ips_; }
      }
      public int IpsCount {
        get { return result.IpsCount; }
      }
      public string GetIps(int index) {
        return result.GetIps(index);
      }
      public Builder SetIps(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ips_[index] = value;
        return this;
      }
      public Builder AddIps(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ips_.Add(value);
        return this;
      }
      public Builder AddRangeIps(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.ips_.Add(values);
        return this;
      }
      public Builder ClearIps() {
        PrepareBuilder();
        result.ips_.Clear();
        return this;
      }
    }
    static NodeInfo() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IgnoreException : pb::GeneratedMessage<IgnoreException, IgnoreException.Builder> {
    private IgnoreException() { }
    private static readonly IgnoreException defaultInstance = new IgnoreException().MakeReadOnly();
    private static readonly string[] _ignoreExceptionFieldNames = new string[] { "fullClassName" };
    private static readonly uint[] _ignoreExceptionFieldTags = new uint[] { 10 };
    public static IgnoreException DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IgnoreException DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IgnoreException ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_IgnoreException__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IgnoreException, IgnoreException.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_IgnoreException__FieldAccessorTable; }
    }
    
    public const int FullClassNameFieldNumber = 1;
    private bool hasFullClassName;
    private string fullClassName_ = "";
    public bool HasFullClassName {
      get { return hasFullClassName; }
    }
    public string FullClassName {
      get { return fullClassName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _ignoreExceptionFieldNames;
      if (hasFullClassName) {
        output.WriteString(1, field_names[0], FullClassName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFullClassName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, FullClassName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IgnoreException ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IgnoreException ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IgnoreException ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IgnoreException ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IgnoreException ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IgnoreException ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IgnoreException ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IgnoreException ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IgnoreException ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IgnoreException ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IgnoreException MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IgnoreException prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IgnoreException, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IgnoreException cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IgnoreException result;
      
      private IgnoreException PrepareBuilder() {
        if (resultIsReadOnly) {
          IgnoreException original = result;
          result = new IgnoreException();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IgnoreException MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.IgnoreException.Descriptor; }
      }
      
      public override IgnoreException DefaultInstanceForType {
        get { return global::BonreePB.IgnoreException.DefaultInstance; }
      }
      
      public override IgnoreException BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IgnoreException) {
          return MergeFrom((IgnoreException) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IgnoreException other) {
        if (other == global::BonreePB.IgnoreException.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFullClassName) {
          FullClassName = other.FullClassName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ignoreExceptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ignoreExceptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFullClassName = input.ReadString(ref result.fullClassName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFullClassName {
        get { return result.hasFullClassName; }
      }
      public string FullClassName {
        get { return result.FullClassName; }
        set { SetFullClassName(value); }
      }
      public Builder SetFullClassName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFullClassName = true;
        result.fullClassName_ = value;
        return this;
      }
      public Builder ClearFullClassName() {
        PrepareBuilder();
        result.hasFullClassName = false;
        result.fullClassName_ = "";
        return this;
      }
    }
    static IgnoreException() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IgnoreErrorMessage : pb::GeneratedMessage<IgnoreErrorMessage, IgnoreErrorMessage.Builder> {
    private IgnoreErrorMessage() { }
    private static readonly IgnoreErrorMessage defaultInstance = new IgnoreErrorMessage().MakeReadOnly();
    private static readonly string[] _ignoreErrorMessageFieldNames = new string[] { "matchMsg" };
    private static readonly uint[] _ignoreErrorMessageFieldTags = new uint[] { 10 };
    public static IgnoreErrorMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IgnoreErrorMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IgnoreErrorMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_IgnoreErrorMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IgnoreErrorMessage, IgnoreErrorMessage.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_IgnoreErrorMessage__FieldAccessorTable; }
    }
    
    public const int MatchMsgFieldNumber = 1;
    private bool hasMatchMsg;
    private string matchMsg_ = "";
    public bool HasMatchMsg {
      get { return hasMatchMsg; }
    }
    public string MatchMsg {
      get { return matchMsg_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _ignoreErrorMessageFieldNames;
      if (hasMatchMsg) {
        output.WriteString(1, field_names[0], MatchMsg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMatchMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MatchMsg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IgnoreErrorMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IgnoreErrorMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IgnoreErrorMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IgnoreErrorMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IgnoreErrorMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IgnoreErrorMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IgnoreErrorMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IgnoreErrorMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IgnoreErrorMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IgnoreErrorMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IgnoreErrorMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IgnoreErrorMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IgnoreErrorMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IgnoreErrorMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IgnoreErrorMessage result;
      
      private IgnoreErrorMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          IgnoreErrorMessage original = result;
          result = new IgnoreErrorMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IgnoreErrorMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.IgnoreErrorMessage.Descriptor; }
      }
      
      public override IgnoreErrorMessage DefaultInstanceForType {
        get { return global::BonreePB.IgnoreErrorMessage.DefaultInstance; }
      }
      
      public override IgnoreErrorMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IgnoreErrorMessage) {
          return MergeFrom((IgnoreErrorMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IgnoreErrorMessage other) {
        if (other == global::BonreePB.IgnoreErrorMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMatchMsg) {
          MatchMsg = other.MatchMsg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ignoreErrorMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ignoreErrorMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMatchMsg = input.ReadString(ref result.matchMsg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMatchMsg {
        get { return result.hasMatchMsg; }
      }
      public string MatchMsg {
        get { return result.MatchMsg; }
        set { SetMatchMsg(value); }
      }
      public Builder SetMatchMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMatchMsg = true;
        result.matchMsg_ = value;
        return this;
      }
      public Builder ClearMatchMsg() {
        PrepareBuilder();
        result.hasMatchMsg = false;
        result.matchMsg_ = "";
        return this;
      }
    }
    static IgnoreErrorMessage() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorConfig : pb::GeneratedMessage<ErrorConfig, ErrorConfig.Builder> {
    private ErrorConfig() { }
    private static readonly ErrorConfig defaultInstance = new ErrorConfig().MakeReadOnly();
    private static readonly string[] _errorConfigFieldNames = new string[] { "donetEnableDetectEventLog", "donetEnableDetectLog4Net", "donetEnableDetectNLog", "donetEnableDetectSystemTrace", "enableDefaultHTTPErrorCode", "ignoreErrMsg", "ignoreExceptions", "javaEnableDetectJavaLogging", "javaEnableDetectLog4j", "javaEnableDetectSLF4j", "markTransactionAsErrorOnErrorMessageLog" };
    private static readonly uint[] _errorConfigFieldTags = new uint[] { 64, 48, 40, 56, 32, 90, 82, 8, 16, 24, 72 };
    public static ErrorConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ErrorConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ErrorConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorConfig, ErrorConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ErrorConfig__FieldAccessorTable; }
    }
    
    public const int JavaEnableDetectJavaLoggingFieldNumber = 1;
    private bool hasJavaEnableDetectJavaLogging;
    private bool javaEnableDetectJavaLogging_;
    public bool HasJavaEnableDetectJavaLogging {
      get { return hasJavaEnableDetectJavaLogging; }
    }
    public bool JavaEnableDetectJavaLogging {
      get { return javaEnableDetectJavaLogging_; }
    }
    
    public const int JavaEnableDetectLog4JFieldNumber = 2;
    private bool hasJavaEnableDetectLog4J;
    private bool javaEnableDetectLog4J_;
    public bool HasJavaEnableDetectLog4J {
      get { return hasJavaEnableDetectLog4J; }
    }
    public bool JavaEnableDetectLog4J {
      get { return javaEnableDetectLog4J_; }
    }
    
    public const int JavaEnableDetectSLF4JFieldNumber = 3;
    private bool hasJavaEnableDetectSLF4J;
    private bool javaEnableDetectSLF4J_;
    public bool HasJavaEnableDetectSLF4J {
      get { return hasJavaEnableDetectSLF4J; }
    }
    public bool JavaEnableDetectSLF4J {
      get { return javaEnableDetectSLF4J_; }
    }
    
    public const int EnableDefaultHTTPErrorCodeFieldNumber = 4;
    private bool hasEnableDefaultHTTPErrorCode;
    private bool enableDefaultHTTPErrorCode_;
    public bool HasEnableDefaultHTTPErrorCode {
      get { return hasEnableDefaultHTTPErrorCode; }
    }
    public bool EnableDefaultHTTPErrorCode {
      get { return enableDefaultHTTPErrorCode_; }
    }
    
    public const int DonetEnableDetectNLogFieldNumber = 5;
    private bool hasDonetEnableDetectNLog;
    private bool donetEnableDetectNLog_;
    public bool HasDonetEnableDetectNLog {
      get { return hasDonetEnableDetectNLog; }
    }
    public bool DonetEnableDetectNLog {
      get { return donetEnableDetectNLog_; }
    }
    
    public const int DonetEnableDetectLog4NetFieldNumber = 6;
    private bool hasDonetEnableDetectLog4Net;
    private bool donetEnableDetectLog4Net_;
    public bool HasDonetEnableDetectLog4Net {
      get { return hasDonetEnableDetectLog4Net; }
    }
    public bool DonetEnableDetectLog4Net {
      get { return donetEnableDetectLog4Net_; }
    }
    
    public const int DonetEnableDetectSystemTraceFieldNumber = 7;
    private bool hasDonetEnableDetectSystemTrace;
    private bool donetEnableDetectSystemTrace_;
    public bool HasDonetEnableDetectSystemTrace {
      get { return hasDonetEnableDetectSystemTrace; }
    }
    public bool DonetEnableDetectSystemTrace {
      get { return donetEnableDetectSystemTrace_; }
    }
    
    public const int DonetEnableDetectEventLogFieldNumber = 8;
    private bool hasDonetEnableDetectEventLog;
    private bool donetEnableDetectEventLog_;
    public bool HasDonetEnableDetectEventLog {
      get { return hasDonetEnableDetectEventLog; }
    }
    public bool DonetEnableDetectEventLog {
      get { return donetEnableDetectEventLog_; }
    }
    
    public const int MarkTransactionAsErrorOnErrorMessageLogFieldNumber = 9;
    private bool hasMarkTransactionAsErrorOnErrorMessageLog;
    private bool markTransactionAsErrorOnErrorMessageLog_;
    public bool HasMarkTransactionAsErrorOnErrorMessageLog {
      get { return hasMarkTransactionAsErrorOnErrorMessageLog; }
    }
    public bool MarkTransactionAsErrorOnErrorMessageLog {
      get { return markTransactionAsErrorOnErrorMessageLog_; }
    }
    
    public const int IgnoreExceptionsFieldNumber = 10;
    private pbc::PopsicleList<global::BonreePB.IgnoreException> ignoreExceptions_ = new pbc::PopsicleList<global::BonreePB.IgnoreException>();
    public scg::IList<global::BonreePB.IgnoreException> IgnoreExceptionsList {
      get { return ignoreExceptions_; }
    }
    public int IgnoreExceptionsCount {
      get { return ignoreExceptions_.Count; }
    }
    public global::BonreePB.IgnoreException GetIgnoreExceptions(int index) {
      return ignoreExceptions_[index];
    }
    
    public const int IgnoreErrMsgFieldNumber = 11;
    private pbc::PopsicleList<global::BonreePB.IgnoreErrorMessage> ignoreErrMsg_ = new pbc::PopsicleList<global::BonreePB.IgnoreErrorMessage>();
    public scg::IList<global::BonreePB.IgnoreErrorMessage> IgnoreErrMsgList {
      get { return ignoreErrMsg_; }
    }
    public int IgnoreErrMsgCount {
      get { return ignoreErrMsg_.Count; }
    }
    public global::BonreePB.IgnoreErrorMessage GetIgnoreErrMsg(int index) {
      return ignoreErrMsg_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorConfigFieldNames;
      if (hasJavaEnableDetectJavaLogging) {
        output.WriteBool(1, field_names[7], JavaEnableDetectJavaLogging);
      }
      if (hasJavaEnableDetectLog4J) {
        output.WriteBool(2, field_names[8], JavaEnableDetectLog4J);
      }
      if (hasJavaEnableDetectSLF4J) {
        output.WriteBool(3, field_names[9], JavaEnableDetectSLF4J);
      }
      if (hasEnableDefaultHTTPErrorCode) {
        output.WriteBool(4, field_names[4], EnableDefaultHTTPErrorCode);
      }
      if (hasDonetEnableDetectNLog) {
        output.WriteBool(5, field_names[2], DonetEnableDetectNLog);
      }
      if (hasDonetEnableDetectLog4Net) {
        output.WriteBool(6, field_names[1], DonetEnableDetectLog4Net);
      }
      if (hasDonetEnableDetectSystemTrace) {
        output.WriteBool(7, field_names[3], DonetEnableDetectSystemTrace);
      }
      if (hasDonetEnableDetectEventLog) {
        output.WriteBool(8, field_names[0], DonetEnableDetectEventLog);
      }
      if (hasMarkTransactionAsErrorOnErrorMessageLog) {
        output.WriteBool(9, field_names[10], MarkTransactionAsErrorOnErrorMessageLog);
      }
      if (ignoreExceptions_.Count > 0) {
        output.WriteMessageArray(10, field_names[6], ignoreExceptions_);
      }
      if (ignoreErrMsg_.Count > 0) {
        output.WriteMessageArray(11, field_names[5], ignoreErrMsg_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasJavaEnableDetectJavaLogging) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, JavaEnableDetectJavaLogging);
      }
      if (hasJavaEnableDetectLog4J) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, JavaEnableDetectLog4J);
      }
      if (hasJavaEnableDetectSLF4J) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, JavaEnableDetectSLF4J);
      }
      if (hasEnableDefaultHTTPErrorCode) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, EnableDefaultHTTPErrorCode);
      }
      if (hasDonetEnableDetectNLog) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, DonetEnableDetectNLog);
      }
      if (hasDonetEnableDetectLog4Net) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, DonetEnableDetectLog4Net);
      }
      if (hasDonetEnableDetectSystemTrace) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, DonetEnableDetectSystemTrace);
      }
      if (hasDonetEnableDetectEventLog) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, DonetEnableDetectEventLog);
      }
      if (hasMarkTransactionAsErrorOnErrorMessageLog) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, MarkTransactionAsErrorOnErrorMessageLog);
      }
      foreach (global::BonreePB.IgnoreException element in IgnoreExceptionsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      foreach (global::BonreePB.IgnoreErrorMessage element in IgnoreErrMsgList) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ErrorConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorConfig MakeReadOnly() {
      ignoreExceptions_.MakeReadOnly();
      ignoreErrMsg_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ErrorConfig result;
      
      private ErrorConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorConfig original = result;
          result = new ErrorConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ErrorConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ErrorConfig.Descriptor; }
      }
      
      public override ErrorConfig DefaultInstanceForType {
        get { return global::BonreePB.ErrorConfig.DefaultInstance; }
      }
      
      public override ErrorConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorConfig) {
          return MergeFrom((ErrorConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorConfig other) {
        if (other == global::BonreePB.ErrorConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasJavaEnableDetectJavaLogging) {
          JavaEnableDetectJavaLogging = other.JavaEnableDetectJavaLogging;
        }
        if (other.HasJavaEnableDetectLog4J) {
          JavaEnableDetectLog4J = other.JavaEnableDetectLog4J;
        }
        if (other.HasJavaEnableDetectSLF4J) {
          JavaEnableDetectSLF4J = other.JavaEnableDetectSLF4J;
        }
        if (other.HasEnableDefaultHTTPErrorCode) {
          EnableDefaultHTTPErrorCode = other.EnableDefaultHTTPErrorCode;
        }
        if (other.HasDonetEnableDetectNLog) {
          DonetEnableDetectNLog = other.DonetEnableDetectNLog;
        }
        if (other.HasDonetEnableDetectLog4Net) {
          DonetEnableDetectLog4Net = other.DonetEnableDetectLog4Net;
        }
        if (other.HasDonetEnableDetectSystemTrace) {
          DonetEnableDetectSystemTrace = other.DonetEnableDetectSystemTrace;
        }
        if (other.HasDonetEnableDetectEventLog) {
          DonetEnableDetectEventLog = other.DonetEnableDetectEventLog;
        }
        if (other.HasMarkTransactionAsErrorOnErrorMessageLog) {
          MarkTransactionAsErrorOnErrorMessageLog = other.MarkTransactionAsErrorOnErrorMessageLog;
        }
        if (other.ignoreExceptions_.Count != 0) {
          result.ignoreExceptions_.Add(other.ignoreExceptions_);
        }
        if (other.ignoreErrMsg_.Count != 0) {
          result.ignoreErrMsg_.Add(other.ignoreErrMsg_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasJavaEnableDetectJavaLogging = input.ReadBool(ref result.javaEnableDetectJavaLogging_);
              break;
            }
            case 16: {
              result.hasJavaEnableDetectLog4J = input.ReadBool(ref result.javaEnableDetectLog4J_);
              break;
            }
            case 24: {
              result.hasJavaEnableDetectSLF4J = input.ReadBool(ref result.javaEnableDetectSLF4J_);
              break;
            }
            case 32: {
              result.hasEnableDefaultHTTPErrorCode = input.ReadBool(ref result.enableDefaultHTTPErrorCode_);
              break;
            }
            case 40: {
              result.hasDonetEnableDetectNLog = input.ReadBool(ref result.donetEnableDetectNLog_);
              break;
            }
            case 48: {
              result.hasDonetEnableDetectLog4Net = input.ReadBool(ref result.donetEnableDetectLog4Net_);
              break;
            }
            case 56: {
              result.hasDonetEnableDetectSystemTrace = input.ReadBool(ref result.donetEnableDetectSystemTrace_);
              break;
            }
            case 64: {
              result.hasDonetEnableDetectEventLog = input.ReadBool(ref result.donetEnableDetectEventLog_);
              break;
            }
            case 72: {
              result.hasMarkTransactionAsErrorOnErrorMessageLog = input.ReadBool(ref result.markTransactionAsErrorOnErrorMessageLog_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.ignoreExceptions_, global::BonreePB.IgnoreException.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.ignoreErrMsg_, global::BonreePB.IgnoreErrorMessage.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasJavaEnableDetectJavaLogging {
        get { return result.hasJavaEnableDetectJavaLogging; }
      }
      public bool JavaEnableDetectJavaLogging {
        get { return result.JavaEnableDetectJavaLogging; }
        set { SetJavaEnableDetectJavaLogging(value); }
      }
      public Builder SetJavaEnableDetectJavaLogging(bool value) {
        PrepareBuilder();
        result.hasJavaEnableDetectJavaLogging = true;
        result.javaEnableDetectJavaLogging_ = value;
        return this;
      }
      public Builder ClearJavaEnableDetectJavaLogging() {
        PrepareBuilder();
        result.hasJavaEnableDetectJavaLogging = false;
        result.javaEnableDetectJavaLogging_ = false;
        return this;
      }
      
      public bool HasJavaEnableDetectLog4J {
        get { return result.hasJavaEnableDetectLog4J; }
      }
      public bool JavaEnableDetectLog4J {
        get { return result.JavaEnableDetectLog4J; }
        set { SetJavaEnableDetectLog4J(value); }
      }
      public Builder SetJavaEnableDetectLog4J(bool value) {
        PrepareBuilder();
        result.hasJavaEnableDetectLog4J = true;
        result.javaEnableDetectLog4J_ = value;
        return this;
      }
      public Builder ClearJavaEnableDetectLog4J() {
        PrepareBuilder();
        result.hasJavaEnableDetectLog4J = false;
        result.javaEnableDetectLog4J_ = false;
        return this;
      }
      
      public bool HasJavaEnableDetectSLF4J {
        get { return result.hasJavaEnableDetectSLF4J; }
      }
      public bool JavaEnableDetectSLF4J {
        get { return result.JavaEnableDetectSLF4J; }
        set { SetJavaEnableDetectSLF4J(value); }
      }
      public Builder SetJavaEnableDetectSLF4J(bool value) {
        PrepareBuilder();
        result.hasJavaEnableDetectSLF4J = true;
        result.javaEnableDetectSLF4J_ = value;
        return this;
      }
      public Builder ClearJavaEnableDetectSLF4J() {
        PrepareBuilder();
        result.hasJavaEnableDetectSLF4J = false;
        result.javaEnableDetectSLF4J_ = false;
        return this;
      }
      
      public bool HasEnableDefaultHTTPErrorCode {
        get { return result.hasEnableDefaultHTTPErrorCode; }
      }
      public bool EnableDefaultHTTPErrorCode {
        get { return result.EnableDefaultHTTPErrorCode; }
        set { SetEnableDefaultHTTPErrorCode(value); }
      }
      public Builder SetEnableDefaultHTTPErrorCode(bool value) {
        PrepareBuilder();
        result.hasEnableDefaultHTTPErrorCode = true;
        result.enableDefaultHTTPErrorCode_ = value;
        return this;
      }
      public Builder ClearEnableDefaultHTTPErrorCode() {
        PrepareBuilder();
        result.hasEnableDefaultHTTPErrorCode = false;
        result.enableDefaultHTTPErrorCode_ = false;
        return this;
      }
      
      public bool HasDonetEnableDetectNLog {
        get { return result.hasDonetEnableDetectNLog; }
      }
      public bool DonetEnableDetectNLog {
        get { return result.DonetEnableDetectNLog; }
        set { SetDonetEnableDetectNLog(value); }
      }
      public Builder SetDonetEnableDetectNLog(bool value) {
        PrepareBuilder();
        result.hasDonetEnableDetectNLog = true;
        result.donetEnableDetectNLog_ = value;
        return this;
      }
      public Builder ClearDonetEnableDetectNLog() {
        PrepareBuilder();
        result.hasDonetEnableDetectNLog = false;
        result.donetEnableDetectNLog_ = false;
        return this;
      }
      
      public bool HasDonetEnableDetectLog4Net {
        get { return result.hasDonetEnableDetectLog4Net; }
      }
      public bool DonetEnableDetectLog4Net {
        get { return result.DonetEnableDetectLog4Net; }
        set { SetDonetEnableDetectLog4Net(value); }
      }
      public Builder SetDonetEnableDetectLog4Net(bool value) {
        PrepareBuilder();
        result.hasDonetEnableDetectLog4Net = true;
        result.donetEnableDetectLog4Net_ = value;
        return this;
      }
      public Builder ClearDonetEnableDetectLog4Net() {
        PrepareBuilder();
        result.hasDonetEnableDetectLog4Net = false;
        result.donetEnableDetectLog4Net_ = false;
        return this;
      }
      
      public bool HasDonetEnableDetectSystemTrace {
        get { return result.hasDonetEnableDetectSystemTrace; }
      }
      public bool DonetEnableDetectSystemTrace {
        get { return result.DonetEnableDetectSystemTrace; }
        set { SetDonetEnableDetectSystemTrace(value); }
      }
      public Builder SetDonetEnableDetectSystemTrace(bool value) {
        PrepareBuilder();
        result.hasDonetEnableDetectSystemTrace = true;
        result.donetEnableDetectSystemTrace_ = value;
        return this;
      }
      public Builder ClearDonetEnableDetectSystemTrace() {
        PrepareBuilder();
        result.hasDonetEnableDetectSystemTrace = false;
        result.donetEnableDetectSystemTrace_ = false;
        return this;
      }
      
      public bool HasDonetEnableDetectEventLog {
        get { return result.hasDonetEnableDetectEventLog; }
      }
      public bool DonetEnableDetectEventLog {
        get { return result.DonetEnableDetectEventLog; }
        set { SetDonetEnableDetectEventLog(value); }
      }
      public Builder SetDonetEnableDetectEventLog(bool value) {
        PrepareBuilder();
        result.hasDonetEnableDetectEventLog = true;
        result.donetEnableDetectEventLog_ = value;
        return this;
      }
      public Builder ClearDonetEnableDetectEventLog() {
        PrepareBuilder();
        result.hasDonetEnableDetectEventLog = false;
        result.donetEnableDetectEventLog_ = false;
        return this;
      }
      
      public bool HasMarkTransactionAsErrorOnErrorMessageLog {
        get { return result.hasMarkTransactionAsErrorOnErrorMessageLog; }
      }
      public bool MarkTransactionAsErrorOnErrorMessageLog {
        get { return result.MarkTransactionAsErrorOnErrorMessageLog; }
        set { SetMarkTransactionAsErrorOnErrorMessageLog(value); }
      }
      public Builder SetMarkTransactionAsErrorOnErrorMessageLog(bool value) {
        PrepareBuilder();
        result.hasMarkTransactionAsErrorOnErrorMessageLog = true;
        result.markTransactionAsErrorOnErrorMessageLog_ = value;
        return this;
      }
      public Builder ClearMarkTransactionAsErrorOnErrorMessageLog() {
        PrepareBuilder();
        result.hasMarkTransactionAsErrorOnErrorMessageLog = false;
        result.markTransactionAsErrorOnErrorMessageLog_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.IgnoreException> IgnoreExceptionsList {
        get { return PrepareBuilder().ignoreExceptions_; }
      }
      public int IgnoreExceptionsCount {
        get { return result.IgnoreExceptionsCount; }
      }
      public global::BonreePB.IgnoreException GetIgnoreExceptions(int index) {
        return result.GetIgnoreExceptions(index);
      }
      public Builder SetIgnoreExceptions(int index, global::BonreePB.IgnoreException value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ignoreExceptions_[index] = value;
        return this;
      }
      public Builder SetIgnoreExceptions(int index, global::BonreePB.IgnoreException.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ignoreExceptions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIgnoreExceptions(global::BonreePB.IgnoreException value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ignoreExceptions_.Add(value);
        return this;
      }
      public Builder AddIgnoreExceptions(global::BonreePB.IgnoreException.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ignoreExceptions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIgnoreExceptions(scg::IEnumerable<global::BonreePB.IgnoreException> values) {
        PrepareBuilder();
        result.ignoreExceptions_.Add(values);
        return this;
      }
      public Builder ClearIgnoreExceptions() {
        PrepareBuilder();
        result.ignoreExceptions_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.IgnoreErrorMessage> IgnoreErrMsgList {
        get { return PrepareBuilder().ignoreErrMsg_; }
      }
      public int IgnoreErrMsgCount {
        get { return result.IgnoreErrMsgCount; }
      }
      public global::BonreePB.IgnoreErrorMessage GetIgnoreErrMsg(int index) {
        return result.GetIgnoreErrMsg(index);
      }
      public Builder SetIgnoreErrMsg(int index, global::BonreePB.IgnoreErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ignoreErrMsg_[index] = value;
        return this;
      }
      public Builder SetIgnoreErrMsg(int index, global::BonreePB.IgnoreErrorMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ignoreErrMsg_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIgnoreErrMsg(global::BonreePB.IgnoreErrorMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ignoreErrMsg_.Add(value);
        return this;
      }
      public Builder AddIgnoreErrMsg(global::BonreePB.IgnoreErrorMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ignoreErrMsg_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIgnoreErrMsg(scg::IEnumerable<global::BonreePB.IgnoreErrorMessage> values) {
        PrepareBuilder();
        result.ignoreErrMsg_.Add(values);
        return this;
      }
      public Builder ClearIgnoreErrMsg() {
        PrepareBuilder();
        result.ignoreErrMsg_.Clear();
        return this;
      }
    }
    static ErrorConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CallGraphConfig : pb::GeneratedMessage<CallGraphConfig, CallGraphConfig.Builder> {
    private CallGraphConfig() { }
    private static readonly CallGraphConfig defaultInstance = new CallGraphConfig().MakeReadOnly();
    private static readonly string[] _callGraphConfigFieldNames = new string[] { "excludeNames", "includeNames", "minMethodTime", "minSQLQueryTime" };
    private static readonly uint[] _callGraphConfigFieldTags = new uint[] { 26, 34, 8, 16 };
    public static CallGraphConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CallGraphConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CallGraphConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_CallGraphConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CallGraphConfig, CallGraphConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_CallGraphConfig__FieldAccessorTable; }
    }
    
    public const int MinMethodTimeFieldNumber = 1;
    private bool hasMinMethodTime;
    private uint minMethodTime_;
    public bool HasMinMethodTime {
      get { return hasMinMethodTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinMethodTime {
      get { return minMethodTime_; }
    }
    
    public const int MinSQLQueryTimeFieldNumber = 2;
    private bool hasMinSQLQueryTime;
    private uint minSQLQueryTime_;
    public bool HasMinSQLQueryTime {
      get { return hasMinSQLQueryTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinSQLQueryTime {
      get { return minSQLQueryTime_; }
    }
    
    public const int ExcludeNamesFieldNumber = 3;
    private pbc::PopsicleList<string> excludeNames_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ExcludeNamesList {
      get { return pbc::Lists.AsReadOnly(excludeNames_); }
    }
    public int ExcludeNamesCount {
      get { return excludeNames_.Count; }
    }
    public string GetExcludeNames(int index) {
      return excludeNames_[index];
    }
    
    public const int IncludeNamesFieldNumber = 4;
    private pbc::PopsicleList<string> includeNames_ = new pbc::PopsicleList<string>();
    public scg::IList<string> IncludeNamesList {
      get { return pbc::Lists.AsReadOnly(includeNames_); }
    }
    public int IncludeNamesCount {
      get { return includeNames_.Count; }
    }
    public string GetIncludeNames(int index) {
      return includeNames_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _callGraphConfigFieldNames;
      if (hasMinMethodTime) {
        output.WriteUInt32(1, field_names[2], MinMethodTime);
      }
      if (hasMinSQLQueryTime) {
        output.WriteUInt32(2, field_names[3], MinSQLQueryTime);
      }
      if (excludeNames_.Count > 0) {
        output.WriteStringArray(3, field_names[0], excludeNames_);
      }
      if (includeNames_.Count > 0) {
        output.WriteStringArray(4, field_names[1], includeNames_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMinMethodTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MinMethodTime);
      }
      if (hasMinSQLQueryTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MinSQLQueryTime);
      }
      {
        int dataSize = 0;
        foreach (string element in ExcludeNamesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * excludeNames_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in IncludeNamesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * includeNames_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CallGraphConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CallGraphConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CallGraphConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CallGraphConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CallGraphConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CallGraphConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CallGraphConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CallGraphConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CallGraphConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CallGraphConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CallGraphConfig MakeReadOnly() {
      excludeNames_.MakeReadOnly();
      includeNames_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CallGraphConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CallGraphConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CallGraphConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CallGraphConfig result;
      
      private CallGraphConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          CallGraphConfig original = result;
          result = new CallGraphConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CallGraphConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.CallGraphConfig.Descriptor; }
      }
      
      public override CallGraphConfig DefaultInstanceForType {
        get { return global::BonreePB.CallGraphConfig.DefaultInstance; }
      }
      
      public override CallGraphConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CallGraphConfig) {
          return MergeFrom((CallGraphConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CallGraphConfig other) {
        if (other == global::BonreePB.CallGraphConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMinMethodTime) {
          MinMethodTime = other.MinMethodTime;
        }
        if (other.HasMinSQLQueryTime) {
          MinSQLQueryTime = other.MinSQLQueryTime;
        }
        if (other.excludeNames_.Count != 0) {
          result.excludeNames_.Add(other.excludeNames_);
        }
        if (other.includeNames_.Count != 0) {
          result.includeNames_.Add(other.includeNames_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_callGraphConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _callGraphConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMinMethodTime = input.ReadUInt32(ref result.minMethodTime_);
              break;
            }
            case 16: {
              result.hasMinSQLQueryTime = input.ReadUInt32(ref result.minSQLQueryTime_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.excludeNames_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.includeNames_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMinMethodTime {
        get { return result.hasMinMethodTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinMethodTime {
        get { return result.MinMethodTime; }
        set { SetMinMethodTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinMethodTime(uint value) {
        PrepareBuilder();
        result.hasMinMethodTime = true;
        result.minMethodTime_ = value;
        return this;
      }
      public Builder ClearMinMethodTime() {
        PrepareBuilder();
        result.hasMinMethodTime = false;
        result.minMethodTime_ = 0;
        return this;
      }
      
      public bool HasMinSQLQueryTime {
        get { return result.hasMinSQLQueryTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinSQLQueryTime {
        get { return result.MinSQLQueryTime; }
        set { SetMinSQLQueryTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinSQLQueryTime(uint value) {
        PrepareBuilder();
        result.hasMinSQLQueryTime = true;
        result.minSQLQueryTime_ = value;
        return this;
      }
      public Builder ClearMinSQLQueryTime() {
        PrepareBuilder();
        result.hasMinSQLQueryTime = false;
        result.minSQLQueryTime_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> ExcludeNamesList {
        get { return PrepareBuilder().excludeNames_; }
      }
      public int ExcludeNamesCount {
        get { return result.ExcludeNamesCount; }
      }
      public string GetExcludeNames(int index) {
        return result.GetExcludeNames(index);
      }
      public Builder SetExcludeNames(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.excludeNames_[index] = value;
        return this;
      }
      public Builder AddExcludeNames(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.excludeNames_.Add(value);
        return this;
      }
      public Builder AddRangeExcludeNames(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.excludeNames_.Add(values);
        return this;
      }
      public Builder ClearExcludeNames() {
        PrepareBuilder();
        result.excludeNames_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> IncludeNamesList {
        get { return PrepareBuilder().includeNames_; }
      }
      public int IncludeNamesCount {
        get { return result.IncludeNamesCount; }
      }
      public string GetIncludeNames(int index) {
        return result.GetIncludeNames(index);
      }
      public Builder SetIncludeNames(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.includeNames_[index] = value;
        return this;
      }
      public Builder AddIncludeNames(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.includeNames_.Add(value);
        return this;
      }
      public Builder AddRangeIncludeNames(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.includeNames_.Add(values);
        return this;
      }
      public Builder ClearIncludeNames() {
        PrepareBuilder();
        result.includeNames_.Clear();
        return this;
      }
    }
    static CallGraphConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BusinessTrasactionNamingConfig : pb::GeneratedMessage<BusinessTrasactionNamingConfig, BusinessTrasactionNamingConfig.Builder> {
    private BusinessTrasactionNamingConfig() { }
    private static readonly BusinessTrasactionNamingConfig defaultInstance = new BusinessTrasactionNamingConfig().MakeReadOnly();
    private static readonly string[] _businessTrasactionNamingConfigFieldNames = new string[] { "enable", "properties", "type" };
    private static readonly uint[] _businessTrasactionNamingConfigFieldTags = new uint[] { 16, 26, 8 };
    public static BusinessTrasactionNamingConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BusinessTrasactionNamingConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BusinessTrasactionNamingConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_BusinessTrasactionNamingConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BusinessTrasactionNamingConfig, BusinessTrasactionNamingConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_BusinessTrasactionNamingConfig__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::BonreePB.BTType type_ = global::BonreePB.BTType.BT_JAVA_EJB;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.BTType Type {
      get { return type_; }
    }
    
    public const int EnableFieldNumber = 2;
    private bool hasEnable;
    private bool enable_;
    public bool HasEnable {
      get { return hasEnable; }
    }
    public bool Enable {
      get { return enable_; }
    }
    
    public const int PropertiesFieldNumber = 3;
    private bool hasProperties;
    private string properties_ = "";
    public bool HasProperties {
      get { return hasProperties; }
    }
    public string Properties {
      get { return properties_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _businessTrasactionNamingConfigFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (hasEnable) {
        output.WriteBool(2, field_names[0], Enable);
      }
      if (hasProperties) {
        output.WriteString(3, field_names[1], Properties);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Enable);
      }
      if (hasProperties) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Properties);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BusinessTrasactionNamingConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BusinessTrasactionNamingConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BusinessTrasactionNamingConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BusinessTrasactionNamingConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BusinessTrasactionNamingConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BusinessTrasactionNamingConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BusinessTrasactionNamingConfig result;
      
      private BusinessTrasactionNamingConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          BusinessTrasactionNamingConfig original = result;
          result = new BusinessTrasactionNamingConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BusinessTrasactionNamingConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.BusinessTrasactionNamingConfig.Descriptor; }
      }
      
      public override BusinessTrasactionNamingConfig DefaultInstanceForType {
        get { return global::BonreePB.BusinessTrasactionNamingConfig.DefaultInstance; }
      }
      
      public override BusinessTrasactionNamingConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BusinessTrasactionNamingConfig) {
          return MergeFrom((BusinessTrasactionNamingConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BusinessTrasactionNamingConfig other) {
        if (other == global::BonreePB.BusinessTrasactionNamingConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasEnable) {
          Enable = other.Enable;
        }
        if (other.HasProperties) {
          Properties = other.Properties;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_businessTrasactionNamingConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _businessTrasactionNamingConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasEnable = input.ReadBool(ref result.enable_);
              break;
            }
            case 26: {
              result.hasProperties = input.ReadString(ref result.properties_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.BTType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.BTType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.BTType.BT_JAVA_EJB;
        return this;
      }
      
      public bool HasEnable {
        get { return result.hasEnable; }
      }
      public bool Enable {
        get { return result.Enable; }
        set { SetEnable(value); }
      }
      public Builder SetEnable(bool value) {
        PrepareBuilder();
        result.hasEnable = true;
        result.enable_ = value;
        return this;
      }
      public Builder ClearEnable() {
        PrepareBuilder();
        result.hasEnable = false;
        result.enable_ = false;
        return this;
      }
      
      public bool HasProperties {
        get { return result.hasProperties; }
      }
      public string Properties {
        get { return result.Properties; }
        set { SetProperties(value); }
      }
      public Builder SetProperties(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProperties = true;
        result.properties_ = value;
        return this;
      }
      public Builder ClearProperties() {
        PrepareBuilder();
        result.hasProperties = false;
        result.properties_ = "";
        return this;
      }
    }
    static BusinessTrasactionNamingConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AppConfig : pb::GeneratedMessage<AppConfig, AppConfig.Builder> {
    private AppConfig() { }
    private static readonly AppConfig defaultInstance = new AppConfig().MakeReadOnly();
    private static readonly string[] _appConfigFieldNames = new string[] { "btGetURISegmentType", "btThreshold", "btThresholdSlowTimes", "btThresholdVerySlowTimes", "btURISegments", "enableAutoInjectBrowserJs", "enableDataAggregate", "instrumentLevel", "namingConfigs", "nosqlExeTimeThreshold", "remoteCallExeTimeThreshold", "remoteCallGetURISegmentType", "remoteCallURISegments", "sqlExeTimeThreshold", "sqlRecordType" };
    private static readonly uint[] _appConfigFieldTags = new uint[] { 72, 16, 24, 32, 80, 120, 112, 8, 106, 56, 64, 88, 96, 40, 48 };
    public static AppConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AppConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AppConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_AppConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AppConfig, AppConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_AppConfig__FieldAccessorTable; }
    }
    
    public const int InstrumentLevelFieldNumber = 1;
    private bool hasInstrumentLevel;
    private global::BonreePB.InstrumentationLevel instrumentLevel_ = global::BonreePB.InstrumentationLevel.PRODUCTION;
    public bool HasInstrumentLevel {
      get { return hasInstrumentLevel; }
    }
    public global::BonreePB.InstrumentationLevel InstrumentLevel {
      get { return instrumentLevel_; }
    }
    
    public const int BtThresholdFieldNumber = 2;
    private bool hasBtThreshold;
    private uint btThreshold_;
    public bool HasBtThreshold {
      get { return hasBtThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint BtThreshold {
      get { return btThreshold_; }
    }
    
    public const int BtThresholdSlowTimesFieldNumber = 3;
    private bool hasBtThresholdSlowTimes;
    private uint btThresholdSlowTimes_;
    public bool HasBtThresholdSlowTimes {
      get { return hasBtThresholdSlowTimes; }
    }
    [global::System.CLSCompliant(false)]
    public uint BtThresholdSlowTimes {
      get { return btThresholdSlowTimes_; }
    }
    
    public const int BtThresholdVerySlowTimesFieldNumber = 4;
    private bool hasBtThresholdVerySlowTimes;
    private uint btThresholdVerySlowTimes_;
    public bool HasBtThresholdVerySlowTimes {
      get { return hasBtThresholdVerySlowTimes; }
    }
    [global::System.CLSCompliant(false)]
    public uint BtThresholdVerySlowTimes {
      get { return btThresholdVerySlowTimes_; }
    }
    
    public const int SqlExeTimeThresholdFieldNumber = 5;
    private bool hasSqlExeTimeThreshold;
    private uint sqlExeTimeThreshold_;
    public bool HasSqlExeTimeThreshold {
      get { return hasSqlExeTimeThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint SqlExeTimeThreshold {
      get { return sqlExeTimeThreshold_; }
    }
    
    public const int SqlRecordTypeFieldNumber = 6;
    private bool hasSqlRecordType;
    private global::BonreePB.SQLRecordType sqlRecordType_ = global::BonreePB.SQLRecordType.SQL_RT_CLOSE;
    public bool HasSqlRecordType {
      get { return hasSqlRecordType; }
    }
    public global::BonreePB.SQLRecordType SqlRecordType {
      get { return sqlRecordType_; }
    }
    
    public const int NosqlExeTimeThresholdFieldNumber = 7;
    private bool hasNosqlExeTimeThreshold;
    private uint nosqlExeTimeThreshold_;
    public bool HasNosqlExeTimeThreshold {
      get { return hasNosqlExeTimeThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint NosqlExeTimeThreshold {
      get { return nosqlExeTimeThreshold_; }
    }
    
    public const int RemoteCallExeTimeThresholdFieldNumber = 8;
    private bool hasRemoteCallExeTimeThreshold;
    private uint remoteCallExeTimeThreshold_;
    public bool HasRemoteCallExeTimeThreshold {
      get { return hasRemoteCallExeTimeThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint RemoteCallExeTimeThreshold {
      get { return remoteCallExeTimeThreshold_; }
    }
    
    public const int BtGetURISegmentTypeFieldNumber = 9;
    private bool hasBtGetURISegmentType;
    private global::BonreePB.GetURISegmentType btGetURISegmentType_ = global::BonreePB.GetURISegmentType.GET_URI_SEGMENT_TYPE_START;
    public bool HasBtGetURISegmentType {
      get { return hasBtGetURISegmentType; }
    }
    public global::BonreePB.GetURISegmentType BtGetURISegmentType {
      get { return btGetURISegmentType_; }
    }
    
    public const int BtURISegmentsFieldNumber = 10;
    private bool hasBtURISegments;
    private uint btURISegments_;
    public bool HasBtURISegments {
      get { return hasBtURISegments; }
    }
    [global::System.CLSCompliant(false)]
    public uint BtURISegments {
      get { return btURISegments_; }
    }
    
    public const int RemoteCallGetURISegmentTypeFieldNumber = 11;
    private bool hasRemoteCallGetURISegmentType;
    private global::BonreePB.GetURISegmentType remoteCallGetURISegmentType_ = global::BonreePB.GetURISegmentType.GET_URI_SEGMENT_TYPE_START;
    public bool HasRemoteCallGetURISegmentType {
      get { return hasRemoteCallGetURISegmentType; }
    }
    public global::BonreePB.GetURISegmentType RemoteCallGetURISegmentType {
      get { return remoteCallGetURISegmentType_; }
    }
    
    public const int RemoteCallURISegmentsFieldNumber = 12;
    private bool hasRemoteCallURISegments;
    private uint remoteCallURISegments_;
    public bool HasRemoteCallURISegments {
      get { return hasRemoteCallURISegments; }
    }
    [global::System.CLSCompliant(false)]
    public uint RemoteCallURISegments {
      get { return remoteCallURISegments_; }
    }
    
    public const int NamingConfigsFieldNumber = 13;
    private pbc::PopsicleList<global::BonreePB.BusinessTrasactionNamingConfig> namingConfigs_ = new pbc::PopsicleList<global::BonreePB.BusinessTrasactionNamingConfig>();
    public scg::IList<global::BonreePB.BusinessTrasactionNamingConfig> NamingConfigsList {
      get { return namingConfigs_; }
    }
    public int NamingConfigsCount {
      get { return namingConfigs_.Count; }
    }
    public global::BonreePB.BusinessTrasactionNamingConfig GetNamingConfigs(int index) {
      return namingConfigs_[index];
    }
    
    public const int EnableDataAggregateFieldNumber = 14;
    private bool hasEnableDataAggregate;
    private bool enableDataAggregate_;
    public bool HasEnableDataAggregate {
      get { return hasEnableDataAggregate; }
    }
    public bool EnableDataAggregate {
      get { return enableDataAggregate_; }
    }
    
    public const int EnableAutoInjectBrowserJsFieldNumber = 15;
    private bool hasEnableAutoInjectBrowserJs;
    private bool enableAutoInjectBrowserJs_;
    public bool HasEnableAutoInjectBrowserJs {
      get { return hasEnableAutoInjectBrowserJs; }
    }
    public bool EnableAutoInjectBrowserJs {
      get { return enableAutoInjectBrowserJs_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _appConfigFieldNames;
      if (hasInstrumentLevel) {
        output.WriteEnum(1, field_names[7], (int) InstrumentLevel, InstrumentLevel);
      }
      if (hasBtThreshold) {
        output.WriteUInt32(2, field_names[1], BtThreshold);
      }
      if (hasBtThresholdSlowTimes) {
        output.WriteUInt32(3, field_names[2], BtThresholdSlowTimes);
      }
      if (hasBtThresholdVerySlowTimes) {
        output.WriteUInt32(4, field_names[3], BtThresholdVerySlowTimes);
      }
      if (hasSqlExeTimeThreshold) {
        output.WriteUInt32(5, field_names[13], SqlExeTimeThreshold);
      }
      if (hasSqlRecordType) {
        output.WriteEnum(6, field_names[14], (int) SqlRecordType, SqlRecordType);
      }
      if (hasNosqlExeTimeThreshold) {
        output.WriteUInt32(7, field_names[9], NosqlExeTimeThreshold);
      }
      if (hasRemoteCallExeTimeThreshold) {
        output.WriteUInt32(8, field_names[10], RemoteCallExeTimeThreshold);
      }
      if (hasBtGetURISegmentType) {
        output.WriteEnum(9, field_names[0], (int) BtGetURISegmentType, BtGetURISegmentType);
      }
      if (hasBtURISegments) {
        output.WriteUInt32(10, field_names[4], BtURISegments);
      }
      if (hasRemoteCallGetURISegmentType) {
        output.WriteEnum(11, field_names[11], (int) RemoteCallGetURISegmentType, RemoteCallGetURISegmentType);
      }
      if (hasRemoteCallURISegments) {
        output.WriteUInt32(12, field_names[12], RemoteCallURISegments);
      }
      if (namingConfigs_.Count > 0) {
        output.WriteMessageArray(13, field_names[8], namingConfigs_);
      }
      if (hasEnableDataAggregate) {
        output.WriteBool(14, field_names[6], EnableDataAggregate);
      }
      if (hasEnableAutoInjectBrowserJs) {
        output.WriteBool(15, field_names[5], EnableAutoInjectBrowserJs);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInstrumentLevel) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) InstrumentLevel);
      }
      if (hasBtThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, BtThreshold);
      }
      if (hasBtThresholdSlowTimes) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, BtThresholdSlowTimes);
      }
      if (hasBtThresholdVerySlowTimes) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, BtThresholdVerySlowTimes);
      }
      if (hasSqlExeTimeThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, SqlExeTimeThreshold);
      }
      if (hasSqlRecordType) {
        size += pb::CodedOutputStream.ComputeEnumSize(6, (int) SqlRecordType);
      }
      if (hasNosqlExeTimeThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, NosqlExeTimeThreshold);
      }
      if (hasRemoteCallExeTimeThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, RemoteCallExeTimeThreshold);
      }
      if (hasBtGetURISegmentType) {
        size += pb::CodedOutputStream.ComputeEnumSize(9, (int) BtGetURISegmentType);
      }
      if (hasBtURISegments) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, BtURISegments);
      }
      if (hasRemoteCallGetURISegmentType) {
        size += pb::CodedOutputStream.ComputeEnumSize(11, (int) RemoteCallGetURISegmentType);
      }
      if (hasRemoteCallURISegments) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, RemoteCallURISegments);
      }
      foreach (global::BonreePB.BusinessTrasactionNamingConfig element in NamingConfigsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, element);
      }
      if (hasEnableDataAggregate) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, EnableDataAggregate);
      }
      if (hasEnableAutoInjectBrowserJs) {
        size += pb::CodedOutputStream.ComputeBoolSize(15, EnableAutoInjectBrowserJs);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AppConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AppConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AppConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AppConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AppConfig MakeReadOnly() {
      namingConfigs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AppConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AppConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AppConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AppConfig result;
      
      private AppConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          AppConfig original = result;
          result = new AppConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AppConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.AppConfig.Descriptor; }
      }
      
      public override AppConfig DefaultInstanceForType {
        get { return global::BonreePB.AppConfig.DefaultInstance; }
      }
      
      public override AppConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AppConfig) {
          return MergeFrom((AppConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AppConfig other) {
        if (other == global::BonreePB.AppConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInstrumentLevel) {
          InstrumentLevel = other.InstrumentLevel;
        }
        if (other.HasBtThreshold) {
          BtThreshold = other.BtThreshold;
        }
        if (other.HasBtThresholdSlowTimes) {
          BtThresholdSlowTimes = other.BtThresholdSlowTimes;
        }
        if (other.HasBtThresholdVerySlowTimes) {
          BtThresholdVerySlowTimes = other.BtThresholdVerySlowTimes;
        }
        if (other.HasSqlExeTimeThreshold) {
          SqlExeTimeThreshold = other.SqlExeTimeThreshold;
        }
        if (other.HasSqlRecordType) {
          SqlRecordType = other.SqlRecordType;
        }
        if (other.HasNosqlExeTimeThreshold) {
          NosqlExeTimeThreshold = other.NosqlExeTimeThreshold;
        }
        if (other.HasRemoteCallExeTimeThreshold) {
          RemoteCallExeTimeThreshold = other.RemoteCallExeTimeThreshold;
        }
        if (other.HasBtGetURISegmentType) {
          BtGetURISegmentType = other.BtGetURISegmentType;
        }
        if (other.HasBtURISegments) {
          BtURISegments = other.BtURISegments;
        }
        if (other.HasRemoteCallGetURISegmentType) {
          RemoteCallGetURISegmentType = other.RemoteCallGetURISegmentType;
        }
        if (other.HasRemoteCallURISegments) {
          RemoteCallURISegments = other.RemoteCallURISegments;
        }
        if (other.namingConfigs_.Count != 0) {
          result.namingConfigs_.Add(other.namingConfigs_);
        }
        if (other.HasEnableDataAggregate) {
          EnableDataAggregate = other.EnableDataAggregate;
        }
        if (other.HasEnableAutoInjectBrowserJs) {
          EnableAutoInjectBrowserJs = other.EnableAutoInjectBrowserJs;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_appConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _appConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.instrumentLevel_, out unknown)) {
                result.hasInstrumentLevel = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasBtThreshold = input.ReadUInt32(ref result.btThreshold_);
              break;
            }
            case 24: {
              result.hasBtThresholdSlowTimes = input.ReadUInt32(ref result.btThresholdSlowTimes_);
              break;
            }
            case 32: {
              result.hasBtThresholdVerySlowTimes = input.ReadUInt32(ref result.btThresholdVerySlowTimes_);
              break;
            }
            case 40: {
              result.hasSqlExeTimeThreshold = input.ReadUInt32(ref result.sqlExeTimeThreshold_);
              break;
            }
            case 48: {
              object unknown;
              if(input.ReadEnum(ref result.sqlRecordType_, out unknown)) {
                result.hasSqlRecordType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(6, (ulong)(int)unknown);
              }
              break;
            }
            case 56: {
              result.hasNosqlExeTimeThreshold = input.ReadUInt32(ref result.nosqlExeTimeThreshold_);
              break;
            }
            case 64: {
              result.hasRemoteCallExeTimeThreshold = input.ReadUInt32(ref result.remoteCallExeTimeThreshold_);
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.btGetURISegmentType_, out unknown)) {
                result.hasBtGetURISegmentType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 80: {
              result.hasBtURISegments = input.ReadUInt32(ref result.btURISegments_);
              break;
            }
            case 88: {
              object unknown;
              if(input.ReadEnum(ref result.remoteCallGetURISegmentType_, out unknown)) {
                result.hasRemoteCallGetURISegmentType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(11, (ulong)(int)unknown);
              }
              break;
            }
            case 96: {
              result.hasRemoteCallURISegments = input.ReadUInt32(ref result.remoteCallURISegments_);
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.namingConfigs_, global::BonreePB.BusinessTrasactionNamingConfig.DefaultInstance, extensionRegistry);
              break;
            }
            case 112: {
              result.hasEnableDataAggregate = input.ReadBool(ref result.enableDataAggregate_);
              break;
            }
            case 120: {
              result.hasEnableAutoInjectBrowserJs = input.ReadBool(ref result.enableAutoInjectBrowserJs_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInstrumentLevel {
       get { return result.hasInstrumentLevel; }
      }
      public global::BonreePB.InstrumentationLevel InstrumentLevel {
        get { return result.InstrumentLevel; }
        set { SetInstrumentLevel(value); }
      }
      public Builder SetInstrumentLevel(global::BonreePB.InstrumentationLevel value) {
        PrepareBuilder();
        result.hasInstrumentLevel = true;
        result.instrumentLevel_ = value;
        return this;
      }
      public Builder ClearInstrumentLevel() {
        PrepareBuilder();
        result.hasInstrumentLevel = false;
        result.instrumentLevel_ = global::BonreePB.InstrumentationLevel.PRODUCTION;
        return this;
      }
      
      public bool HasBtThreshold {
        get { return result.hasBtThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint BtThreshold {
        get { return result.BtThreshold; }
        set { SetBtThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBtThreshold(uint value) {
        PrepareBuilder();
        result.hasBtThreshold = true;
        result.btThreshold_ = value;
        return this;
      }
      public Builder ClearBtThreshold() {
        PrepareBuilder();
        result.hasBtThreshold = false;
        result.btThreshold_ = 0;
        return this;
      }
      
      public bool HasBtThresholdSlowTimes {
        get { return result.hasBtThresholdSlowTimes; }
      }
      [global::System.CLSCompliant(false)]
      public uint BtThresholdSlowTimes {
        get { return result.BtThresholdSlowTimes; }
        set { SetBtThresholdSlowTimes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBtThresholdSlowTimes(uint value) {
        PrepareBuilder();
        result.hasBtThresholdSlowTimes = true;
        result.btThresholdSlowTimes_ = value;
        return this;
      }
      public Builder ClearBtThresholdSlowTimes() {
        PrepareBuilder();
        result.hasBtThresholdSlowTimes = false;
        result.btThresholdSlowTimes_ = 0;
        return this;
      }
      
      public bool HasBtThresholdVerySlowTimes {
        get { return result.hasBtThresholdVerySlowTimes; }
      }
      [global::System.CLSCompliant(false)]
      public uint BtThresholdVerySlowTimes {
        get { return result.BtThresholdVerySlowTimes; }
        set { SetBtThresholdVerySlowTimes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBtThresholdVerySlowTimes(uint value) {
        PrepareBuilder();
        result.hasBtThresholdVerySlowTimes = true;
        result.btThresholdVerySlowTimes_ = value;
        return this;
      }
      public Builder ClearBtThresholdVerySlowTimes() {
        PrepareBuilder();
        result.hasBtThresholdVerySlowTimes = false;
        result.btThresholdVerySlowTimes_ = 0;
        return this;
      }
      
      public bool HasSqlExeTimeThreshold {
        get { return result.hasSqlExeTimeThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint SqlExeTimeThreshold {
        get { return result.SqlExeTimeThreshold; }
        set { SetSqlExeTimeThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSqlExeTimeThreshold(uint value) {
        PrepareBuilder();
        result.hasSqlExeTimeThreshold = true;
        result.sqlExeTimeThreshold_ = value;
        return this;
      }
      public Builder ClearSqlExeTimeThreshold() {
        PrepareBuilder();
        result.hasSqlExeTimeThreshold = false;
        result.sqlExeTimeThreshold_ = 0;
        return this;
      }
      
      public bool HasSqlRecordType {
       get { return result.hasSqlRecordType; }
      }
      public global::BonreePB.SQLRecordType SqlRecordType {
        get { return result.SqlRecordType; }
        set { SetSqlRecordType(value); }
      }
      public Builder SetSqlRecordType(global::BonreePB.SQLRecordType value) {
        PrepareBuilder();
        result.hasSqlRecordType = true;
        result.sqlRecordType_ = value;
        return this;
      }
      public Builder ClearSqlRecordType() {
        PrepareBuilder();
        result.hasSqlRecordType = false;
        result.sqlRecordType_ = global::BonreePB.SQLRecordType.SQL_RT_CLOSE;
        return this;
      }
      
      public bool HasNosqlExeTimeThreshold {
        get { return result.hasNosqlExeTimeThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint NosqlExeTimeThreshold {
        get { return result.NosqlExeTimeThreshold; }
        set { SetNosqlExeTimeThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNosqlExeTimeThreshold(uint value) {
        PrepareBuilder();
        result.hasNosqlExeTimeThreshold = true;
        result.nosqlExeTimeThreshold_ = value;
        return this;
      }
      public Builder ClearNosqlExeTimeThreshold() {
        PrepareBuilder();
        result.hasNosqlExeTimeThreshold = false;
        result.nosqlExeTimeThreshold_ = 0;
        return this;
      }
      
      public bool HasRemoteCallExeTimeThreshold {
        get { return result.hasRemoteCallExeTimeThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint RemoteCallExeTimeThreshold {
        get { return result.RemoteCallExeTimeThreshold; }
        set { SetRemoteCallExeTimeThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemoteCallExeTimeThreshold(uint value) {
        PrepareBuilder();
        result.hasRemoteCallExeTimeThreshold = true;
        result.remoteCallExeTimeThreshold_ = value;
        return this;
      }
      public Builder ClearRemoteCallExeTimeThreshold() {
        PrepareBuilder();
        result.hasRemoteCallExeTimeThreshold = false;
        result.remoteCallExeTimeThreshold_ = 0;
        return this;
      }
      
      public bool HasBtGetURISegmentType {
       get { return result.hasBtGetURISegmentType; }
      }
      public global::BonreePB.GetURISegmentType BtGetURISegmentType {
        get { return result.BtGetURISegmentType; }
        set { SetBtGetURISegmentType(value); }
      }
      public Builder SetBtGetURISegmentType(global::BonreePB.GetURISegmentType value) {
        PrepareBuilder();
        result.hasBtGetURISegmentType = true;
        result.btGetURISegmentType_ = value;
        return this;
      }
      public Builder ClearBtGetURISegmentType() {
        PrepareBuilder();
        result.hasBtGetURISegmentType = false;
        result.btGetURISegmentType_ = global::BonreePB.GetURISegmentType.GET_URI_SEGMENT_TYPE_START;
        return this;
      }
      
      public bool HasBtURISegments {
        get { return result.hasBtURISegments; }
      }
      [global::System.CLSCompliant(false)]
      public uint BtURISegments {
        get { return result.BtURISegments; }
        set { SetBtURISegments(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBtURISegments(uint value) {
        PrepareBuilder();
        result.hasBtURISegments = true;
        result.btURISegments_ = value;
        return this;
      }
      public Builder ClearBtURISegments() {
        PrepareBuilder();
        result.hasBtURISegments = false;
        result.btURISegments_ = 0;
        return this;
      }
      
      public bool HasRemoteCallGetURISegmentType {
       get { return result.hasRemoteCallGetURISegmentType; }
      }
      public global::BonreePB.GetURISegmentType RemoteCallGetURISegmentType {
        get { return result.RemoteCallGetURISegmentType; }
        set { SetRemoteCallGetURISegmentType(value); }
      }
      public Builder SetRemoteCallGetURISegmentType(global::BonreePB.GetURISegmentType value) {
        PrepareBuilder();
        result.hasRemoteCallGetURISegmentType = true;
        result.remoteCallGetURISegmentType_ = value;
        return this;
      }
      public Builder ClearRemoteCallGetURISegmentType() {
        PrepareBuilder();
        result.hasRemoteCallGetURISegmentType = false;
        result.remoteCallGetURISegmentType_ = global::BonreePB.GetURISegmentType.GET_URI_SEGMENT_TYPE_START;
        return this;
      }
      
      public bool HasRemoteCallURISegments {
        get { return result.hasRemoteCallURISegments; }
      }
      [global::System.CLSCompliant(false)]
      public uint RemoteCallURISegments {
        get { return result.RemoteCallURISegments; }
        set { SetRemoteCallURISegments(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRemoteCallURISegments(uint value) {
        PrepareBuilder();
        result.hasRemoteCallURISegments = true;
        result.remoteCallURISegments_ = value;
        return this;
      }
      public Builder ClearRemoteCallURISegments() {
        PrepareBuilder();
        result.hasRemoteCallURISegments = false;
        result.remoteCallURISegments_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.BusinessTrasactionNamingConfig> NamingConfigsList {
        get { return PrepareBuilder().namingConfigs_; }
      }
      public int NamingConfigsCount {
        get { return result.NamingConfigsCount; }
      }
      public global::BonreePB.BusinessTrasactionNamingConfig GetNamingConfigs(int index) {
        return result.GetNamingConfigs(index);
      }
      public Builder SetNamingConfigs(int index, global::BonreePB.BusinessTrasactionNamingConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.namingConfigs_[index] = value;
        return this;
      }
      public Builder SetNamingConfigs(int index, global::BonreePB.BusinessTrasactionNamingConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.namingConfigs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNamingConfigs(global::BonreePB.BusinessTrasactionNamingConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.namingConfigs_.Add(value);
        return this;
      }
      public Builder AddNamingConfigs(global::BonreePB.BusinessTrasactionNamingConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.namingConfigs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNamingConfigs(scg::IEnumerable<global::BonreePB.BusinessTrasactionNamingConfig> values) {
        PrepareBuilder();
        result.namingConfigs_.Add(values);
        return this;
      }
      public Builder ClearNamingConfigs() {
        PrepareBuilder();
        result.namingConfigs_.Clear();
        return this;
      }
      
      public bool HasEnableDataAggregate {
        get { return result.hasEnableDataAggregate; }
      }
      public bool EnableDataAggregate {
        get { return result.EnableDataAggregate; }
        set { SetEnableDataAggregate(value); }
      }
      public Builder SetEnableDataAggregate(bool value) {
        PrepareBuilder();
        result.hasEnableDataAggregate = true;
        result.enableDataAggregate_ = value;
        return this;
      }
      public Builder ClearEnableDataAggregate() {
        PrepareBuilder();
        result.hasEnableDataAggregate = false;
        result.enableDataAggregate_ = false;
        return this;
      }
      
      public bool HasEnableAutoInjectBrowserJs {
        get { return result.hasEnableAutoInjectBrowserJs; }
      }
      public bool EnableAutoInjectBrowserJs {
        get { return result.EnableAutoInjectBrowserJs; }
        set { SetEnableAutoInjectBrowserJs(value); }
      }
      public Builder SetEnableAutoInjectBrowserJs(bool value) {
        PrepareBuilder();
        result.hasEnableAutoInjectBrowserJs = true;
        result.enableAutoInjectBrowserJs_ = value;
        return this;
      }
      public Builder ClearEnableAutoInjectBrowserJs() {
        PrepareBuilder();
        result.hasEnableAutoInjectBrowserJs = false;
        result.enableAutoInjectBrowserJs_ = false;
        return this;
      }
    }
    static AppConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AppGathererConfig : pb::GeneratedMessage<AppGathererConfig, AppGathererConfig.Builder> {
    private AppGathererConfig() { }
    private static readonly AppGathererConfig defaultInstance = new AppGathererConfig().MakeReadOnly();
    private static readonly string[] _appGathererConfigFieldNames = new string[] { "enableCollectErrorAndException", "enableTrackAsyncThread", "enableTrackBT", "enableTrackNoSQL", "enableTrackRemoteCall", "enableTrackSQL", "gathererPercent" };
    private static readonly uint[] _appGathererConfigFieldTags = new uint[] { 16, 48, 8, 32, 40, 24, 56 };
    public static AppGathererConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AppGathererConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AppGathererConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_AppGathererConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AppGathererConfig, AppGathererConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_AppGathererConfig__FieldAccessorTable; }
    }
    
    public const int EnableTrackBTFieldNumber = 1;
    private bool hasEnableTrackBT;
    private bool enableTrackBT_;
    public bool HasEnableTrackBT {
      get { return hasEnableTrackBT; }
    }
    public bool EnableTrackBT {
      get { return enableTrackBT_; }
    }
    
    public const int EnableCollectErrorAndExceptionFieldNumber = 2;
    private bool hasEnableCollectErrorAndException;
    private bool enableCollectErrorAndException_;
    public bool HasEnableCollectErrorAndException {
      get { return hasEnableCollectErrorAndException; }
    }
    public bool EnableCollectErrorAndException {
      get { return enableCollectErrorAndException_; }
    }
    
    public const int EnableTrackSQLFieldNumber = 3;
    private bool hasEnableTrackSQL;
    private bool enableTrackSQL_;
    public bool HasEnableTrackSQL {
      get { return hasEnableTrackSQL; }
    }
    public bool EnableTrackSQL {
      get { return enableTrackSQL_; }
    }
    
    public const int EnableTrackNoSQLFieldNumber = 4;
    private bool hasEnableTrackNoSQL;
    private bool enableTrackNoSQL_;
    public bool HasEnableTrackNoSQL {
      get { return hasEnableTrackNoSQL; }
    }
    public bool EnableTrackNoSQL {
      get { return enableTrackNoSQL_; }
    }
    
    public const int EnableTrackRemoteCallFieldNumber = 5;
    private bool hasEnableTrackRemoteCall;
    private bool enableTrackRemoteCall_;
    public bool HasEnableTrackRemoteCall {
      get { return hasEnableTrackRemoteCall; }
    }
    public bool EnableTrackRemoteCall {
      get { return enableTrackRemoteCall_; }
    }
    
    public const int EnableTrackAsyncThreadFieldNumber = 6;
    private bool hasEnableTrackAsyncThread;
    private bool enableTrackAsyncThread_;
    public bool HasEnableTrackAsyncThread {
      get { return hasEnableTrackAsyncThread; }
    }
    public bool EnableTrackAsyncThread {
      get { return enableTrackAsyncThread_; }
    }
    
    public const int GathererPercentFieldNumber = 7;
    private bool hasGathererPercent;
    private uint gathererPercent_;
    public bool HasGathererPercent {
      get { return hasGathererPercent; }
    }
    [global::System.CLSCompliant(false)]
    public uint GathererPercent {
      get { return gathererPercent_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _appGathererConfigFieldNames;
      if (hasEnableTrackBT) {
        output.WriteBool(1, field_names[2], EnableTrackBT);
      }
      if (hasEnableCollectErrorAndException) {
        output.WriteBool(2, field_names[0], EnableCollectErrorAndException);
      }
      if (hasEnableTrackSQL) {
        output.WriteBool(3, field_names[5], EnableTrackSQL);
      }
      if (hasEnableTrackNoSQL) {
        output.WriteBool(4, field_names[3], EnableTrackNoSQL);
      }
      if (hasEnableTrackRemoteCall) {
        output.WriteBool(5, field_names[4], EnableTrackRemoteCall);
      }
      if (hasEnableTrackAsyncThread) {
        output.WriteBool(6, field_names[1], EnableTrackAsyncThread);
      }
      if (hasGathererPercent) {
        output.WriteUInt32(7, field_names[6], GathererPercent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEnableTrackBT) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, EnableTrackBT);
      }
      if (hasEnableCollectErrorAndException) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, EnableCollectErrorAndException);
      }
      if (hasEnableTrackSQL) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, EnableTrackSQL);
      }
      if (hasEnableTrackNoSQL) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, EnableTrackNoSQL);
      }
      if (hasEnableTrackRemoteCall) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, EnableTrackRemoteCall);
      }
      if (hasEnableTrackAsyncThread) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, EnableTrackAsyncThread);
      }
      if (hasGathererPercent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, GathererPercent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AppGathererConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppGathererConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppGathererConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppGathererConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppGathererConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppGathererConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AppGathererConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AppGathererConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AppGathererConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppGathererConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AppGathererConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AppGathererConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AppGathererConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AppGathererConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AppGathererConfig result;
      
      private AppGathererConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          AppGathererConfig original = result;
          result = new AppGathererConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AppGathererConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.AppGathererConfig.Descriptor; }
      }
      
      public override AppGathererConfig DefaultInstanceForType {
        get { return global::BonreePB.AppGathererConfig.DefaultInstance; }
      }
      
      public override AppGathererConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AppGathererConfig) {
          return MergeFrom((AppGathererConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AppGathererConfig other) {
        if (other == global::BonreePB.AppGathererConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEnableTrackBT) {
          EnableTrackBT = other.EnableTrackBT;
        }
        if (other.HasEnableCollectErrorAndException) {
          EnableCollectErrorAndException = other.EnableCollectErrorAndException;
        }
        if (other.HasEnableTrackSQL) {
          EnableTrackSQL = other.EnableTrackSQL;
        }
        if (other.HasEnableTrackNoSQL) {
          EnableTrackNoSQL = other.EnableTrackNoSQL;
        }
        if (other.HasEnableTrackRemoteCall) {
          EnableTrackRemoteCall = other.EnableTrackRemoteCall;
        }
        if (other.HasEnableTrackAsyncThread) {
          EnableTrackAsyncThread = other.EnableTrackAsyncThread;
        }
        if (other.HasGathererPercent) {
          GathererPercent = other.GathererPercent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_appGathererConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _appGathererConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEnableTrackBT = input.ReadBool(ref result.enableTrackBT_);
              break;
            }
            case 16: {
              result.hasEnableCollectErrorAndException = input.ReadBool(ref result.enableCollectErrorAndException_);
              break;
            }
            case 24: {
              result.hasEnableTrackSQL = input.ReadBool(ref result.enableTrackSQL_);
              break;
            }
            case 32: {
              result.hasEnableTrackNoSQL = input.ReadBool(ref result.enableTrackNoSQL_);
              break;
            }
            case 40: {
              result.hasEnableTrackRemoteCall = input.ReadBool(ref result.enableTrackRemoteCall_);
              break;
            }
            case 48: {
              result.hasEnableTrackAsyncThread = input.ReadBool(ref result.enableTrackAsyncThread_);
              break;
            }
            case 56: {
              result.hasGathererPercent = input.ReadUInt32(ref result.gathererPercent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEnableTrackBT {
        get { return result.hasEnableTrackBT; }
      }
      public bool EnableTrackBT {
        get { return result.EnableTrackBT; }
        set { SetEnableTrackBT(value); }
      }
      public Builder SetEnableTrackBT(bool value) {
        PrepareBuilder();
        result.hasEnableTrackBT = true;
        result.enableTrackBT_ = value;
        return this;
      }
      public Builder ClearEnableTrackBT() {
        PrepareBuilder();
        result.hasEnableTrackBT = false;
        result.enableTrackBT_ = false;
        return this;
      }
      
      public bool HasEnableCollectErrorAndException {
        get { return result.hasEnableCollectErrorAndException; }
      }
      public bool EnableCollectErrorAndException {
        get { return result.EnableCollectErrorAndException; }
        set { SetEnableCollectErrorAndException(value); }
      }
      public Builder SetEnableCollectErrorAndException(bool value) {
        PrepareBuilder();
        result.hasEnableCollectErrorAndException = true;
        result.enableCollectErrorAndException_ = value;
        return this;
      }
      public Builder ClearEnableCollectErrorAndException() {
        PrepareBuilder();
        result.hasEnableCollectErrorAndException = false;
        result.enableCollectErrorAndException_ = false;
        return this;
      }
      
      public bool HasEnableTrackSQL {
        get { return result.hasEnableTrackSQL; }
      }
      public bool EnableTrackSQL {
        get { return result.EnableTrackSQL; }
        set { SetEnableTrackSQL(value); }
      }
      public Builder SetEnableTrackSQL(bool value) {
        PrepareBuilder();
        result.hasEnableTrackSQL = true;
        result.enableTrackSQL_ = value;
        return this;
      }
      public Builder ClearEnableTrackSQL() {
        PrepareBuilder();
        result.hasEnableTrackSQL = false;
        result.enableTrackSQL_ = false;
        return this;
      }
      
      public bool HasEnableTrackNoSQL {
        get { return result.hasEnableTrackNoSQL; }
      }
      public bool EnableTrackNoSQL {
        get { return result.EnableTrackNoSQL; }
        set { SetEnableTrackNoSQL(value); }
      }
      public Builder SetEnableTrackNoSQL(bool value) {
        PrepareBuilder();
        result.hasEnableTrackNoSQL = true;
        result.enableTrackNoSQL_ = value;
        return this;
      }
      public Builder ClearEnableTrackNoSQL() {
        PrepareBuilder();
        result.hasEnableTrackNoSQL = false;
        result.enableTrackNoSQL_ = false;
        return this;
      }
      
      public bool HasEnableTrackRemoteCall {
        get { return result.hasEnableTrackRemoteCall; }
      }
      public bool EnableTrackRemoteCall {
        get { return result.EnableTrackRemoteCall; }
        set { SetEnableTrackRemoteCall(value); }
      }
      public Builder SetEnableTrackRemoteCall(bool value) {
        PrepareBuilder();
        result.hasEnableTrackRemoteCall = true;
        result.enableTrackRemoteCall_ = value;
        return this;
      }
      public Builder ClearEnableTrackRemoteCall() {
        PrepareBuilder();
        result.hasEnableTrackRemoteCall = false;
        result.enableTrackRemoteCall_ = false;
        return this;
      }
      
      public bool HasEnableTrackAsyncThread {
        get { return result.hasEnableTrackAsyncThread; }
      }
      public bool EnableTrackAsyncThread {
        get { return result.EnableTrackAsyncThread; }
        set { SetEnableTrackAsyncThread(value); }
      }
      public Builder SetEnableTrackAsyncThread(bool value) {
        PrepareBuilder();
        result.hasEnableTrackAsyncThread = true;
        result.enableTrackAsyncThread_ = value;
        return this;
      }
      public Builder ClearEnableTrackAsyncThread() {
        PrepareBuilder();
        result.hasEnableTrackAsyncThread = false;
        result.enableTrackAsyncThread_ = false;
        return this;
      }
      
      public bool HasGathererPercent {
        get { return result.hasGathererPercent; }
      }
      [global::System.CLSCompliant(false)]
      public uint GathererPercent {
        get { return result.GathererPercent; }
        set { SetGathererPercent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGathererPercent(uint value) {
        PrepareBuilder();
        result.hasGathererPercent = true;
        result.gathererPercent_ = value;
        return this;
      }
      public Builder ClearGathererPercent() {
        PrepareBuilder();
        result.hasGathererPercent = false;
        result.gathererPercent_ = 0;
        return this;
      }
    }
    static AppGathererConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MethodInfo : pb::GeneratedMessage<MethodInfo, MethodInfo.Builder> {
    private MethodInfo() { }
    private static readonly MethodInfo defaultInstance = new MethodInfo().MakeReadOnly();
    private static readonly string[] _methodInfoFieldNames = new string[] { "className", "methodNames" };
    private static readonly uint[] _methodInfoFieldTags = new uint[] { 10, 18 };
    public static MethodInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MethodInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MethodInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_MethodInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MethodInfo, MethodInfo.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_MethodInfo__FieldAccessorTable; }
    }
    
    public const int ClassNameFieldNumber = 1;
    private bool hasClassName;
    private string className_ = "";
    public bool HasClassName {
      get { return hasClassName; }
    }
    public string ClassName {
      get { return className_; }
    }
    
    public const int MethodNamesFieldNumber = 2;
    private pbc::PopsicleList<string> methodNames_ = new pbc::PopsicleList<string>();
    public scg::IList<string> MethodNamesList {
      get { return pbc::Lists.AsReadOnly(methodNames_); }
    }
    public int MethodNamesCount {
      get { return methodNames_.Count; }
    }
    public string GetMethodNames(int index) {
      return methodNames_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _methodInfoFieldNames;
      if (hasClassName) {
        output.WriteString(1, field_names[0], ClassName);
      }
      if (methodNames_.Count > 0) {
        output.WriteStringArray(2, field_names[1], methodNames_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClassName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ClassName);
      }
      {
        int dataSize = 0;
        foreach (string element in MethodNamesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * methodNames_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MethodInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MethodInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MethodInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MethodInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MethodInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MethodInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MethodInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MethodInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MethodInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MethodInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MethodInfo MakeReadOnly() {
      methodNames_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MethodInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MethodInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MethodInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MethodInfo result;
      
      private MethodInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          MethodInfo original = result;
          result = new MethodInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MethodInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.MethodInfo.Descriptor; }
      }
      
      public override MethodInfo DefaultInstanceForType {
        get { return global::BonreePB.MethodInfo.DefaultInstance; }
      }
      
      public override MethodInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MethodInfo) {
          return MergeFrom((MethodInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MethodInfo other) {
        if (other == global::BonreePB.MethodInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClassName) {
          ClassName = other.ClassName;
        }
        if (other.methodNames_.Count != 0) {
          result.methodNames_.Add(other.methodNames_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_methodInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _methodInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasClassName = input.ReadString(ref result.className_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.methodNames_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClassName {
        get { return result.hasClassName; }
      }
      public string ClassName {
        get { return result.ClassName; }
        set { SetClassName(value); }
      }
      public Builder SetClassName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassName = true;
        result.className_ = value;
        return this;
      }
      public Builder ClearClassName() {
        PrepareBuilder();
        result.hasClassName = false;
        result.className_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> MethodNamesList {
        get { return PrepareBuilder().methodNames_; }
      }
      public int MethodNamesCount {
        get { return result.MethodNamesCount; }
      }
      public string GetMethodNames(int index) {
        return result.GetMethodNames(index);
      }
      public Builder SetMethodNames(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.methodNames_[index] = value;
        return this;
      }
      public Builder AddMethodNames(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.methodNames_.Add(value);
        return this;
      }
      public Builder AddRangeMethodNames(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.methodNames_.Add(values);
        return this;
      }
      public Builder ClearMethodNames() {
        PrepareBuilder();
        result.methodNames_.Clear();
        return this;
      }
    }
    static MethodInfo() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SnapshotGathererConfig : pb::GeneratedMessage<SnapshotGathererConfig, SnapshotGathererConfig.Builder> {
    private SnapshotGathererConfig() { }
    private static readonly SnapshotGathererConfig defaultInstance = new SnapshotGathererConfig().MakeReadOnly();
    private static readonly string[] _snapshotGathererConfigFieldNames = new string[] { "enableAllSnapshot", "exceedErrorPercent", "exceedThresholdPercent", "hotspotMethods", "snapshotCountPerMin", "snapshotInterval", "snapshotMin", "snapshotPerMinPerTransaction", "snapshotPercent", "snapshotTryTimesPerMin" };
    private static readonly uint[] _snapshotGathererConfigFieldTags = new uint[] { 56, 16, 8, 74, 24, 40, 32, 64, 80, 48 };
    public static SnapshotGathererConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SnapshotGathererConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SnapshotGathererConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_SnapshotGathererConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SnapshotGathererConfig, SnapshotGathererConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_SnapshotGathererConfig__FieldAccessorTable; }
    }
    
    public const int ExceedThresholdPercentFieldNumber = 1;
    private bool hasExceedThresholdPercent;
    private uint exceedThresholdPercent_;
    public bool HasExceedThresholdPercent {
      get { return hasExceedThresholdPercent; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExceedThresholdPercent {
      get { return exceedThresholdPercent_; }
    }
    
    public const int ExceedErrorPercentFieldNumber = 2;
    private bool hasExceedErrorPercent;
    private uint exceedErrorPercent_;
    public bool HasExceedErrorPercent {
      get { return hasExceedErrorPercent; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExceedErrorPercent {
      get { return exceedErrorPercent_; }
    }
    
    public const int SnapshotCountPerMinFieldNumber = 3;
    private bool hasSnapshotCountPerMin;
    private uint snapshotCountPerMin_;
    public bool HasSnapshotCountPerMin {
      get { return hasSnapshotCountPerMin; }
    }
    [global::System.CLSCompliant(false)]
    public uint SnapshotCountPerMin {
      get { return snapshotCountPerMin_; }
    }
    
    public const int SnapshotMinFieldNumber = 4;
    private bool hasSnapshotMin;
    private uint snapshotMin_;
    public bool HasSnapshotMin {
      get { return hasSnapshotMin; }
    }
    [global::System.CLSCompliant(false)]
    public uint SnapshotMin {
      get { return snapshotMin_; }
    }
    
    public const int SnapshotIntervalFieldNumber = 5;
    private bool hasSnapshotInterval;
    private uint snapshotInterval_;
    public bool HasSnapshotInterval {
      get { return hasSnapshotInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint SnapshotInterval {
      get { return snapshotInterval_; }
    }
    
    public const int SnapshotTryTimesPerMinFieldNumber = 6;
    private bool hasSnapshotTryTimesPerMin;
    private uint snapshotTryTimesPerMin_;
    public bool HasSnapshotTryTimesPerMin {
      get { return hasSnapshotTryTimesPerMin; }
    }
    [global::System.CLSCompliant(false)]
    public uint SnapshotTryTimesPerMin {
      get { return snapshotTryTimesPerMin_; }
    }
    
    public const int EnableAllSnapshotFieldNumber = 7;
    private bool hasEnableAllSnapshot;
    private bool enableAllSnapshot_;
    public bool HasEnableAllSnapshot {
      get { return hasEnableAllSnapshot; }
    }
    public bool EnableAllSnapshot {
      get { return enableAllSnapshot_; }
    }
    
    public const int SnapshotPerMinPerTransactionFieldNumber = 8;
    private bool hasSnapshotPerMinPerTransaction;
    private uint snapshotPerMinPerTransaction_;
    public bool HasSnapshotPerMinPerTransaction {
      get { return hasSnapshotPerMinPerTransaction; }
    }
    [global::System.CLSCompliant(false)]
    public uint SnapshotPerMinPerTransaction {
      get { return snapshotPerMinPerTransaction_; }
    }
    
    public const int HotspotMethodsFieldNumber = 9;
    private pbc::PopsicleList<global::BonreePB.MethodInfo> hotspotMethods_ = new pbc::PopsicleList<global::BonreePB.MethodInfo>();
    public scg::IList<global::BonreePB.MethodInfo> HotspotMethodsList {
      get { return hotspotMethods_; }
    }
    public int HotspotMethodsCount {
      get { return hotspotMethods_.Count; }
    }
    public global::BonreePB.MethodInfo GetHotspotMethods(int index) {
      return hotspotMethods_[index];
    }
    
    public const int SnapshotPercentFieldNumber = 10;
    private bool hasSnapshotPercent;
    private uint snapshotPercent_;
    public bool HasSnapshotPercent {
      get { return hasSnapshotPercent; }
    }
    [global::System.CLSCompliant(false)]
    public uint SnapshotPercent {
      get { return snapshotPercent_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _snapshotGathererConfigFieldNames;
      if (hasExceedThresholdPercent) {
        output.WriteUInt32(1, field_names[2], ExceedThresholdPercent);
      }
      if (hasExceedErrorPercent) {
        output.WriteUInt32(2, field_names[1], ExceedErrorPercent);
      }
      if (hasSnapshotCountPerMin) {
        output.WriteUInt32(3, field_names[4], SnapshotCountPerMin);
      }
      if (hasSnapshotMin) {
        output.WriteUInt32(4, field_names[6], SnapshotMin);
      }
      if (hasSnapshotInterval) {
        output.WriteUInt32(5, field_names[5], SnapshotInterval);
      }
      if (hasSnapshotTryTimesPerMin) {
        output.WriteUInt32(6, field_names[9], SnapshotTryTimesPerMin);
      }
      if (hasEnableAllSnapshot) {
        output.WriteBool(7, field_names[0], EnableAllSnapshot);
      }
      if (hasSnapshotPerMinPerTransaction) {
        output.WriteUInt32(8, field_names[7], SnapshotPerMinPerTransaction);
      }
      if (hotspotMethods_.Count > 0) {
        output.WriteMessageArray(9, field_names[3], hotspotMethods_);
      }
      if (hasSnapshotPercent) {
        output.WriteUInt32(10, field_names[8], SnapshotPercent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasExceedThresholdPercent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ExceedThresholdPercent);
      }
      if (hasExceedErrorPercent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ExceedErrorPercent);
      }
      if (hasSnapshotCountPerMin) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SnapshotCountPerMin);
      }
      if (hasSnapshotMin) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, SnapshotMin);
      }
      if (hasSnapshotInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, SnapshotInterval);
      }
      if (hasSnapshotTryTimesPerMin) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, SnapshotTryTimesPerMin);
      }
      if (hasEnableAllSnapshot) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, EnableAllSnapshot);
      }
      if (hasSnapshotPerMinPerTransaction) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, SnapshotPerMinPerTransaction);
      }
      foreach (global::BonreePB.MethodInfo element in HotspotMethodsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      if (hasSnapshotPercent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, SnapshotPercent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SnapshotGathererConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotGathererConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotGathererConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SnapshotGathererConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SnapshotGathererConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotGathererConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SnapshotGathererConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SnapshotGathererConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SnapshotGathererConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SnapshotGathererConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SnapshotGathererConfig MakeReadOnly() {
      hotspotMethods_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SnapshotGathererConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SnapshotGathererConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SnapshotGathererConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SnapshotGathererConfig result;
      
      private SnapshotGathererConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          SnapshotGathererConfig original = result;
          result = new SnapshotGathererConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SnapshotGathererConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SnapshotGathererConfig.Descriptor; }
      }
      
      public override SnapshotGathererConfig DefaultInstanceForType {
        get { return global::BonreePB.SnapshotGathererConfig.DefaultInstance; }
      }
      
      public override SnapshotGathererConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SnapshotGathererConfig) {
          return MergeFrom((SnapshotGathererConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SnapshotGathererConfig other) {
        if (other == global::BonreePB.SnapshotGathererConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExceedThresholdPercent) {
          ExceedThresholdPercent = other.ExceedThresholdPercent;
        }
        if (other.HasExceedErrorPercent) {
          ExceedErrorPercent = other.ExceedErrorPercent;
        }
        if (other.HasSnapshotCountPerMin) {
          SnapshotCountPerMin = other.SnapshotCountPerMin;
        }
        if (other.HasSnapshotMin) {
          SnapshotMin = other.SnapshotMin;
        }
        if (other.HasSnapshotInterval) {
          SnapshotInterval = other.SnapshotInterval;
        }
        if (other.HasSnapshotTryTimesPerMin) {
          SnapshotTryTimesPerMin = other.SnapshotTryTimesPerMin;
        }
        if (other.HasEnableAllSnapshot) {
          EnableAllSnapshot = other.EnableAllSnapshot;
        }
        if (other.HasSnapshotPerMinPerTransaction) {
          SnapshotPerMinPerTransaction = other.SnapshotPerMinPerTransaction;
        }
        if (other.hotspotMethods_.Count != 0) {
          result.hotspotMethods_.Add(other.hotspotMethods_);
        }
        if (other.HasSnapshotPercent) {
          SnapshotPercent = other.SnapshotPercent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotGathererConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotGathererConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasExceedThresholdPercent = input.ReadUInt32(ref result.exceedThresholdPercent_);
              break;
            }
            case 16: {
              result.hasExceedErrorPercent = input.ReadUInt32(ref result.exceedErrorPercent_);
              break;
            }
            case 24: {
              result.hasSnapshotCountPerMin = input.ReadUInt32(ref result.snapshotCountPerMin_);
              break;
            }
            case 32: {
              result.hasSnapshotMin = input.ReadUInt32(ref result.snapshotMin_);
              break;
            }
            case 40: {
              result.hasSnapshotInterval = input.ReadUInt32(ref result.snapshotInterval_);
              break;
            }
            case 48: {
              result.hasSnapshotTryTimesPerMin = input.ReadUInt32(ref result.snapshotTryTimesPerMin_);
              break;
            }
            case 56: {
              result.hasEnableAllSnapshot = input.ReadBool(ref result.enableAllSnapshot_);
              break;
            }
            case 64: {
              result.hasSnapshotPerMinPerTransaction = input.ReadUInt32(ref result.snapshotPerMinPerTransaction_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.hotspotMethods_, global::BonreePB.MethodInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 80: {
              result.hasSnapshotPercent = input.ReadUInt32(ref result.snapshotPercent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExceedThresholdPercent {
        get { return result.hasExceedThresholdPercent; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExceedThresholdPercent {
        get { return result.ExceedThresholdPercent; }
        set { SetExceedThresholdPercent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExceedThresholdPercent(uint value) {
        PrepareBuilder();
        result.hasExceedThresholdPercent = true;
        result.exceedThresholdPercent_ = value;
        return this;
      }
      public Builder ClearExceedThresholdPercent() {
        PrepareBuilder();
        result.hasExceedThresholdPercent = false;
        result.exceedThresholdPercent_ = 0;
        return this;
      }
      
      public bool HasExceedErrorPercent {
        get { return result.hasExceedErrorPercent; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExceedErrorPercent {
        get { return result.ExceedErrorPercent; }
        set { SetExceedErrorPercent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExceedErrorPercent(uint value) {
        PrepareBuilder();
        result.hasExceedErrorPercent = true;
        result.exceedErrorPercent_ = value;
        return this;
      }
      public Builder ClearExceedErrorPercent() {
        PrepareBuilder();
        result.hasExceedErrorPercent = false;
        result.exceedErrorPercent_ = 0;
        return this;
      }
      
      public bool HasSnapshotCountPerMin {
        get { return result.hasSnapshotCountPerMin; }
      }
      [global::System.CLSCompliant(false)]
      public uint SnapshotCountPerMin {
        get { return result.SnapshotCountPerMin; }
        set { SetSnapshotCountPerMin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnapshotCountPerMin(uint value) {
        PrepareBuilder();
        result.hasSnapshotCountPerMin = true;
        result.snapshotCountPerMin_ = value;
        return this;
      }
      public Builder ClearSnapshotCountPerMin() {
        PrepareBuilder();
        result.hasSnapshotCountPerMin = false;
        result.snapshotCountPerMin_ = 0;
        return this;
      }
      
      public bool HasSnapshotMin {
        get { return result.hasSnapshotMin; }
      }
      [global::System.CLSCompliant(false)]
      public uint SnapshotMin {
        get { return result.SnapshotMin; }
        set { SetSnapshotMin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnapshotMin(uint value) {
        PrepareBuilder();
        result.hasSnapshotMin = true;
        result.snapshotMin_ = value;
        return this;
      }
      public Builder ClearSnapshotMin() {
        PrepareBuilder();
        result.hasSnapshotMin = false;
        result.snapshotMin_ = 0;
        return this;
      }
      
      public bool HasSnapshotInterval {
        get { return result.hasSnapshotInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint SnapshotInterval {
        get { return result.SnapshotInterval; }
        set { SetSnapshotInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnapshotInterval(uint value) {
        PrepareBuilder();
        result.hasSnapshotInterval = true;
        result.snapshotInterval_ = value;
        return this;
      }
      public Builder ClearSnapshotInterval() {
        PrepareBuilder();
        result.hasSnapshotInterval = false;
        result.snapshotInterval_ = 0;
        return this;
      }
      
      public bool HasSnapshotTryTimesPerMin {
        get { return result.hasSnapshotTryTimesPerMin; }
      }
      [global::System.CLSCompliant(false)]
      public uint SnapshotTryTimesPerMin {
        get { return result.SnapshotTryTimesPerMin; }
        set { SetSnapshotTryTimesPerMin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnapshotTryTimesPerMin(uint value) {
        PrepareBuilder();
        result.hasSnapshotTryTimesPerMin = true;
        result.snapshotTryTimesPerMin_ = value;
        return this;
      }
      public Builder ClearSnapshotTryTimesPerMin() {
        PrepareBuilder();
        result.hasSnapshotTryTimesPerMin = false;
        result.snapshotTryTimesPerMin_ = 0;
        return this;
      }
      
      public bool HasEnableAllSnapshot {
        get { return result.hasEnableAllSnapshot; }
      }
      public bool EnableAllSnapshot {
        get { return result.EnableAllSnapshot; }
        set { SetEnableAllSnapshot(value); }
      }
      public Builder SetEnableAllSnapshot(bool value) {
        PrepareBuilder();
        result.hasEnableAllSnapshot = true;
        result.enableAllSnapshot_ = value;
        return this;
      }
      public Builder ClearEnableAllSnapshot() {
        PrepareBuilder();
        result.hasEnableAllSnapshot = false;
        result.enableAllSnapshot_ = false;
        return this;
      }
      
      public bool HasSnapshotPerMinPerTransaction {
        get { return result.hasSnapshotPerMinPerTransaction; }
      }
      [global::System.CLSCompliant(false)]
      public uint SnapshotPerMinPerTransaction {
        get { return result.SnapshotPerMinPerTransaction; }
        set { SetSnapshotPerMinPerTransaction(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnapshotPerMinPerTransaction(uint value) {
        PrepareBuilder();
        result.hasSnapshotPerMinPerTransaction = true;
        result.snapshotPerMinPerTransaction_ = value;
        return this;
      }
      public Builder ClearSnapshotPerMinPerTransaction() {
        PrepareBuilder();
        result.hasSnapshotPerMinPerTransaction = false;
        result.snapshotPerMinPerTransaction_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.MethodInfo> HotspotMethodsList {
        get { return PrepareBuilder().hotspotMethods_; }
      }
      public int HotspotMethodsCount {
        get { return result.HotspotMethodsCount; }
      }
      public global::BonreePB.MethodInfo GetHotspotMethods(int index) {
        return result.GetHotspotMethods(index);
      }
      public Builder SetHotspotMethods(int index, global::BonreePB.MethodInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hotspotMethods_[index] = value;
        return this;
      }
      public Builder SetHotspotMethods(int index, global::BonreePB.MethodInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hotspotMethods_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHotspotMethods(global::BonreePB.MethodInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hotspotMethods_.Add(value);
        return this;
      }
      public Builder AddHotspotMethods(global::BonreePB.MethodInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hotspotMethods_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHotspotMethods(scg::IEnumerable<global::BonreePB.MethodInfo> values) {
        PrepareBuilder();
        result.hotspotMethods_.Add(values);
        return this;
      }
      public Builder ClearHotspotMethods() {
        PrepareBuilder();
        result.hotspotMethods_.Clear();
        return this;
      }
      
      public bool HasSnapshotPercent {
        get { return result.hasSnapshotPercent; }
      }
      [global::System.CLSCompliant(false)]
      public uint SnapshotPercent {
        get { return result.SnapshotPercent; }
        set { SetSnapshotPercent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnapshotPercent(uint value) {
        PrepareBuilder();
        result.hasSnapshotPercent = true;
        result.snapshotPercent_ = value;
        return this;
      }
      public Builder ClearSnapshotPercent() {
        PrepareBuilder();
        result.hasSnapshotPercent = false;
        result.snapshotPercent_ = 0;
        return this;
      }
    }
    static SnapshotGathererConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BTConfig : pb::GeneratedMessage<BTConfig, BTConfig.Builder> {
    private BTConfig() { }
    private static readonly BTConfig defaultInstance = new BTConfig().MakeReadOnly();
    private static readonly string[] _bTConfigFieldNames = new string[] { "filterURIPatterns", "includeURIPatterns", "snapshotURIPatterns" };
    private static readonly uint[] _bTConfigFieldTags = new uint[] { 10, 26, 18 };
    public static BTConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BTConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BTConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_BTConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BTConfig, BTConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_BTConfig__FieldAccessorTable; }
    }
    
    public const int FilterURIPatternsFieldNumber = 1;
    private pbc::PopsicleList<string> filterURIPatterns_ = new pbc::PopsicleList<string>();
    public scg::IList<string> FilterURIPatternsList {
      get { return pbc::Lists.AsReadOnly(filterURIPatterns_); }
    }
    public int FilterURIPatternsCount {
      get { return filterURIPatterns_.Count; }
    }
    public string GetFilterURIPatterns(int index) {
      return filterURIPatterns_[index];
    }
    
    public const int SnapshotURIPatternsFieldNumber = 2;
    private pbc::PopsicleList<string> snapshotURIPatterns_ = new pbc::PopsicleList<string>();
    public scg::IList<string> SnapshotURIPatternsList {
      get { return pbc::Lists.AsReadOnly(snapshotURIPatterns_); }
    }
    public int SnapshotURIPatternsCount {
      get { return snapshotURIPatterns_.Count; }
    }
    public string GetSnapshotURIPatterns(int index) {
      return snapshotURIPatterns_[index];
    }
    
    public const int IncludeURIPatternsFieldNumber = 3;
    private pbc::PopsicleList<string> includeURIPatterns_ = new pbc::PopsicleList<string>();
    public scg::IList<string> IncludeURIPatternsList {
      get { return pbc::Lists.AsReadOnly(includeURIPatterns_); }
    }
    public int IncludeURIPatternsCount {
      get { return includeURIPatterns_.Count; }
    }
    public string GetIncludeURIPatterns(int index) {
      return includeURIPatterns_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bTConfigFieldNames;
      if (filterURIPatterns_.Count > 0) {
        output.WriteStringArray(1, field_names[0], filterURIPatterns_);
      }
      if (snapshotURIPatterns_.Count > 0) {
        output.WriteStringArray(2, field_names[2], snapshotURIPatterns_);
      }
      if (includeURIPatterns_.Count > 0) {
        output.WriteStringArray(3, field_names[1], includeURIPatterns_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (string element in FilterURIPatternsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * filterURIPatterns_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in SnapshotURIPatternsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * snapshotURIPatterns_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in IncludeURIPatternsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * includeURIPatterns_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BTConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BTConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BTConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BTConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BTConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BTConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BTConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BTConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BTConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BTConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BTConfig MakeReadOnly() {
      filterURIPatterns_.MakeReadOnly();
      snapshotURIPatterns_.MakeReadOnly();
      includeURIPatterns_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BTConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BTConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BTConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BTConfig result;
      
      private BTConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          BTConfig original = result;
          result = new BTConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BTConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.BTConfig.Descriptor; }
      }
      
      public override BTConfig DefaultInstanceForType {
        get { return global::BonreePB.BTConfig.DefaultInstance; }
      }
      
      public override BTConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BTConfig) {
          return MergeFrom((BTConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BTConfig other) {
        if (other == global::BonreePB.BTConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.filterURIPatterns_.Count != 0) {
          result.filterURIPatterns_.Add(other.filterURIPatterns_);
        }
        if (other.snapshotURIPatterns_.Count != 0) {
          result.snapshotURIPatterns_.Add(other.snapshotURIPatterns_);
        }
        if (other.includeURIPatterns_.Count != 0) {
          result.includeURIPatterns_.Add(other.includeURIPatterns_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bTConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bTConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.filterURIPatterns_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.snapshotURIPatterns_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.includeURIPatterns_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> FilterURIPatternsList {
        get { return PrepareBuilder().filterURIPatterns_; }
      }
      public int FilterURIPatternsCount {
        get { return result.FilterURIPatternsCount; }
      }
      public string GetFilterURIPatterns(int index) {
        return result.GetFilterURIPatterns(index);
      }
      public Builder SetFilterURIPatterns(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filterURIPatterns_[index] = value;
        return this;
      }
      public Builder AddFilterURIPatterns(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.filterURIPatterns_.Add(value);
        return this;
      }
      public Builder AddRangeFilterURIPatterns(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.filterURIPatterns_.Add(values);
        return this;
      }
      public Builder ClearFilterURIPatterns() {
        PrepareBuilder();
        result.filterURIPatterns_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> SnapshotURIPatternsList {
        get { return PrepareBuilder().snapshotURIPatterns_; }
      }
      public int SnapshotURIPatternsCount {
        get { return result.SnapshotURIPatternsCount; }
      }
      public string GetSnapshotURIPatterns(int index) {
        return result.GetSnapshotURIPatterns(index);
      }
      public Builder SetSnapshotURIPatterns(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshotURIPatterns_[index] = value;
        return this;
      }
      public Builder AddSnapshotURIPatterns(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snapshotURIPatterns_.Add(value);
        return this;
      }
      public Builder AddRangeSnapshotURIPatterns(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.snapshotURIPatterns_.Add(values);
        return this;
      }
      public Builder ClearSnapshotURIPatterns() {
        PrepareBuilder();
        result.snapshotURIPatterns_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> IncludeURIPatternsList {
        get { return PrepareBuilder().includeURIPatterns_; }
      }
      public int IncludeURIPatternsCount {
        get { return result.IncludeURIPatternsCount; }
      }
      public string GetIncludeURIPatterns(int index) {
        return result.GetIncludeURIPatterns(index);
      }
      public Builder SetIncludeURIPatterns(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.includeURIPatterns_[index] = value;
        return this;
      }
      public Builder AddIncludeURIPatterns(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.includeURIPatterns_.Add(value);
        return this;
      }
      public Builder AddRangeIncludeURIPatterns(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.includeURIPatterns_.Add(values);
        return this;
      }
      public Builder ClearIncludeURIPatterns() {
        PrepareBuilder();
        result.includeURIPatterns_.Clear();
        return this;
      }
    }
    static BTConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SocketConfig : pb::GeneratedMessage<SocketConfig, SocketConfig.Builder> {
    private SocketConfig() { }
    private static readonly SocketConfig defaultInstance = new SocketConfig().MakeReadOnly();
    private static readonly string[] _socketConfigFieldNames = new string[] { "btByteCount", "enableSocketMetric", "remoteIps" };
    private static readonly uint[] _socketConfigFieldTags = new uint[] { 24, 8, 18 };
    public static SocketConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SocketConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SocketConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_SocketConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SocketConfig, SocketConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_SocketConfig__FieldAccessorTable; }
    }
    
    public const int EnableSocketMetricFieldNumber = 1;
    private bool hasEnableSocketMetric;
    private bool enableSocketMetric_;
    public bool HasEnableSocketMetric {
      get { return hasEnableSocketMetric; }
    }
    public bool EnableSocketMetric {
      get { return enableSocketMetric_; }
    }
    
    public const int RemoteIpsFieldNumber = 2;
    private pbc::PopsicleList<global::BonreePB.ListenIPAndPort> remoteIps_ = new pbc::PopsicleList<global::BonreePB.ListenIPAndPort>();
    public scg::IList<global::BonreePB.ListenIPAndPort> RemoteIpsList {
      get { return remoteIps_; }
    }
    public int RemoteIpsCount {
      get { return remoteIps_.Count; }
    }
    public global::BonreePB.ListenIPAndPort GetRemoteIps(int index) {
      return remoteIps_[index];
    }
    
    public const int BtByteCountFieldNumber = 3;
    private bool hasBtByteCount;
    private uint btByteCount_;
    public bool HasBtByteCount {
      get { return hasBtByteCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint BtByteCount {
      get { return btByteCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _socketConfigFieldNames;
      if (hasEnableSocketMetric) {
        output.WriteBool(1, field_names[1], EnableSocketMetric);
      }
      if (remoteIps_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], remoteIps_);
      }
      if (hasBtByteCount) {
        output.WriteUInt32(3, field_names[0], BtByteCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEnableSocketMetric) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, EnableSocketMetric);
      }
      foreach (global::BonreePB.ListenIPAndPort element in RemoteIpsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasBtByteCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, BtByteCount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SocketConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SocketConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SocketConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SocketConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SocketConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SocketConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SocketConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SocketConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SocketConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SocketConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SocketConfig MakeReadOnly() {
      remoteIps_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SocketConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SocketConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SocketConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SocketConfig result;
      
      private SocketConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          SocketConfig original = result;
          result = new SocketConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SocketConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.SocketConfig.Descriptor; }
      }
      
      public override SocketConfig DefaultInstanceForType {
        get { return global::BonreePB.SocketConfig.DefaultInstance; }
      }
      
      public override SocketConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SocketConfig) {
          return MergeFrom((SocketConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SocketConfig other) {
        if (other == global::BonreePB.SocketConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEnableSocketMetric) {
          EnableSocketMetric = other.EnableSocketMetric;
        }
        if (other.remoteIps_.Count != 0) {
          result.remoteIps_.Add(other.remoteIps_);
        }
        if (other.HasBtByteCount) {
          BtByteCount = other.BtByteCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_socketConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _socketConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEnableSocketMetric = input.ReadBool(ref result.enableSocketMetric_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.remoteIps_, global::BonreePB.ListenIPAndPort.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasBtByteCount = input.ReadUInt32(ref result.btByteCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEnableSocketMetric {
        get { return result.hasEnableSocketMetric; }
      }
      public bool EnableSocketMetric {
        get { return result.EnableSocketMetric; }
        set { SetEnableSocketMetric(value); }
      }
      public Builder SetEnableSocketMetric(bool value) {
        PrepareBuilder();
        result.hasEnableSocketMetric = true;
        result.enableSocketMetric_ = value;
        return this;
      }
      public Builder ClearEnableSocketMetric() {
        PrepareBuilder();
        result.hasEnableSocketMetric = false;
        result.enableSocketMetric_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.ListenIPAndPort> RemoteIpsList {
        get { return PrepareBuilder().remoteIps_; }
      }
      public int RemoteIpsCount {
        get { return result.RemoteIpsCount; }
      }
      public global::BonreePB.ListenIPAndPort GetRemoteIps(int index) {
        return result.GetRemoteIps(index);
      }
      public Builder SetRemoteIps(int index, global::BonreePB.ListenIPAndPort value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.remoteIps_[index] = value;
        return this;
      }
      public Builder SetRemoteIps(int index, global::BonreePB.ListenIPAndPort.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.remoteIps_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRemoteIps(global::BonreePB.ListenIPAndPort value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.remoteIps_.Add(value);
        return this;
      }
      public Builder AddRemoteIps(global::BonreePB.ListenIPAndPort.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.remoteIps_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRemoteIps(scg::IEnumerable<global::BonreePB.ListenIPAndPort> values) {
        PrepareBuilder();
        result.remoteIps_.Add(values);
        return this;
      }
      public Builder ClearRemoteIps() {
        PrepareBuilder();
        result.remoteIps_.Clear();
        return this;
      }
      
      public bool HasBtByteCount {
        get { return result.hasBtByteCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint BtByteCount {
        get { return result.BtByteCount; }
        set { SetBtByteCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBtByteCount(uint value) {
        PrepareBuilder();
        result.hasBtByteCount = true;
        result.btByteCount_ = value;
        return this;
      }
      public Builder ClearBtByteCount() {
        PrepareBuilder();
        result.hasBtByteCount = false;
        result.btByteCount_ = 0;
        return this;
      }
    }
    static SocketConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ThreadDumpTask : pb::GeneratedMessage<ThreadDumpTask, ThreadDumpTask.Builder> {
    private ThreadDumpTask() { }
    private static readonly ThreadDumpTask defaultInstance = new ThreadDumpTask().MakeReadOnly();
    private static readonly string[] _threadDumpTaskFieldNames = new string[] { "dumpInterval", "dumpTime", "taskGUId", "type" };
    private static readonly uint[] _threadDumpTaskFieldTags = new uint[] { 32, 24, 18, 8 };
    public static ThreadDumpTask DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ThreadDumpTask DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ThreadDumpTask ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ThreadDumpTask__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ThreadDumpTask, ThreadDumpTask.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_ThreadDumpTask__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::BonreePB.ThreadDumpTaskType type_ = global::BonreePB.ThreadDumpTaskType.THREAD_DUMP_TASK_NEW;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.ThreadDumpTaskType Type {
      get { return type_; }
    }
    
    public const int TaskGUIdFieldNumber = 2;
    private bool hasTaskGUId;
    private string taskGUId_ = "";
    public bool HasTaskGUId {
      get { return hasTaskGUId; }
    }
    public string TaskGUId {
      get { return taskGUId_; }
    }
    
    public const int DumpTimeFieldNumber = 3;
    private bool hasDumpTime;
    private uint dumpTime_;
    public bool HasDumpTime {
      get { return hasDumpTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint DumpTime {
      get { return dumpTime_; }
    }
    
    public const int DumpIntervalFieldNumber = 4;
    private bool hasDumpInterval;
    private uint dumpInterval_;
    public bool HasDumpInterval {
      get { return hasDumpInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint DumpInterval {
      get { return dumpInterval_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasTaskGUId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _threadDumpTaskFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[3], (int) Type, Type);
      }
      if (hasTaskGUId) {
        output.WriteString(2, field_names[2], TaskGUId);
      }
      if (hasDumpTime) {
        output.WriteUInt32(3, field_names[1], DumpTime);
      }
      if (hasDumpInterval) {
        output.WriteUInt32(4, field_names[0], DumpInterval);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasTaskGUId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, TaskGUId);
      }
      if (hasDumpTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DumpTime);
      }
      if (hasDumpInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, DumpInterval);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ThreadDumpTask ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadDumpTask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpTask ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadDumpTask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpTask ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadDumpTask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpTask ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ThreadDumpTask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ThreadDumpTask ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadDumpTask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ThreadDumpTask MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ThreadDumpTask prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ThreadDumpTask, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ThreadDumpTask cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ThreadDumpTask result;
      
      private ThreadDumpTask PrepareBuilder() {
        if (resultIsReadOnly) {
          ThreadDumpTask original = result;
          result = new ThreadDumpTask();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ThreadDumpTask MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ThreadDumpTask.Descriptor; }
      }
      
      public override ThreadDumpTask DefaultInstanceForType {
        get { return global::BonreePB.ThreadDumpTask.DefaultInstance; }
      }
      
      public override ThreadDumpTask BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ThreadDumpTask) {
          return MergeFrom((ThreadDumpTask) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ThreadDumpTask other) {
        if (other == global::BonreePB.ThreadDumpTask.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasTaskGUId) {
          TaskGUId = other.TaskGUId;
        }
        if (other.HasDumpTime) {
          DumpTime = other.DumpTime;
        }
        if (other.HasDumpInterval) {
          DumpInterval = other.DumpInterval;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_threadDumpTaskFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _threadDumpTaskFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasTaskGUId = input.ReadString(ref result.taskGUId_);
              break;
            }
            case 24: {
              result.hasDumpTime = input.ReadUInt32(ref result.dumpTime_);
              break;
            }
            case 32: {
              result.hasDumpInterval = input.ReadUInt32(ref result.dumpInterval_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.ThreadDumpTaskType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.ThreadDumpTaskType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.ThreadDumpTaskType.THREAD_DUMP_TASK_NEW;
        return this;
      }
      
      public bool HasTaskGUId {
        get { return result.hasTaskGUId; }
      }
      public string TaskGUId {
        get { return result.TaskGUId; }
        set { SetTaskGUId(value); }
      }
      public Builder SetTaskGUId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskGUId = true;
        result.taskGUId_ = value;
        return this;
      }
      public Builder ClearTaskGUId() {
        PrepareBuilder();
        result.hasTaskGUId = false;
        result.taskGUId_ = "";
        return this;
      }
      
      public bool HasDumpTime {
        get { return result.hasDumpTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint DumpTime {
        get { return result.DumpTime; }
        set { SetDumpTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDumpTime(uint value) {
        PrepareBuilder();
        result.hasDumpTime = true;
        result.dumpTime_ = value;
        return this;
      }
      public Builder ClearDumpTime() {
        PrepareBuilder();
        result.hasDumpTime = false;
        result.dumpTime_ = 0;
        return this;
      }
      
      public bool HasDumpInterval {
        get { return result.hasDumpInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint DumpInterval {
        get { return result.DumpInterval; }
        set { SetDumpInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDumpInterval(uint value) {
        PrepareBuilder();
        result.hasDumpInterval = true;
        result.dumpInterval_ = value;
        return this;
      }
      public Builder ClearDumpInterval() {
        PrepareBuilder();
        result.hasDumpInterval = false;
        result.dumpInterval_ = 0;
        return this;
      }
    }
    static ThreadDumpTask() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CustomBTRule : pb::GeneratedMessage<CustomBTRule, CustomBTRule.Builder> {
    private CustomBTRule() { }
    private static readonly CustomBTRule defaultInstance = new CustomBTRule().MakeReadOnly();
    private static readonly string[] _customBTRuleFieldNames = new string[] { "classMatchStr", "classMatchType", "classNameMatchType", "customBtNameFlags", "enable", "methodMatchStr", "methodNameMatchTYpe", "ruleName", "type" };
    private static readonly uint[] _customBTRuleFieldTags = new uint[] { 50, 32, 40, 72, 16, 66, 56, 10, 24 };
    public static CustomBTRule DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CustomBTRule DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CustomBTRule ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_CustomBTRule__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CustomBTRule, CustomBTRule.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_CustomBTRule__FieldAccessorTable; }
    }
    
    public const int RuleNameFieldNumber = 1;
    private bool hasRuleName;
    private string ruleName_ = "";
    public bool HasRuleName {
      get { return hasRuleName; }
    }
    public string RuleName {
      get { return ruleName_; }
    }
    
    public const int EnableFieldNumber = 2;
    private bool hasEnable;
    private bool enable_;
    public bool HasEnable {
      get { return hasEnable; }
    }
    public bool Enable {
      get { return enable_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::BonreePB.BTType type_ = global::BonreePB.BTType.BT_JAVA_EJB;
    public bool HasType {
      get { return hasType; }
    }
    public global::BonreePB.BTType Type {
      get { return type_; }
    }
    
    public const int ClassMatchTypeFieldNumber = 4;
    private bool hasClassMatchType;
    private global::BonreePB.ClassMatchType classMatchType_ = global::BonreePB.ClassMatchType.MATCH_CLASS_WITH_EXACT_CLASS;
    public bool HasClassMatchType {
      get { return hasClassMatchType; }
    }
    public global::BonreePB.ClassMatchType ClassMatchType {
      get { return classMatchType_; }
    }
    
    public const int ClassNameMatchTypeFieldNumber = 5;
    private bool hasClassNameMatchType;
    private global::BonreePB.StringMatchType classNameMatchType_ = global::BonreePB.StringMatchType.MATCH_STRING_TYPE_EQUALS;
    public bool HasClassNameMatchType {
      get { return hasClassNameMatchType; }
    }
    public global::BonreePB.StringMatchType ClassNameMatchType {
      get { return classNameMatchType_; }
    }
    
    public const int ClassMatchStrFieldNumber = 6;
    private bool hasClassMatchStr;
    private string classMatchStr_ = "";
    public bool HasClassMatchStr {
      get { return hasClassMatchStr; }
    }
    public string ClassMatchStr {
      get { return classMatchStr_; }
    }
    
    public const int MethodNameMatchTYpeFieldNumber = 7;
    private bool hasMethodNameMatchTYpe;
    private global::BonreePB.StringMatchType methodNameMatchTYpe_ = global::BonreePB.StringMatchType.MATCH_STRING_TYPE_EQUALS;
    public bool HasMethodNameMatchTYpe {
      get { return hasMethodNameMatchTYpe; }
    }
    public global::BonreePB.StringMatchType MethodNameMatchTYpe {
      get { return methodNameMatchTYpe_; }
    }
    
    public const int MethodMatchStrFieldNumber = 8;
    private bool hasMethodMatchStr;
    private string methodMatchStr_ = "";
    public bool HasMethodMatchStr {
      get { return hasMethodMatchStr; }
    }
    public string MethodMatchStr {
      get { return methodMatchStr_; }
    }
    
    public const int CustomBtNameFlagsFieldNumber = 9;
    private bool hasCustomBtNameFlags;
    private uint customBtNameFlags_;
    public bool HasCustomBtNameFlags {
      get { return hasCustomBtNameFlags; }
    }
    [global::System.CLSCompliant(false)]
    public uint CustomBtNameFlags {
      get { return customBtNameFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _customBTRuleFieldNames;
      if (hasRuleName) {
        output.WriteString(1, field_names[7], RuleName);
      }
      if (hasEnable) {
        output.WriteBool(2, field_names[4], Enable);
      }
      if (hasType) {
        output.WriteEnum(3, field_names[8], (int) Type, Type);
      }
      if (hasClassMatchType) {
        output.WriteEnum(4, field_names[1], (int) ClassMatchType, ClassMatchType);
      }
      if (hasClassNameMatchType) {
        output.WriteEnum(5, field_names[2], (int) ClassNameMatchType, ClassNameMatchType);
      }
      if (hasClassMatchStr) {
        output.WriteString(6, field_names[0], ClassMatchStr);
      }
      if (hasMethodNameMatchTYpe) {
        output.WriteEnum(7, field_names[6], (int) MethodNameMatchTYpe, MethodNameMatchTYpe);
      }
      if (hasMethodMatchStr) {
        output.WriteString(8, field_names[5], MethodMatchStr);
      }
      if (hasCustomBtNameFlags) {
        output.WriteUInt32(9, field_names[3], CustomBtNameFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRuleName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, RuleName);
      }
      if (hasEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Enable);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
      }
      if (hasClassMatchType) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) ClassMatchType);
      }
      if (hasClassNameMatchType) {
        size += pb::CodedOutputStream.ComputeEnumSize(5, (int) ClassNameMatchType);
      }
      if (hasClassMatchStr) {
        size += pb::CodedOutputStream.ComputeStringSize(6, ClassMatchStr);
      }
      if (hasMethodNameMatchTYpe) {
        size += pb::CodedOutputStream.ComputeEnumSize(7, (int) MethodNameMatchTYpe);
      }
      if (hasMethodMatchStr) {
        size += pb::CodedOutputStream.ComputeStringSize(8, MethodMatchStr);
      }
      if (hasCustomBtNameFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, CustomBtNameFlags);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CustomBTRule ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CustomBTRule ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CustomBTRule ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CustomBTRule ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CustomBTRule ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CustomBTRule ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CustomBTRule ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CustomBTRule ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CustomBTRule ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CustomBTRule ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CustomBTRule MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CustomBTRule prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CustomBTRule, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CustomBTRule cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CustomBTRule result;
      
      private CustomBTRule PrepareBuilder() {
        if (resultIsReadOnly) {
          CustomBTRule original = result;
          result = new CustomBTRule();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CustomBTRule MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.CustomBTRule.Descriptor; }
      }
      
      public override CustomBTRule DefaultInstanceForType {
        get { return global::BonreePB.CustomBTRule.DefaultInstance; }
      }
      
      public override CustomBTRule BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CustomBTRule) {
          return MergeFrom((CustomBTRule) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CustomBTRule other) {
        if (other == global::BonreePB.CustomBTRule.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRuleName) {
          RuleName = other.RuleName;
        }
        if (other.HasEnable) {
          Enable = other.Enable;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasClassMatchType) {
          ClassMatchType = other.ClassMatchType;
        }
        if (other.HasClassNameMatchType) {
          ClassNameMatchType = other.ClassNameMatchType;
        }
        if (other.HasClassMatchStr) {
          ClassMatchStr = other.ClassMatchStr;
        }
        if (other.HasMethodNameMatchTYpe) {
          MethodNameMatchTYpe = other.MethodNameMatchTYpe;
        }
        if (other.HasMethodMatchStr) {
          MethodMatchStr = other.MethodMatchStr;
        }
        if (other.HasCustomBtNameFlags) {
          CustomBtNameFlags = other.CustomBtNameFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_customBTRuleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _customBTRuleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRuleName = input.ReadString(ref result.ruleName_);
              break;
            }
            case 16: {
              result.hasEnable = input.ReadBool(ref result.enable_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.classMatchType_, out unknown)) {
                result.hasClassMatchType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.classNameMatchType_, out unknown)) {
                result.hasClassNameMatchType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
            case 50: {
              result.hasClassMatchStr = input.ReadString(ref result.classMatchStr_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.methodNameMatchTYpe_, out unknown)) {
                result.hasMethodNameMatchTYpe = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 66: {
              result.hasMethodMatchStr = input.ReadString(ref result.methodMatchStr_);
              break;
            }
            case 72: {
              result.hasCustomBtNameFlags = input.ReadUInt32(ref result.customBtNameFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRuleName {
        get { return result.hasRuleName; }
      }
      public string RuleName {
        get { return result.RuleName; }
        set { SetRuleName(value); }
      }
      public Builder SetRuleName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRuleName = true;
        result.ruleName_ = value;
        return this;
      }
      public Builder ClearRuleName() {
        PrepareBuilder();
        result.hasRuleName = false;
        result.ruleName_ = "";
        return this;
      }
      
      public bool HasEnable {
        get { return result.hasEnable; }
      }
      public bool Enable {
        get { return result.Enable; }
        set { SetEnable(value); }
      }
      public Builder SetEnable(bool value) {
        PrepareBuilder();
        result.hasEnable = true;
        result.enable_ = value;
        return this;
      }
      public Builder ClearEnable() {
        PrepareBuilder();
        result.hasEnable = false;
        result.enable_ = false;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::BonreePB.BTType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::BonreePB.BTType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::BonreePB.BTType.BT_JAVA_EJB;
        return this;
      }
      
      public bool HasClassMatchType {
       get { return result.hasClassMatchType; }
      }
      public global::BonreePB.ClassMatchType ClassMatchType {
        get { return result.ClassMatchType; }
        set { SetClassMatchType(value); }
      }
      public Builder SetClassMatchType(global::BonreePB.ClassMatchType value) {
        PrepareBuilder();
        result.hasClassMatchType = true;
        result.classMatchType_ = value;
        return this;
      }
      public Builder ClearClassMatchType() {
        PrepareBuilder();
        result.hasClassMatchType = false;
        result.classMatchType_ = global::BonreePB.ClassMatchType.MATCH_CLASS_WITH_EXACT_CLASS;
        return this;
      }
      
      public bool HasClassNameMatchType {
       get { return result.hasClassNameMatchType; }
      }
      public global::BonreePB.StringMatchType ClassNameMatchType {
        get { return result.ClassNameMatchType; }
        set { SetClassNameMatchType(value); }
      }
      public Builder SetClassNameMatchType(global::BonreePB.StringMatchType value) {
        PrepareBuilder();
        result.hasClassNameMatchType = true;
        result.classNameMatchType_ = value;
        return this;
      }
      public Builder ClearClassNameMatchType() {
        PrepareBuilder();
        result.hasClassNameMatchType = false;
        result.classNameMatchType_ = global::BonreePB.StringMatchType.MATCH_STRING_TYPE_EQUALS;
        return this;
      }
      
      public bool HasClassMatchStr {
        get { return result.hasClassMatchStr; }
      }
      public string ClassMatchStr {
        get { return result.ClassMatchStr; }
        set { SetClassMatchStr(value); }
      }
      public Builder SetClassMatchStr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassMatchStr = true;
        result.classMatchStr_ = value;
        return this;
      }
      public Builder ClearClassMatchStr() {
        PrepareBuilder();
        result.hasClassMatchStr = false;
        result.classMatchStr_ = "";
        return this;
      }
      
      public bool HasMethodNameMatchTYpe {
       get { return result.hasMethodNameMatchTYpe; }
      }
      public global::BonreePB.StringMatchType MethodNameMatchTYpe {
        get { return result.MethodNameMatchTYpe; }
        set { SetMethodNameMatchTYpe(value); }
      }
      public Builder SetMethodNameMatchTYpe(global::BonreePB.StringMatchType value) {
        PrepareBuilder();
        result.hasMethodNameMatchTYpe = true;
        result.methodNameMatchTYpe_ = value;
        return this;
      }
      public Builder ClearMethodNameMatchTYpe() {
        PrepareBuilder();
        result.hasMethodNameMatchTYpe = false;
        result.methodNameMatchTYpe_ = global::BonreePB.StringMatchType.MATCH_STRING_TYPE_EQUALS;
        return this;
      }
      
      public bool HasMethodMatchStr {
        get { return result.hasMethodMatchStr; }
      }
      public string MethodMatchStr {
        get { return result.MethodMatchStr; }
        set { SetMethodMatchStr(value); }
      }
      public Builder SetMethodMatchStr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodMatchStr = true;
        result.methodMatchStr_ = value;
        return this;
      }
      public Builder ClearMethodMatchStr() {
        PrepareBuilder();
        result.hasMethodMatchStr = false;
        result.methodMatchStr_ = "";
        return this;
      }
      
      public bool HasCustomBtNameFlags {
        get { return result.hasCustomBtNameFlags; }
      }
      [global::System.CLSCompliant(false)]
      public uint CustomBtNameFlags {
        get { return result.CustomBtNameFlags; }
        set { SetCustomBtNameFlags(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCustomBtNameFlags(uint value) {
        PrepareBuilder();
        result.hasCustomBtNameFlags = true;
        result.customBtNameFlags_ = value;
        return this;
      }
      public Builder ClearCustomBtNameFlags() {
        PrepareBuilder();
        result.hasCustomBtNameFlags = false;
        result.customBtNameFlags_ = 0;
        return this;
      }
    }
    static CustomBTRule() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CustomBTRules : pb::GeneratedMessage<CustomBTRules, CustomBTRules.Builder> {
    private CustomBTRules() { }
    private static readonly CustomBTRules defaultInstance = new CustomBTRules().MakeReadOnly();
    private static readonly string[] _customBTRulesFieldNames = new string[] { "customBTRules" };
    private static readonly uint[] _customBTRulesFieldTags = new uint[] { 10 };
    public static CustomBTRules DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CustomBTRules DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CustomBTRules ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_CustomBTRules__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CustomBTRules, CustomBTRules.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_CustomBTRules__FieldAccessorTable; }
    }
    
    public const int CustomBTRules_FieldNumber = 1;
    private pbc::PopsicleList<global::BonreePB.CustomBTRule> customBTRules_ = new pbc::PopsicleList<global::BonreePB.CustomBTRule>();
    public scg::IList<global::BonreePB.CustomBTRule> CustomBTRules_List {
      get { return customBTRules_; }
    }
    public int CustomBTRules_Count {
      get { return customBTRules_.Count; }
    }
    public global::BonreePB.CustomBTRule GetCustomBTRules_(int index) {
      return customBTRules_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _customBTRulesFieldNames;
      if (customBTRules_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], customBTRules_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::BonreePB.CustomBTRule element in CustomBTRules_List) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CustomBTRules ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CustomBTRules ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CustomBTRules ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CustomBTRules ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CustomBTRules ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CustomBTRules ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CustomBTRules ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CustomBTRules ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CustomBTRules ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CustomBTRules ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CustomBTRules MakeReadOnly() {
      customBTRules_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CustomBTRules prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CustomBTRules, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CustomBTRules cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CustomBTRules result;
      
      private CustomBTRules PrepareBuilder() {
        if (resultIsReadOnly) {
          CustomBTRules original = result;
          result = new CustomBTRules();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CustomBTRules MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.CustomBTRules.Descriptor; }
      }
      
      public override CustomBTRules DefaultInstanceForType {
        get { return global::BonreePB.CustomBTRules.DefaultInstance; }
      }
      
      public override CustomBTRules BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CustomBTRules) {
          return MergeFrom((CustomBTRules) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CustomBTRules other) {
        if (other == global::BonreePB.CustomBTRules.DefaultInstance) return this;
        PrepareBuilder();
        if (other.customBTRules_.Count != 0) {
          result.customBTRules_.Add(other.customBTRules_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_customBTRulesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _customBTRulesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.customBTRules_, global::BonreePB.CustomBTRule.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::BonreePB.CustomBTRule> CustomBTRules_List {
        get { return PrepareBuilder().customBTRules_; }
      }
      public int CustomBTRules_Count {
        get { return result.CustomBTRules_Count; }
      }
      public global::BonreePB.CustomBTRule GetCustomBTRules_(int index) {
        return result.GetCustomBTRules_(index);
      }
      public Builder SetCustomBTRules_(int index, global::BonreePB.CustomBTRule value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.customBTRules_[index] = value;
        return this;
      }
      public Builder SetCustomBTRules_(int index, global::BonreePB.CustomBTRule.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.customBTRules_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCustomBTRules_(global::BonreePB.CustomBTRule value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.customBTRules_.Add(value);
        return this;
      }
      public Builder AddCustomBTRules_(global::BonreePB.CustomBTRule.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.customBTRules_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCustomBTRules_(scg::IEnumerable<global::BonreePB.CustomBTRule> values) {
        PrepareBuilder();
        result.customBTRules_.Add(values);
        return this;
      }
      public Builder ClearCustomBTRules_() {
        PrepareBuilder();
        result.customBTRules_.Clear();
        return this;
      }
    }
    static CustomBTRules() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class InjectJSConfig : pb::GeneratedMessage<InjectJSConfig, InjectJSConfig.Builder> {
    private InjectJSConfig() { }
    private static readonly InjectJSConfig defaultInstance = new InjectJSConfig().MakeReadOnly();
    private static readonly string[] _injectJSConfigFieldNames = new string[] { "enable", "js", "jsMd5" };
    private static readonly uint[] _injectJSConfigFieldTags = new uint[] { 8, 26, 18 };
    public static InjectJSConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InjectJSConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InjectJSConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_InjectJSConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InjectJSConfig, InjectJSConfig.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_InjectJSConfig__FieldAccessorTable; }
    }
    
    public const int EnableFieldNumber = 1;
    private bool hasEnable;
    private bool enable_;
    public bool HasEnable {
      get { return hasEnable; }
    }
    public bool Enable {
      get { return enable_; }
    }
    
    public const int JsMd5FieldNumber = 2;
    private bool hasJsMd5;
    private string jsMd5_ = "";
    public bool HasJsMd5 {
      get { return hasJsMd5; }
    }
    public string JsMd5 {
      get { return jsMd5_; }
    }
    
    public const int JsFieldNumber = 3;
    private bool hasJs;
    private string js_ = "";
    public bool HasJs {
      get { return hasJs; }
    }
    public string Js {
      get { return js_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _injectJSConfigFieldNames;
      if (hasEnable) {
        output.WriteBool(1, field_names[0], Enable);
      }
      if (hasJsMd5) {
        output.WriteString(2, field_names[2], JsMd5);
      }
      if (hasJs) {
        output.WriteString(3, field_names[1], Js);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Enable);
      }
      if (hasJsMd5) {
        size += pb::CodedOutputStream.ComputeStringSize(2, JsMd5);
      }
      if (hasJs) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Js);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static InjectJSConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InjectJSConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InjectJSConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InjectJSConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InjectJSConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InjectJSConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InjectJSConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InjectJSConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InjectJSConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InjectJSConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InjectJSConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InjectJSConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<InjectJSConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InjectJSConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InjectJSConfig result;
      
      private InjectJSConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          InjectJSConfig original = result;
          result = new InjectJSConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InjectJSConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.InjectJSConfig.Descriptor; }
      }
      
      public override InjectJSConfig DefaultInstanceForType {
        get { return global::BonreePB.InjectJSConfig.DefaultInstance; }
      }
      
      public override InjectJSConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InjectJSConfig) {
          return MergeFrom((InjectJSConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InjectJSConfig other) {
        if (other == global::BonreePB.InjectJSConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEnable) {
          Enable = other.Enable;
        }
        if (other.HasJsMd5) {
          JsMd5 = other.JsMd5;
        }
        if (other.HasJs) {
          Js = other.Js;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_injectJSConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _injectJSConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEnable = input.ReadBool(ref result.enable_);
              break;
            }
            case 18: {
              result.hasJsMd5 = input.ReadString(ref result.jsMd5_);
              break;
            }
            case 26: {
              result.hasJs = input.ReadString(ref result.js_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEnable {
        get { return result.hasEnable; }
      }
      public bool Enable {
        get { return result.Enable; }
        set { SetEnable(value); }
      }
      public Builder SetEnable(bool value) {
        PrepareBuilder();
        result.hasEnable = true;
        result.enable_ = value;
        return this;
      }
      public Builder ClearEnable() {
        PrepareBuilder();
        result.hasEnable = false;
        result.enable_ = false;
        return this;
      }
      
      public bool HasJsMd5 {
        get { return result.hasJsMd5; }
      }
      public string JsMd5 {
        get { return result.JsMd5; }
        set { SetJsMd5(value); }
      }
      public Builder SetJsMd5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJsMd5 = true;
        result.jsMd5_ = value;
        return this;
      }
      public Builder ClearJsMd5() {
        PrepareBuilder();
        result.hasJsMd5 = false;
        result.jsMd5_ = "";
        return this;
      }
      
      public bool HasJs {
        get { return result.hasJs; }
      }
      public string Js {
        get { return result.Js; }
        set { SetJs(value); }
      }
      public Builder SetJs(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJs = true;
        result.js_ = value;
        return this;
      }
      public Builder ClearJs() {
        PrepareBuilder();
        result.hasJs = false;
        result.js_ = "";
        return this;
      }
    }
    static InjectJSConfig() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class configReq : pb::GeneratedMessage<configReq, configReq.Builder> {
    private configReq() { }
    private static readonly configReq defaultInstance = new configReq().MakeReadOnly();
    private static readonly string[] _configReqFieldNames = new string[] { "agentIDS", "containerInfo", "lastConfigTime", "lastJsMd5", "lastModifyTime", "nodeInfo" };
    private static readonly uint[] _configReqFieldTags = new uint[] { 26, 10, 32, 50, 40, 18 };
    public static configReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override configReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override configReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_configReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<configReq, configReq.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_configReq__FieldAccessorTable; }
    }
    
    public const int ContainerInfoFieldNumber = 1;
    private bool hasContainerInfo;
    private global::BonreePB.ContainerInfo containerInfo_;
    public bool HasContainerInfo {
      get { return hasContainerInfo; }
    }
    public global::BonreePB.ContainerInfo ContainerInfo {
      get { return containerInfo_ ?? global::BonreePB.ContainerInfo.DefaultInstance; }
    }
    
    public const int NodeInfoFieldNumber = 2;
    private bool hasNodeInfo;
    private global::BonreePB.NodeInfo nodeInfo_;
    public bool HasNodeInfo {
      get { return hasNodeInfo; }
    }
    public global::BonreePB.NodeInfo NodeInfo {
      get { return nodeInfo_ ?? global::BonreePB.NodeInfo.DefaultInstance; }
    }
    
    public const int AgentIDSFieldNumber = 3;
    private bool hasAgentIDS;
    private global::BonreePB.AgentIdentity agentIDS_;
    public bool HasAgentIDS {
      get { return hasAgentIDS; }
    }
    public global::BonreePB.AgentIdentity AgentIDS {
      get { return agentIDS_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int LastConfigTimeFieldNumber = 4;
    private bool hasLastConfigTime;
    private ulong lastConfigTime_;
    public bool HasLastConfigTime {
      get { return hasLastConfigTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong LastConfigTime {
      get { return lastConfigTime_; }
    }
    
    public const int LastModifyTimeFieldNumber = 5;
    private bool hasLastModifyTime;
    private ulong lastModifyTime_;
    public bool HasLastModifyTime {
      get { return hasLastModifyTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong LastModifyTime {
      get { return lastModifyTime_; }
    }
    
    public const int LastJsMd5FieldNumber = 6;
    private bool hasLastJsMd5;
    private string lastJsMd5_ = "";
    public bool HasLastJsMd5 {
      get { return hasLastJsMd5; }
    }
    public string LastJsMd5 {
      get { return lastJsMd5_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _configReqFieldNames;
      if (hasContainerInfo) {
        output.WriteMessage(1, field_names[1], ContainerInfo);
      }
      if (hasNodeInfo) {
        output.WriteMessage(2, field_names[5], NodeInfo);
      }
      if (hasAgentIDS) {
        output.WriteMessage(3, field_names[0], AgentIDS);
      }
      if (hasLastConfigTime) {
        output.WriteUInt64(4, field_names[2], LastConfigTime);
      }
      if (hasLastModifyTime) {
        output.WriteUInt64(5, field_names[4], LastModifyTime);
      }
      if (hasLastJsMd5) {
        output.WriteString(6, field_names[3], LastJsMd5);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasContainerInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, ContainerInfo);
      }
      if (hasNodeInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, NodeInfo);
      }
      if (hasAgentIDS) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, AgentIDS);
      }
      if (hasLastConfigTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, LastConfigTime);
      }
      if (hasLastModifyTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, LastModifyTime);
      }
      if (hasLastJsMd5) {
        size += pb::CodedOutputStream.ComputeStringSize(6, LastJsMd5);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static configReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static configReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static configReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static configReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static configReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static configReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static configReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static configReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static configReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static configReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private configReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(configReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<configReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(configReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private configReq result;
      
      private configReq PrepareBuilder() {
        if (resultIsReadOnly) {
          configReq original = result;
          result = new configReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override configReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.configReq.Descriptor; }
      }
      
      public override configReq DefaultInstanceForType {
        get { return global::BonreePB.configReq.DefaultInstance; }
      }
      
      public override configReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is configReq) {
          return MergeFrom((configReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(configReq other) {
        if (other == global::BonreePB.configReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContainerInfo) {
          MergeContainerInfo(other.ContainerInfo);
        }
        if (other.HasNodeInfo) {
          MergeNodeInfo(other.NodeInfo);
        }
        if (other.HasAgentIDS) {
          MergeAgentIDS(other.AgentIDS);
        }
        if (other.HasLastConfigTime) {
          LastConfigTime = other.LastConfigTime;
        }
        if (other.HasLastModifyTime) {
          LastModifyTime = other.LastModifyTime;
        }
        if (other.HasLastJsMd5) {
          LastJsMd5 = other.LastJsMd5;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_configReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _configReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.ContainerInfo.Builder subBuilder = global::BonreePB.ContainerInfo.CreateBuilder();
              if (result.hasContainerInfo) {
                subBuilder.MergeFrom(ContainerInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContainerInfo = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::BonreePB.NodeInfo.Builder subBuilder = global::BonreePB.NodeInfo.CreateBuilder();
              if (result.hasNodeInfo) {
                subBuilder.MergeFrom(NodeInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NodeInfo = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIDS) {
                subBuilder.MergeFrom(AgentIDS);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIDS = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLastConfigTime = input.ReadUInt64(ref result.lastConfigTime_);
              break;
            }
            case 40: {
              result.hasLastModifyTime = input.ReadUInt64(ref result.lastModifyTime_);
              break;
            }
            case 50: {
              result.hasLastJsMd5 = input.ReadString(ref result.lastJsMd5_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContainerInfo {
       get { return result.hasContainerInfo; }
      }
      public global::BonreePB.ContainerInfo ContainerInfo {
        get { return result.ContainerInfo; }
        set { SetContainerInfo(value); }
      }
      public Builder SetContainerInfo(global::BonreePB.ContainerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContainerInfo = true;
        result.containerInfo_ = value;
        return this;
      }
      public Builder SetContainerInfo(global::BonreePB.ContainerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContainerInfo = true;
        result.containerInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContainerInfo(global::BonreePB.ContainerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContainerInfo &&
            result.containerInfo_ != global::BonreePB.ContainerInfo.DefaultInstance) {
            result.containerInfo_ = global::BonreePB.ContainerInfo.CreateBuilder(result.containerInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.containerInfo_ = value;
        }
        result.hasContainerInfo = true;
        return this;
      }
      public Builder ClearContainerInfo() {
        PrepareBuilder();
        result.hasContainerInfo = false;
        result.containerInfo_ = null;
        return this;
      }
      
      public bool HasNodeInfo {
       get { return result.hasNodeInfo; }
      }
      public global::BonreePB.NodeInfo NodeInfo {
        get { return result.NodeInfo; }
        set { SetNodeInfo(value); }
      }
      public Builder SetNodeInfo(global::BonreePB.NodeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNodeInfo = true;
        result.nodeInfo_ = value;
        return this;
      }
      public Builder SetNodeInfo(global::BonreePB.NodeInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNodeInfo = true;
        result.nodeInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNodeInfo(global::BonreePB.NodeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNodeInfo &&
            result.nodeInfo_ != global::BonreePB.NodeInfo.DefaultInstance) {
            result.nodeInfo_ = global::BonreePB.NodeInfo.CreateBuilder(result.nodeInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.nodeInfo_ = value;
        }
        result.hasNodeInfo = true;
        return this;
      }
      public Builder ClearNodeInfo() {
        PrepareBuilder();
        result.hasNodeInfo = false;
        result.nodeInfo_ = null;
        return this;
      }
      
      public bool HasAgentIDS {
       get { return result.hasAgentIDS; }
      }
      public global::BonreePB.AgentIdentity AgentIDS {
        get { return result.AgentIDS; }
        set { SetAgentIDS(value); }
      }
      public Builder SetAgentIDS(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIDS = true;
        result.agentIDS_ = value;
        return this;
      }
      public Builder SetAgentIDS(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIDS = true;
        result.agentIDS_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIDS(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIDS &&
            result.agentIDS_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIDS_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIDS_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIDS_ = value;
        }
        result.hasAgentIDS = true;
        return this;
      }
      public Builder ClearAgentIDS() {
        PrepareBuilder();
        result.hasAgentIDS = false;
        result.agentIDS_ = null;
        return this;
      }
      
      public bool HasLastConfigTime {
        get { return result.hasLastConfigTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong LastConfigTime {
        get { return result.LastConfigTime; }
        set { SetLastConfigTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLastConfigTime(ulong value) {
        PrepareBuilder();
        result.hasLastConfigTime = true;
        result.lastConfigTime_ = value;
        return this;
      }
      public Builder ClearLastConfigTime() {
        PrepareBuilder();
        result.hasLastConfigTime = false;
        result.lastConfigTime_ = 0UL;
        return this;
      }
      
      public bool HasLastModifyTime {
        get { return result.hasLastModifyTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong LastModifyTime {
        get { return result.LastModifyTime; }
        set { SetLastModifyTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLastModifyTime(ulong value) {
        PrepareBuilder();
        result.hasLastModifyTime = true;
        result.lastModifyTime_ = value;
        return this;
      }
      public Builder ClearLastModifyTime() {
        PrepareBuilder();
        result.hasLastModifyTime = false;
        result.lastModifyTime_ = 0UL;
        return this;
      }
      
      public bool HasLastJsMd5 {
        get { return result.hasLastJsMd5; }
      }
      public string LastJsMd5 {
        get { return result.LastJsMd5; }
        set { SetLastJsMd5(value); }
      }
      public Builder SetLastJsMd5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastJsMd5 = true;
        result.lastJsMd5_ = value;
        return this;
      }
      public Builder ClearLastJsMd5() {
        PrepareBuilder();
        result.hasLastJsMd5 = false;
        result.lastJsMd5_ = "";
        return this;
      }
    }
    static configReq() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class configResp : pb::GeneratedMessage<configResp, configResp.Builder> {
    private configResp() { }
    private static readonly configResp defaultInstance = new configResp().MakeReadOnly();
    private static readonly string[] _configRespFieldNames = new string[] { "agentIDS", "appConfig", "appGatherConfig", "btConfig", "callgraphConfig", "configTime", "customBTRules", "enable", "errConfig", "jsConfig", "modifyTime", "reRegAgent", "snapshotGathererCfg", "socketConfig", "threadDumpTask" };
    private static readonly uint[] _configRespFieldTags = new uint[] { 10, 50, 58, 74, 42, 16, 98, 24, 34, 114, 104, 120, 66, 82, 90 };
    public static configResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override configResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override configResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_configResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<configResp, configResp.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbConfig.internal__static_BonreePB_configResp__FieldAccessorTable; }
    }
    
    public const int AgentIDSFieldNumber = 1;
    private bool hasAgentIDS;
    private global::BonreePB.AgentIdentity agentIDS_;
    public bool HasAgentIDS {
      get { return hasAgentIDS; }
    }
    public global::BonreePB.AgentIdentity AgentIDS {
      get { return agentIDS_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int ConfigTimeFieldNumber = 2;
    private bool hasConfigTime;
    private ulong configTime_;
    public bool HasConfigTime {
      get { return hasConfigTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ConfigTime {
      get { return configTime_; }
    }
    
    public const int EnableFieldNumber = 3;
    private bool hasEnable;
    private bool enable_;
    public bool HasEnable {
      get { return hasEnable; }
    }
    public bool Enable {
      get { return enable_; }
    }
    
    public const int ErrConfigFieldNumber = 4;
    private bool hasErrConfig;
    private global::BonreePB.ErrorConfig errConfig_;
    public bool HasErrConfig {
      get { return hasErrConfig; }
    }
    public global::BonreePB.ErrorConfig ErrConfig {
      get { return errConfig_ ?? global::BonreePB.ErrorConfig.DefaultInstance; }
    }
    
    public const int CallgraphConfigFieldNumber = 5;
    private bool hasCallgraphConfig;
    private global::BonreePB.CallGraphConfig callgraphConfig_;
    public bool HasCallgraphConfig {
      get { return hasCallgraphConfig; }
    }
    public global::BonreePB.CallGraphConfig CallgraphConfig {
      get { return callgraphConfig_ ?? global::BonreePB.CallGraphConfig.DefaultInstance; }
    }
    
    public const int AppConfigFieldNumber = 6;
    private bool hasAppConfig;
    private global::BonreePB.AppConfig appConfig_;
    public bool HasAppConfig {
      get { return hasAppConfig; }
    }
    public global::BonreePB.AppConfig AppConfig {
      get { return appConfig_ ?? global::BonreePB.AppConfig.DefaultInstance; }
    }
    
    public const int AppGatherConfigFieldNumber = 7;
    private bool hasAppGatherConfig;
    private global::BonreePB.AppGathererConfig appGatherConfig_;
    public bool HasAppGatherConfig {
      get { return hasAppGatherConfig; }
    }
    public global::BonreePB.AppGathererConfig AppGatherConfig {
      get { return appGatherConfig_ ?? global::BonreePB.AppGathererConfig.DefaultInstance; }
    }
    
    public const int SnapshotGathererCfgFieldNumber = 8;
    private bool hasSnapshotGathererCfg;
    private global::BonreePB.SnapshotGathererConfig snapshotGathererCfg_;
    public bool HasSnapshotGathererCfg {
      get { return hasSnapshotGathererCfg; }
    }
    public global::BonreePB.SnapshotGathererConfig SnapshotGathererCfg {
      get { return snapshotGathererCfg_ ?? global::BonreePB.SnapshotGathererConfig.DefaultInstance; }
    }
    
    public const int BtConfigFieldNumber = 9;
    private bool hasBtConfig;
    private global::BonreePB.BTConfig btConfig_;
    public bool HasBtConfig {
      get { return hasBtConfig; }
    }
    public global::BonreePB.BTConfig BtConfig {
      get { return btConfig_ ?? global::BonreePB.BTConfig.DefaultInstance; }
    }
    
    public const int SocketConfigFieldNumber = 10;
    private bool hasSocketConfig;
    private global::BonreePB.SocketConfig socketConfig_;
    public bool HasSocketConfig {
      get { return hasSocketConfig; }
    }
    public global::BonreePB.SocketConfig SocketConfig {
      get { return socketConfig_ ?? global::BonreePB.SocketConfig.DefaultInstance; }
    }
    
    public const int ThreadDumpTaskFieldNumber = 11;
    private bool hasThreadDumpTask;
    private global::BonreePB.ThreadDumpTask threadDumpTask_;
    public bool HasThreadDumpTask {
      get { return hasThreadDumpTask; }
    }
    public global::BonreePB.ThreadDumpTask ThreadDumpTask {
      get { return threadDumpTask_ ?? global::BonreePB.ThreadDumpTask.DefaultInstance; }
    }
    
    public const int CustomBTRulesFieldNumber = 12;
    private bool hasCustomBTRules;
    private global::BonreePB.CustomBTRules customBTRules_;
    public bool HasCustomBTRules {
      get { return hasCustomBTRules; }
    }
    public global::BonreePB.CustomBTRules CustomBTRules {
      get { return customBTRules_ ?? global::BonreePB.CustomBTRules.DefaultInstance; }
    }
    
    public const int ModifyTimeFieldNumber = 13;
    private bool hasModifyTime;
    private ulong modifyTime_;
    public bool HasModifyTime {
      get { return hasModifyTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ModifyTime {
      get { return modifyTime_; }
    }
    
    public const int JsConfigFieldNumber = 14;
    private bool hasJsConfig;
    private global::BonreePB.InjectJSConfig jsConfig_;
    public bool HasJsConfig {
      get { return hasJsConfig; }
    }
    public global::BonreePB.InjectJSConfig JsConfig {
      get { return jsConfig_ ?? global::BonreePB.InjectJSConfig.DefaultInstance; }
    }
    
    public const int ReRegAgentFieldNumber = 15;
    private bool hasReRegAgent;
    private bool reRegAgent_;
    public bool HasReRegAgent {
      get { return hasReRegAgent; }
    }
    public bool ReRegAgent {
      get { return reRegAgent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAgentIDS) return false;
        if (HasThreadDumpTask) {
          if (!ThreadDumpTask.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _configRespFieldNames;
      if (hasAgentIDS) {
        output.WriteMessage(1, field_names[0], AgentIDS);
      }
      if (hasConfigTime) {
        output.WriteUInt64(2, field_names[5], ConfigTime);
      }
      if (hasEnable) {
        output.WriteBool(3, field_names[7], Enable);
      }
      if (hasErrConfig) {
        output.WriteMessage(4, field_names[8], ErrConfig);
      }
      if (hasCallgraphConfig) {
        output.WriteMessage(5, field_names[4], CallgraphConfig);
      }
      if (hasAppConfig) {
        output.WriteMessage(6, field_names[1], AppConfig);
      }
      if (hasAppGatherConfig) {
        output.WriteMessage(7, field_names[2], AppGatherConfig);
      }
      if (hasSnapshotGathererCfg) {
        output.WriteMessage(8, field_names[12], SnapshotGathererCfg);
      }
      if (hasBtConfig) {
        output.WriteMessage(9, field_names[3], BtConfig);
      }
      if (hasSocketConfig) {
        output.WriteMessage(10, field_names[13], SocketConfig);
      }
      if (hasThreadDumpTask) {
        output.WriteMessage(11, field_names[14], ThreadDumpTask);
      }
      if (hasCustomBTRules) {
        output.WriteMessage(12, field_names[6], CustomBTRules);
      }
      if (hasModifyTime) {
        output.WriteUInt64(13, field_names[10], ModifyTime);
      }
      if (hasJsConfig) {
        output.WriteMessage(14, field_names[9], JsConfig);
      }
      if (hasReRegAgent) {
        output.WriteBool(15, field_names[11], ReRegAgent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentIDS) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIDS);
      }
      if (hasConfigTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ConfigTime);
      }
      if (hasEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Enable);
      }
      if (hasErrConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, ErrConfig);
      }
      if (hasCallgraphConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, CallgraphConfig);
      }
      if (hasAppConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, AppConfig);
      }
      if (hasAppGatherConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, AppGatherConfig);
      }
      if (hasSnapshotGathererCfg) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, SnapshotGathererCfg);
      }
      if (hasBtConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, BtConfig);
      }
      if (hasSocketConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, SocketConfig);
      }
      if (hasThreadDumpTask) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, ThreadDumpTask);
      }
      if (hasCustomBTRules) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, CustomBTRules);
      }
      if (hasModifyTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(13, ModifyTime);
      }
      if (hasJsConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, JsConfig);
      }
      if (hasReRegAgent) {
        size += pb::CodedOutputStream.ComputeBoolSize(15, ReRegAgent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static configResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static configResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static configResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static configResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static configResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static configResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static configResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static configResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static configResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static configResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private configResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(configResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<configResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(configResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private configResp result;
      
      private configResp PrepareBuilder() {
        if (resultIsReadOnly) {
          configResp original = result;
          result = new configResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override configResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.configResp.Descriptor; }
      }
      
      public override configResp DefaultInstanceForType {
        get { return global::BonreePB.configResp.DefaultInstance; }
      }
      
      public override configResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is configResp) {
          return MergeFrom((configResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(configResp other) {
        if (other == global::BonreePB.configResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIDS) {
          MergeAgentIDS(other.AgentIDS);
        }
        if (other.HasConfigTime) {
          ConfigTime = other.ConfigTime;
        }
        if (other.HasEnable) {
          Enable = other.Enable;
        }
        if (other.HasErrConfig) {
          MergeErrConfig(other.ErrConfig);
        }
        if (other.HasCallgraphConfig) {
          MergeCallgraphConfig(other.CallgraphConfig);
        }
        if (other.HasAppConfig) {
          MergeAppConfig(other.AppConfig);
        }
        if (other.HasAppGatherConfig) {
          MergeAppGatherConfig(other.AppGatherConfig);
        }
        if (other.HasSnapshotGathererCfg) {
          MergeSnapshotGathererCfg(other.SnapshotGathererCfg);
        }
        if (other.HasBtConfig) {
          MergeBtConfig(other.BtConfig);
        }
        if (other.HasSocketConfig) {
          MergeSocketConfig(other.SocketConfig);
        }
        if (other.HasThreadDumpTask) {
          MergeThreadDumpTask(other.ThreadDumpTask);
        }
        if (other.HasCustomBTRules) {
          MergeCustomBTRules(other.CustomBTRules);
        }
        if (other.HasModifyTime) {
          ModifyTime = other.ModifyTime;
        }
        if (other.HasJsConfig) {
          MergeJsConfig(other.JsConfig);
        }
        if (other.HasReRegAgent) {
          ReRegAgent = other.ReRegAgent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_configRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _configRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIDS) {
                subBuilder.MergeFrom(AgentIDS);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIDS = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasConfigTime = input.ReadUInt64(ref result.configTime_);
              break;
            }
            case 24: {
              result.hasEnable = input.ReadBool(ref result.enable_);
              break;
            }
            case 34: {
              global::BonreePB.ErrorConfig.Builder subBuilder = global::BonreePB.ErrorConfig.CreateBuilder();
              if (result.hasErrConfig) {
                subBuilder.MergeFrom(ErrConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ErrConfig = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::BonreePB.CallGraphConfig.Builder subBuilder = global::BonreePB.CallGraphConfig.CreateBuilder();
              if (result.hasCallgraphConfig) {
                subBuilder.MergeFrom(CallgraphConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CallgraphConfig = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::BonreePB.AppConfig.Builder subBuilder = global::BonreePB.AppConfig.CreateBuilder();
              if (result.hasAppConfig) {
                subBuilder.MergeFrom(AppConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AppConfig = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::BonreePB.AppGathererConfig.Builder subBuilder = global::BonreePB.AppGathererConfig.CreateBuilder();
              if (result.hasAppGatherConfig) {
                subBuilder.MergeFrom(AppGatherConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AppGatherConfig = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::BonreePB.SnapshotGathererConfig.Builder subBuilder = global::BonreePB.SnapshotGathererConfig.CreateBuilder();
              if (result.hasSnapshotGathererCfg) {
                subBuilder.MergeFrom(SnapshotGathererCfg);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnapshotGathererCfg = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::BonreePB.BTConfig.Builder subBuilder = global::BonreePB.BTConfig.CreateBuilder();
              if (result.hasBtConfig) {
                subBuilder.MergeFrom(BtConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BtConfig = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::BonreePB.SocketConfig.Builder subBuilder = global::BonreePB.SocketConfig.CreateBuilder();
              if (result.hasSocketConfig) {
                subBuilder.MergeFrom(SocketConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SocketConfig = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::BonreePB.ThreadDumpTask.Builder subBuilder = global::BonreePB.ThreadDumpTask.CreateBuilder();
              if (result.hasThreadDumpTask) {
                subBuilder.MergeFrom(ThreadDumpTask);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ThreadDumpTask = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::BonreePB.CustomBTRules.Builder subBuilder = global::BonreePB.CustomBTRules.CreateBuilder();
              if (result.hasCustomBTRules) {
                subBuilder.MergeFrom(CustomBTRules);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CustomBTRules = subBuilder.BuildPartial();
              break;
            }
            case 104: {
              result.hasModifyTime = input.ReadUInt64(ref result.modifyTime_);
              break;
            }
            case 114: {
              global::BonreePB.InjectJSConfig.Builder subBuilder = global::BonreePB.InjectJSConfig.CreateBuilder();
              if (result.hasJsConfig) {
                subBuilder.MergeFrom(JsConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JsConfig = subBuilder.BuildPartial();
              break;
            }
            case 120: {
              result.hasReRegAgent = input.ReadBool(ref result.reRegAgent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIDS {
       get { return result.hasAgentIDS; }
      }
      public global::BonreePB.AgentIdentity AgentIDS {
        get { return result.AgentIDS; }
        set { SetAgentIDS(value); }
      }
      public Builder SetAgentIDS(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIDS = true;
        result.agentIDS_ = value;
        return this;
      }
      public Builder SetAgentIDS(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIDS = true;
        result.agentIDS_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIDS(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIDS &&
            result.agentIDS_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIDS_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIDS_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIDS_ = value;
        }
        result.hasAgentIDS = true;
        return this;
      }
      public Builder ClearAgentIDS() {
        PrepareBuilder();
        result.hasAgentIDS = false;
        result.agentIDS_ = null;
        return this;
      }
      
      public bool HasConfigTime {
        get { return result.hasConfigTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ConfigTime {
        get { return result.ConfigTime; }
        set { SetConfigTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetConfigTime(ulong value) {
        PrepareBuilder();
        result.hasConfigTime = true;
        result.configTime_ = value;
        return this;
      }
      public Builder ClearConfigTime() {
        PrepareBuilder();
        result.hasConfigTime = false;
        result.configTime_ = 0UL;
        return this;
      }
      
      public bool HasEnable {
        get { return result.hasEnable; }
      }
      public bool Enable {
        get { return result.Enable; }
        set { SetEnable(value); }
      }
      public Builder SetEnable(bool value) {
        PrepareBuilder();
        result.hasEnable = true;
        result.enable_ = value;
        return this;
      }
      public Builder ClearEnable() {
        PrepareBuilder();
        result.hasEnable = false;
        result.enable_ = false;
        return this;
      }
      
      public bool HasErrConfig {
       get { return result.hasErrConfig; }
      }
      public global::BonreePB.ErrorConfig ErrConfig {
        get { return result.ErrConfig; }
        set { SetErrConfig(value); }
      }
      public Builder SetErrConfig(global::BonreePB.ErrorConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrConfig = true;
        result.errConfig_ = value;
        return this;
      }
      public Builder SetErrConfig(global::BonreePB.ErrorConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasErrConfig = true;
        result.errConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeErrConfig(global::BonreePB.ErrorConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasErrConfig &&
            result.errConfig_ != global::BonreePB.ErrorConfig.DefaultInstance) {
            result.errConfig_ = global::BonreePB.ErrorConfig.CreateBuilder(result.errConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.errConfig_ = value;
        }
        result.hasErrConfig = true;
        return this;
      }
      public Builder ClearErrConfig() {
        PrepareBuilder();
        result.hasErrConfig = false;
        result.errConfig_ = null;
        return this;
      }
      
      public bool HasCallgraphConfig {
       get { return result.hasCallgraphConfig; }
      }
      public global::BonreePB.CallGraphConfig CallgraphConfig {
        get { return result.CallgraphConfig; }
        set { SetCallgraphConfig(value); }
      }
      public Builder SetCallgraphConfig(global::BonreePB.CallGraphConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCallgraphConfig = true;
        result.callgraphConfig_ = value;
        return this;
      }
      public Builder SetCallgraphConfig(global::BonreePB.CallGraphConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCallgraphConfig = true;
        result.callgraphConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCallgraphConfig(global::BonreePB.CallGraphConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCallgraphConfig &&
            result.callgraphConfig_ != global::BonreePB.CallGraphConfig.DefaultInstance) {
            result.callgraphConfig_ = global::BonreePB.CallGraphConfig.CreateBuilder(result.callgraphConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.callgraphConfig_ = value;
        }
        result.hasCallgraphConfig = true;
        return this;
      }
      public Builder ClearCallgraphConfig() {
        PrepareBuilder();
        result.hasCallgraphConfig = false;
        result.callgraphConfig_ = null;
        return this;
      }
      
      public bool HasAppConfig {
       get { return result.hasAppConfig; }
      }
      public global::BonreePB.AppConfig AppConfig {
        get { return result.AppConfig; }
        set { SetAppConfig(value); }
      }
      public Builder SetAppConfig(global::BonreePB.AppConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppConfig = true;
        result.appConfig_ = value;
        return this;
      }
      public Builder SetAppConfig(global::BonreePB.AppConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAppConfig = true;
        result.appConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAppConfig(global::BonreePB.AppConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAppConfig &&
            result.appConfig_ != global::BonreePB.AppConfig.DefaultInstance) {
            result.appConfig_ = global::BonreePB.AppConfig.CreateBuilder(result.appConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.appConfig_ = value;
        }
        result.hasAppConfig = true;
        return this;
      }
      public Builder ClearAppConfig() {
        PrepareBuilder();
        result.hasAppConfig = false;
        result.appConfig_ = null;
        return this;
      }
      
      public bool HasAppGatherConfig {
       get { return result.hasAppGatherConfig; }
      }
      public global::BonreePB.AppGathererConfig AppGatherConfig {
        get { return result.AppGatherConfig; }
        set { SetAppGatherConfig(value); }
      }
      public Builder SetAppGatherConfig(global::BonreePB.AppGathererConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppGatherConfig = true;
        result.appGatherConfig_ = value;
        return this;
      }
      public Builder SetAppGatherConfig(global::BonreePB.AppGathererConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAppGatherConfig = true;
        result.appGatherConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAppGatherConfig(global::BonreePB.AppGathererConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAppGatherConfig &&
            result.appGatherConfig_ != global::BonreePB.AppGathererConfig.DefaultInstance) {
            result.appGatherConfig_ = global::BonreePB.AppGathererConfig.CreateBuilder(result.appGatherConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.appGatherConfig_ = value;
        }
        result.hasAppGatherConfig = true;
        return this;
      }
      public Builder ClearAppGatherConfig() {
        PrepareBuilder();
        result.hasAppGatherConfig = false;
        result.appGatherConfig_ = null;
        return this;
      }
      
      public bool HasSnapshotGathererCfg {
       get { return result.hasSnapshotGathererCfg; }
      }
      public global::BonreePB.SnapshotGathererConfig SnapshotGathererCfg {
        get { return result.SnapshotGathererCfg; }
        set { SetSnapshotGathererCfg(value); }
      }
      public Builder SetSnapshotGathererCfg(global::BonreePB.SnapshotGathererConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshotGathererCfg = true;
        result.snapshotGathererCfg_ = value;
        return this;
      }
      public Builder SetSnapshotGathererCfg(global::BonreePB.SnapshotGathererConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshotGathererCfg = true;
        result.snapshotGathererCfg_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshotGathererCfg(global::BonreePB.SnapshotGathererConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshotGathererCfg &&
            result.snapshotGathererCfg_ != global::BonreePB.SnapshotGathererConfig.DefaultInstance) {
            result.snapshotGathererCfg_ = global::BonreePB.SnapshotGathererConfig.CreateBuilder(result.snapshotGathererCfg_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshotGathererCfg_ = value;
        }
        result.hasSnapshotGathererCfg = true;
        return this;
      }
      public Builder ClearSnapshotGathererCfg() {
        PrepareBuilder();
        result.hasSnapshotGathererCfg = false;
        result.snapshotGathererCfg_ = null;
        return this;
      }
      
      public bool HasBtConfig {
       get { return result.hasBtConfig; }
      }
      public global::BonreePB.BTConfig BtConfig {
        get { return result.BtConfig; }
        set { SetBtConfig(value); }
      }
      public Builder SetBtConfig(global::BonreePB.BTConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBtConfig = true;
        result.btConfig_ = value;
        return this;
      }
      public Builder SetBtConfig(global::BonreePB.BTConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBtConfig = true;
        result.btConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBtConfig(global::BonreePB.BTConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBtConfig &&
            result.btConfig_ != global::BonreePB.BTConfig.DefaultInstance) {
            result.btConfig_ = global::BonreePB.BTConfig.CreateBuilder(result.btConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.btConfig_ = value;
        }
        result.hasBtConfig = true;
        return this;
      }
      public Builder ClearBtConfig() {
        PrepareBuilder();
        result.hasBtConfig = false;
        result.btConfig_ = null;
        return this;
      }
      
      public bool HasSocketConfig {
       get { return result.hasSocketConfig; }
      }
      public global::BonreePB.SocketConfig SocketConfig {
        get { return result.SocketConfig; }
        set { SetSocketConfig(value); }
      }
      public Builder SetSocketConfig(global::BonreePB.SocketConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSocketConfig = true;
        result.socketConfig_ = value;
        return this;
      }
      public Builder SetSocketConfig(global::BonreePB.SocketConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSocketConfig = true;
        result.socketConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSocketConfig(global::BonreePB.SocketConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSocketConfig &&
            result.socketConfig_ != global::BonreePB.SocketConfig.DefaultInstance) {
            result.socketConfig_ = global::BonreePB.SocketConfig.CreateBuilder(result.socketConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.socketConfig_ = value;
        }
        result.hasSocketConfig = true;
        return this;
      }
      public Builder ClearSocketConfig() {
        PrepareBuilder();
        result.hasSocketConfig = false;
        result.socketConfig_ = null;
        return this;
      }
      
      public bool HasThreadDumpTask {
       get { return result.hasThreadDumpTask; }
      }
      public global::BonreePB.ThreadDumpTask ThreadDumpTask {
        get { return result.ThreadDumpTask; }
        set { SetThreadDumpTask(value); }
      }
      public Builder SetThreadDumpTask(global::BonreePB.ThreadDumpTask value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThreadDumpTask = true;
        result.threadDumpTask_ = value;
        return this;
      }
      public Builder SetThreadDumpTask(global::BonreePB.ThreadDumpTask.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasThreadDumpTask = true;
        result.threadDumpTask_ = builderForValue.Build();
        return this;
      }
      public Builder MergeThreadDumpTask(global::BonreePB.ThreadDumpTask value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasThreadDumpTask &&
            result.threadDumpTask_ != global::BonreePB.ThreadDumpTask.DefaultInstance) {
            result.threadDumpTask_ = global::BonreePB.ThreadDumpTask.CreateBuilder(result.threadDumpTask_).MergeFrom(value).BuildPartial();
        } else {
          result.threadDumpTask_ = value;
        }
        result.hasThreadDumpTask = true;
        return this;
      }
      public Builder ClearThreadDumpTask() {
        PrepareBuilder();
        result.hasThreadDumpTask = false;
        result.threadDumpTask_ = null;
        return this;
      }
      
      public bool HasCustomBTRules {
       get { return result.hasCustomBTRules; }
      }
      public global::BonreePB.CustomBTRules CustomBTRules {
        get { return result.CustomBTRules; }
        set { SetCustomBTRules(value); }
      }
      public Builder SetCustomBTRules(global::BonreePB.CustomBTRules value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomBTRules = true;
        result.customBTRules_ = value;
        return this;
      }
      public Builder SetCustomBTRules(global::BonreePB.CustomBTRules.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCustomBTRules = true;
        result.customBTRules_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCustomBTRules(global::BonreePB.CustomBTRules value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCustomBTRules &&
            result.customBTRules_ != global::BonreePB.CustomBTRules.DefaultInstance) {
            result.customBTRules_ = global::BonreePB.CustomBTRules.CreateBuilder(result.customBTRules_).MergeFrom(value).BuildPartial();
        } else {
          result.customBTRules_ = value;
        }
        result.hasCustomBTRules = true;
        return this;
      }
      public Builder ClearCustomBTRules() {
        PrepareBuilder();
        result.hasCustomBTRules = false;
        result.customBTRules_ = null;
        return this;
      }
      
      public bool HasModifyTime {
        get { return result.hasModifyTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ModifyTime {
        get { return result.ModifyTime; }
        set { SetModifyTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetModifyTime(ulong value) {
        PrepareBuilder();
        result.hasModifyTime = true;
        result.modifyTime_ = value;
        return this;
      }
      public Builder ClearModifyTime() {
        PrepareBuilder();
        result.hasModifyTime = false;
        result.modifyTime_ = 0UL;
        return this;
      }
      
      public bool HasJsConfig {
       get { return result.hasJsConfig; }
      }
      public global::BonreePB.InjectJSConfig JsConfig {
        get { return result.JsConfig; }
        set { SetJsConfig(value); }
      }
      public Builder SetJsConfig(global::BonreePB.InjectJSConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJsConfig = true;
        result.jsConfig_ = value;
        return this;
      }
      public Builder SetJsConfig(global::BonreePB.InjectJSConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJsConfig = true;
        result.jsConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJsConfig(global::BonreePB.InjectJSConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJsConfig &&
            result.jsConfig_ != global::BonreePB.InjectJSConfig.DefaultInstance) {
            result.jsConfig_ = global::BonreePB.InjectJSConfig.CreateBuilder(result.jsConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.jsConfig_ = value;
        }
        result.hasJsConfig = true;
        return this;
      }
      public Builder ClearJsConfig() {
        PrepareBuilder();
        result.hasJsConfig = false;
        result.jsConfig_ = null;
        return this;
      }
      
      public bool HasReRegAgent {
        get { return result.hasReRegAgent; }
      }
      public bool ReRegAgent {
        get { return result.ReRegAgent; }
        set { SetReRegAgent(value); }
      }
      public Builder SetReRegAgent(bool value) {
        PrepareBuilder();
        result.hasReRegAgent = true;
        result.reRegAgent_ = value;
        return this;
      }
      public Builder ClearReRegAgent() {
        PrepareBuilder();
        result.hasReRegAgent = false;
        result.reRegAgent_ = false;
        return this;
      }
    }
    static configResp() {
      object.ReferenceEquals(global::BonreePB.PbConfig.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
