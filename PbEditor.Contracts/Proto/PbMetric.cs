// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbMetric {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_BTMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.BTMetric, global::BonreePB.BTMetric.Builder> internal__static_BonreePB_BTMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_BEBTMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.BEBTMetric, global::BonreePB.BEBTMetric.Builder> internal__static_BonreePB_BEBTMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_BEMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.BEMetric, global::BonreePB.BEMetric.Builder> internal__static_BonreePB_BEMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_DataSourceMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.DataSourceMetric, global::BonreePB.DataSourceMetric.Builder> internal__static_BonreePB_DataSourceMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_CrossBTMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.CrossBTMetric, global::BonreePB.CrossBTMetric.Builder> internal__static_BonreePB_CrossBTMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_VMMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.VMMetric, global::BonreePB.VMMetric.Builder> internal__static_BonreePB_VMMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_DiskMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.DiskMetric, global::BonreePB.DiskMetric.Builder> internal__static_BonreePB_DiskMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_MAMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.MAMetric, global::BonreePB.MAMetric.Builder> internal__static_BonreePB_MAMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_MetricsReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.MetricsReq, global::BonreePB.MetricsReq.Builder> internal__static_BonreePB_MetricsReq__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbMetric() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wYl9tZXRyaWMucHJvdG8SCEJvbnJlZVBCGg5wYl9hZ2VudC5wcm90bxoc", 
            "cGJfYnVzaW5lc3NUcmFuc2FjdGlvbi5wcm90bxoQcGJfYmFja2VuZC5wcm90", 
            "byKhAgoIQlRNZXRyaWMSKQoCYnQYASABKAsyHS5Cb25yZWVQQi5CdXNpbmVz", 
            "c1RyYW5zYWN0aW9uEhQKDHJlcXVlc3RDb3VudBgCIAEoDRITCgtzdW1SZXNw", 
            "VGltZRgDIAEoBBITCgttYXhSZXNwVGltZRgEIAEoDRITCgttaW5SZXNwVGlt", 
            "ZRgFIAEoDRITCgtjdXJSZXNwVGltZRgGIAEoDRIRCglzbG93Q2FsbHMYByAB", 
            "KA0SFQoNdmVyeVNsb3dDYWxscxgIIAEoDRISCgpzdGFsbENhbGxzGAkgASgN", 
            "EhIKCmVycm9yQ2FsbHMYCiABKA0SFgoOZXhjZXB0aW9uQ291bnQYCyABKA0S", 
            "FgoOaHR0cEVycm9yQ291bnQYDCABKA0iowIKCkJFQlRNZXRyaWMSKQoCYnQY", 
            "ASABKAsyHS5Cb25yZWVQQi5CdXNpbmVzc1RyYW5zYWN0aW9uEh0KAmJlGAIg", 
            "ASgLMhEuQm9ucmVlUEIuQmFja2VuZBIUCgxyZXF1ZXN0Q291bnQYAyABKA0S", 
            "EwoLc3VtUmVzcFRpbWUYBCABKAQSEwoLbWF4UmVzcFRpbWUYBSABKA0SEwoL", 
            "bWluUmVzcFRpbWUYBiABKA0SEwoLY3VyUmVzcFRpbWUYByABKA0SEQoJc2xv", 
            "d0NhbGxzGAggASgNEhUKDXZlcnlTbG93Q2FsbHMYCSABKA0SEgoKc3RhbGxD", 
            "YWxscxgKIAEoDRISCgplcnJvckNhbGxzGAsgASgNEg8KB2lzQXN5bmMYDCAB", 
            "KAgi9gEKCEJFTWV0cmljEh0KAmJlGAEgASgLMhEuQm9ucmVlUEIuQmFja2Vu", 
            "ZBIUCgxyZXF1ZXN0Q291bnQYAiABKA0SEwoLc3VtUmVzcFRpbWUYAyABKAQS", 
            "EwoLbWF4UmVzcFRpbWUYBCABKA0SEwoLbWluUmVzcFRpbWUYBSABKA0SEwoL", 
            "Y3VyUmVzcFRpbWUYBiABKA0SEQoJc2xvd0NhbGxzGAcgASgNEhUKDXZlcnlT", 
            "bG93Q2FsbHMYCCABKA0SEgoKc3RhbGxDYWxscxgJIAEoDRISCgplcnJvckNh", 
            "bGxzGAogASgNEg8KB2lzQXN5bmMYCyABKAgivwEKEERhdGFTb3VyY2VNZXRy", 
            "aWMSIAoCZHMYASABKAsyFC5Cb25yZWVQQi5EYXRhU291cmNlEhMKC21heFBv", 
            "b2xTaXplGAIgASgNEhMKC2N1clBvb2xTaXplGAMgASgNEhQKDGN1ckNvbm5D", 
            "b3VudBgEIAEoDRIYChBjdXJXYWl0Q29ubkNvdW50GAUgASgNEhUKDWxlYWtD", 
            "b25uQ291bnQYBiABKA0SGAoQZmFpbGRSZWNvbm5Db3VudBgHIAEoDSLoAwoN", 
            "Q3Jvc3NCVE1ldHJpYxIPCgdpc0FzeW5jGAEgASgIEhUKDUZyb21BZ2VudEdV", 
            "SUQYAiABKAkSEwoLRnJvbUFnZW50SUQYAyABKAQSLQoGZnJvbUJUGAQgASgL", 
            "Mh0uQm9ucmVlUEIuQnVzaW5lc3NUcmFuc2FjdGlvbhITCgtUb0FnZW50R1VJ", 
            "RBgFIAEoCRIRCglUb0FnZW50SUQYBiABKAQSKwoEdG9CVBgHIAEoCzIdLkJv", 
            "bnJlZVBCLkJ1c2luZXNzVHJhbnNhY3Rpb24SFAoMcmVxdWVzdENvdW50GAgg", 
            "ASgNEhMKC3N1bVJlc3BUaW1lGAkgASgEEhMKC21heFJlc3BUaW1lGAogASgN", 
            "EhMKC21pblJlc3BUaW1lGAsgASgNEhMKC2N1clJlc3BUaW1lGAwgASgNEhEK", 
            "CXNsb3dDYWxscxgNIAEoDRIVCg12ZXJ5U2xvd0NhbGxzGA4gASgNEhIKCnN0", 
            "YWxsQ2FsbHMYDyABKA0SEgoKZXJyb3JDYWxscxgQIAEoDRIWCg5leGNlcHRp", 
            "b25Db3VudBgRIAEoDRIWCg5odHRwRXJyb3JDb3VudBgSIAEoDRIqCgtiYWNr", 
            "ZW5kVHlwZRgTIAEoDjIVLkJvbnJlZVBCLkJhY2tlbmRUeXBlIuILCghWTU1l", 
            "dHJpYxIYChBqdm1Vc2FnZUhlYXBTaXplGAEgASgNEhYKDmp2bU1heEhlYXBT", 
            "aXplGAIgASgNEhwKFGp2bUNvbW1pdHRlZEhlYXBTaXplGAMgASgNEiAKGGp2", 
            "bU1ham9yQ29sbGVjdGlvbnNDb3VudBgEIAEoDRIiChpqdm1TdW1NYWpvckNv", 
            "bGxlY3Rpb25zVGltZRgFIAEoDRIiChpqdm1NYXhNYWpvckNvbGxlY3Rpb25z", 
            "VGltZRgGIAEoDRIiChpqdm1NaW5NYWpvckNvbGxlY3Rpb25zVGltZRgHIAEo", 
            "DRIgChhqdm1NaW5vckNvbGxlY3Rpb25zQ291bnQYCCABKA0SIgoaanZtU3Vt", 
            "TWlub3JDb2xsZWN0aW9uc1RpbWUYCSABKA0SIgoaanZtTWF4TWlub3JDb2xs", 
            "ZWN0aW9uc1RpbWUYCiABKA0SIgoaanZtTWluTWlub3JDb2xsZWN0aW9uc1Rp", 
            "bWUYCyABKA0SGAoQanZtQ29kZUNhY2hlVXNlZBgMIAEoDRIdChVqdm1Db2Rl", 
            "Q2FjaGVDb21taXR0ZWQYDSABKA0SFwoPanZtQ29kZUNhY2hlTUFYGA4gASgN", 
            "EhoKEmp2bVBTRWRlblNwYWNlVXNlZBgPIAEoDRIfChdqdm1QU0VkZW5TcGFj", 
            "ZUNvbW1pdHRlZBgQIAEoDRIZChFqdm1QU0VkZW5TcGFjZU1BWBgRIAEoDRIX", 
            "Cg9qdm1QU09sZEdlblVzZWQYEiABKA0SHAoUanZtUFNPbGRHZW5Db21taXR0", 
            "ZWQYEyABKA0SFgoOanZtUFNPbGRHZW5NQVgYFCABKA0SGAoQanZtUFNQZXJt", 
            "R2VuVXNlZBgVIAEoDRIdChVqdm1QU1Blcm1HZW5Db21taXR0ZWQYFiABKA0S", 
            "FwoPanZtUFNQZXJtR2VuTUFYGBcgASgNEh4KFmp2bVBTU3Vydml2b3JTcGFj", 
            "ZVVzZWQYGCABKA0SIwobanZtUFNTdXJ2aXZvclNwYWNlQ29tbWl0dGVkGBkg", 
            "ASgNEh0KFWp2bVBTU3Vydml2b3JTcGFjZU1BWBgaIAEoDRIYChBqdm1NZXRh", 
            "U3BhY2VVc2VkGBsgASgNEh0KFWp2bU1ldGFTcGFjZUNvbW1pdHRlZBgcIAEo", 
            "DRIXCg9qdm1NZXRhU3BhY2VNQVgYHSABKA0SHgoWanZtQ29tcHJlc3NlZFNw", 
            "YWNlVXNlZBgeIAEoDRIjChtqdm1Db21wcmVzc2VkU3BhY2VDb21taXR0ZWQY", 
            "HyABKA0SHQoVanZtQ29tcHJlc3NlZFNwYWNlTUFYGCAgASgNEhwKFGN1cnJl", 
            "bnRMb2FkZWRDbGFzc2VzGCEgASgNEhoKEnRvdGFsTG9hZGVkQ2xhc3Nlcxgi", 
            "IAEoDRIPCgdnY0NvdW50GCMgASgNEhEKCXN1bUdDVGltZRgkIAEoDRIRCglt", 
            "YXhHQ1RpbWUYJSABKA0SEQoJbWluR0NUaW1lGCYgASgNEhYKDnJ1bm5pbmdU", 
            "aHJlYWRzGCcgASgNEhcKD2RlYWRsb2NrVGhyZWFkcxgoIAEoDRIVCg1maW5p", 
            "c2hUaHJlYWRzGCkgASgNEhQKDGJsb2NrVGhyZWFkcxgqIAEoDRIQCghjcHVV", 
            "c2FnZRgrIAEoDRIYChBjbHJVc2FnZUhlYXBTaXplGCwgASgNEhwKFGNsckNv", 
            "bW1pdHRlZEhlYXBTaXplGC0gASgNEhYKDmNsckdlbl8wX1VzYWdlGC4gASgN", 
            "EhkKEWNsckdlbl8wX2djX2NvdW50GC8gASgNEhYKDmNsckdlbl8xX1VzYWdl", 
            "GDAgASgNEhkKEWNsckdlbl8xX2djX2NvdW50GDEgASgNEhYKDmNsckdlbl8y", 
            "X1VzYWdlGDIgASgNEhkKEWNsckdlbl8yX2djX2NvdW50GDMgASgNEh8KF2Ns", 
            "ckxhcmdlT2JqZWN0SGVhcFVzYWdlGDQgASgNEh8KF2NsckxhcmdlT2JqZWN0", 
            "X2djX2NvdW50GDUgASgNIkcKCkRpc2tNZXRyaWMSEQoJcGFydGl0aW9uGAEg", 
            "ASgJEhAKCGRpc2tTaXplGAIgASgNEhQKDGRpc2tGcmVlU2l6ZRgDIAEoDSKd", 
            "BAoITUFNZXRyaWMSEAoIY3B1VXNhZ2UYASABKA0SDwoHbWVtU2l6ZRgCIAEo", 
            "DRITCgtmcmVlTWVtU2l6ZRgDIAEoDRITCgt1c2VkTWVtU2l6ZRgEIAEoDRIV", 
            "Cg1kaXNrUmVhZEJ5dGVzGAUgASgEEhUKDWRpc2tSZWFkQ291bnQYBiABKA0S", 
            "FgoOZGlza1dyaXRlQnl0ZXMYByABKAQSFgoOZGlza1dyaXRlQ291bnQYCCAB", 
            "KA0SKAoKZGlza01ldHJpYxgJIAMoCzIULkJvbnJlZVBCLkRpc2tNZXRyaWMS", 
            "FAoMbmV0U2VuZEJ5dGVzGAogASgEEhQKDG5ldFJlY3ZCeXRlcxgLIAEoBBIX", 
            "Cg9uZXRTZW5kUGFja2FnZXMYDCABKAQSFwoPbmV0UmVjdlBhY2thZ2VzGA0g", 
            "ASgEEhsKE3RjcExpc3RlblN0YXRlQ291bnQYDiABKA0SGwoTdGNwRXN0YWJs", 
            "aXNoZWRDb3VudBgPIAEoDRIdChV0Y3BUaW1lV2FpdFN0YXRlQ291bnQYECAB", 
            "KA0SHAoUdGNwRmluV2FpdFN0YXRlQ291bnQYESABKA0SHQoVdGNwRmluV2Fp", 
            "dDJTdGF0ZUNvdW50GBIgASgNEh4KFnRjcENsb3NlV2FpdFN0YXRlQ091bnQY", 
            "EyABKA0SFAoMdGNwQ29ubkNvdW50GBQgASgNEhIKCmN1ck9wZW5GZHMYFSAB", 
            "KA0i4wIKCk1ldHJpY3NSZXESLgoNYWdlbnRJZGVudGl0eRgBIAEoCzIXLkJv", 
            "bnJlZVBCLkFnZW50SWRlbnRpdHkSJQoJYnRNZXRyaWNzGAIgAygLMhIuQm9u", 
            "cmVlUEIuQlRNZXRyaWMSKQoLYmVidE1ldHJpY3MYAyADKAsyFC5Cb25yZWVQ", 
            "Qi5CRUJUTWV0cmljEiUKCWJlTWV0cmljcxgEIAMoCzISLkJvbnJlZVBCLkJF", 
            "TWV0cmljEiUKCXZtTWV0cmljcxgFIAEoCzISLkJvbnJlZVBCLlZNTWV0cmlj", 
            "EiUKCW1hTWV0cmljcxgGIAEoCzISLkJvbnJlZVBCLk1BTWV0cmljEi8KDmNy", 
            "b3NzQlRNZXRpcmNzGAcgAygLMhcuQm9ucmVlUEIuQ3Jvc3NCVE1ldHJpYxIt", 
            "Cglkc01ldHJpY3MYCCADKAsyGi5Cb25yZWVQQi5EYXRhU291cmNlTWV0cmlj", 
            "QhkKF2NvbS5ib25yZWUucHJvdG9idWYuYXBtSoVyCgcSBQAAvwEBCggKAQIS", 
            "AwAIEAoICgEIEgMBADAKCwoECOcHABIDAQAwCgwKBQjnBwACEgMBBxMKDQoG", 
            "COcHAAIAEgMBBxMKDgoHCOcHAAIAARIDAQcTCgwKBQjnBwAHEgMBFi8KCQoC", 
            "AwASAwMHFwoJCgIDARIDBAclCgkKAgMCEgMFBxkKHwoCBAASBAgAFQEaE+S4", 
            "muWKoW1ldHJpY+aVsOaNrgoKCgoDBAABEgMICBAKFAoEBAACABIDCQQuIgfk", 
            "uJrliqEKCgwKBQQAAgAEEgMJBAwKDAoFBAACAAYSAwkNIAoMCgUEAAIAARID", 
            "CSEjCgwKBQQAAgADEgMJLC0KHQoEBAACARIDCgQuIhDor7fmsYLmgLvmrKHm", 
            "lbAKCgwKBQQAAgEEEgMKBAwKDAoFBAACAQUSAwoNEwoMCgUEAAIBARIDChQg", 
            "CgwKBQQAAgEDEgMKLC0KHQoEBAACAhIDCwQuIhDmgLvlk43lupTml7bpl7QK", 
            "CgwKBQQAAgIEEgMLBAwKDAoFBAACAgUSAwsNEwoMCgUEAAICARIDCxQfCgwK", 
            "BQQAAgIDEgMLLC0KIAoEBAACAxIDDAQuIhPmnIDlpKflk43lupTml7bpl7QK", 
            "CgwKBQQAAgMEEgMMBAwKDAoFBAACAwUSAwwNEwoMCgUEAAIDARIDDBQfCgwK", 
            "BQQAAgMDEgMMLC0KIAoEBAACBBIDDQQuIhPmnIDlsI/lk43lupTml7bpl7QK", 
            "CgwKBQQAAgQEEgMNBAwKDAoFBAACBAUSAw0NEwoMCgUEAAIEARIDDRQfCgwK", 
            "BQQAAgQDEgMNLC0KIAoEBAACBRIDDgQuIhPlvZPliY3lk43lupTml7bpl7QK", 
            "CgwKBQQAAgUEEgMOBAwKDAoFBAACBQUSAw4NEwoMCgUEAAIFARIDDhQfCgwK", 
            "BQQAAgUDEgMOLC0KHQoEBAACBhIDDwQuIhDmhaLor7fmsYLmrKHmlbAKCgwK", 
            "BQQAAgYEEgMPBAwKDAoFBAACBgUSAw8NEwoMCgUEAAIGARIDDxQdCgwKBQQA", 
            "AgYDEgMPLC0KIAoEBAACBxIDEAQuIhPlvojmhaLor7fmsYLmrKHmlbAKCgwK", 
            "BQQAAgcEEgMQBAwKDAoFBAACBwUSAxANEwoMCgUEAAIHARIDEBQhCgwKBQQA", 
            "AgcDEgMQLC0KIAoEBAACCBIDEQQuIhPlgZzmu57or7fmsYLmrKHmlbAKCgwK", 
            "BQQAAggEEgMRBAwKDAoFBAACCAUSAxENEwoMCgUEAAIIARIDERQeCgwKBQQA", 
            "AggDEgMRLC0KIAoEBAACCRIDEgQvIhPplJnor6/or7fmsYLmrKHmlbAKCgwK", 
            "BQQAAgkEEgMSBAwKDAoFBAACCQUSAxINEwoMCgUEAAIJARIDEhQeCgwKBQQA", 
            "AgkDEgMSLC4KIAoEBAACChIDEwQvIhPlvILluLjor7fmsYLmrKHmlbAKCgwK", 
            "BQQAAgoEEgMTBAwKDAoFBAACCgUSAxMNEwoMCgUEAAIKARIDExQiCgwKBQQA", 
            "AgoDEgMTLC4KJAoEBAACCxIDFAQvIhdodHRw6ZSZ6K+v6K+35rGC5qyh5pWw", 
            "CgoMCgUEAAILBBIDFAQMCgwKBQQAAgsFEgMUDRMKDAoFBAACCwESAxQUIgoM", 
            "CgUEAAILAxIDFCwuCiYKAgQBEgQZACYBGhrlkI7nq68t5Lia5YqhbWV0cmlj", 
            "5pWw5o2uCgoKCgMEAQESAxkIEgoUCgQEAQIAEgMaBC4iB+S4muWKoQoKDAoF", 
            "BAECAAQSAxoEDAoMCgUEAQIABhIDGg0gCgwKBQQBAgABEgMaISMKDAoFBAEC", 
            "AAMSAxosLQoUCgQEAQIBEgMbBC4iB+WQjuerrwoKDAoFBAECAQQSAxsEDAoM", 
            "CgUEAQIBBhIDGw0UCgwKBQQBAgEBEgMbFRcKDAoFBAECAQMSAxssLQodCgQE", 
            "AQICEgMcBC4iEOiwg+eUqOaAu+asoeaVsAoKDAoFBAECAgQSAxwEDAoMCgUE", 
            "AQICBRIDHA0TCgwKBQQBAgIBEgMcFCAKDAoFBAECAgMSAxwsLQodCgQEAQID", 
            "EgMdBC4iEOaAu+WTjeW6lOaXtumXtAoKDAoFBAECAwQSAx0EDAoMCgUEAQID", 
            "BRIDHQ0TCgwKBQQBAgMBEgMdFB8KDAoFBAECAwMSAx0sLQogCgQEAQIEEgMe", 
            "BC4iE+acgOWkp+WTjeW6lOaXtumXtAoKDAoFBAECBAQSAx4EDAoMCgUEAQIE", 
            "BRIDHg0TCgwKBQQBAgQBEgMeFB8KDAoFBAECBAMSAx4sLQogCgQEAQIFEgMf", 
            "BC4iE+acgOWwj+WTjeW6lOaXtumXtAoKDAoFBAECBQQSAx8EDAoMCgUEAQIF", 
            "BRIDHw0TCgwKBQQBAgUBEgMfFB8KDAoFBAECBQMSAx8sLQogCgQEAQIGEgMg", 
            "BC4iE+W9k+WJjeWTjeW6lOaXtumXtAoKDAoFBAECBgQSAyAEDAoMCgUEAQIG", 
            "BRIDIA0TCgwKBQQBAgYBEgMgFB8KDAoFBAECBgMSAyAsLQodCgQEAQIHEgMh", 
            "BC4iEOaFouiwg+eUqOasoeaVsAoKDAoFBAECBwQSAyEEDAoMCgUEAQIHBRID", 
            "IQ0TCgwKBQQBAgcBEgMhFB0KDAoFBAECBwMSAyEsLQogCgQEAQIIEgMiBC4i", 
            "E+W+iOaFouiwg+eUqOasoeaVsAoKDAoFBAECCAQSAyIEDAoMCgUEAQIIBRID", 
            "Ig0TCgwKBQQBAggBEgMiFCEKDAoFBAECCAMSAyIsLQogCgQEAQIJEgMjBC8i", 
            "E+WBnOa7nuiwg+eUqOasoeaVsAoKDAoFBAECCQQSAyMEDAoMCgUEAQIJBRID", 
            "Iw0TCgwKBQQBAgkBEgMjFB4KDAoFBAECCQMSAyMsLgogCgQEAQIKEgMkBC8i", 
            "E+mUmeivr+iwg+eUqOasoeaVsAoKDAoFBAECCgQSAyQEDAoMCgUEAQIKBRID", 
            "JA0TCgwKBQQBAgoBEgMkFB4KDAoFBAECCgMSAyQsLgoaCgQEAQILEgMlBC8i", 
            "DeaYr+WQpuW8guatpQoKDAoFBAECCwQSAyUEDAoMCgUEAQILBRIDJQ0RCgwK", 
            "BQQBAgsBEgMlFBsKDAoFBAECCwMSAyUsLgofCgIEAhIEKQA1ARoT5ZCO56uv", 
            "bWV0cmlj5pWw5o2uCgoKCgMEAgESAykIEAoUCgQEAgIAEgMqBC4iB+WQjuer", 
            "rwoKDAoFBAICAAQSAyoEDAoMCgUEAgIABhIDKg0UCgwKBQQCAgABEgMqFRcK", 
            "DAoFBAICAAMSAyosLQodCgQEAgIBEgMrBC4iEOiwg+eUqOaAu+asoeaVsAoK", 
            "DAoFBAICAQQSAysEDAoMCgUEAgIBBRIDKw0TCgwKBQQCAgEBEgMrFCAKDAoF", 
            "BAICAQMSAyssLQodCgQEAgICEgMsBC4iEOaAu+WTjeW6lOaXtumXtAoKDAoF", 
            "BAICAgQSAywEDAoMCgUEAgICBRIDLA0TCgwKBQQCAgIBEgMsFB8KDAoFBAIC", 
            "AgMSAywsLQogCgQEAgIDEgMtBC4iE+acgOWkp+WTjeW6lOaXtumXtAoKDAoF", 
            "BAICAwQSAy0EDAoMCgUEAgIDBRIDLQ0TCgwKBQQCAgMBEgMtFB8KDAoFBAIC", 
            "AwMSAy0sLQogCgQEAgIEEgMuBC4iE+acgOWwj+WTjeW6lOaXtumXtAoKDAoF", 
            "BAICBAQSAy4EDAoMCgUEAgIEBRIDLg0TCgwKBQQCAgQBEgMuFB8KDAoFBAIC", 
            "BAMSAy4sLQogCgQEAgIFEgMvBC4iE+W9k+WJjeWTjeW6lOaXtumXtAoKDAoF", 
            "BAICBQQSAy8EDAoMCgUEAgIFBRIDLw0TCgwKBQQCAgUBEgMvFB8KDAoFBAIC", 
            "BQMSAy8sLQodCgQEAgIGEgMwBC4iEOaFouiwg+eUqOasoeaVsAoKDAoFBAIC", 
            "BgQSAzAEDAoMCgUEAgIGBRIDMA0TCgwKBQQCAgYBEgMwFB0KDAoFBAICBgMS", 
            "AzAsLQogCgQEAgIHEgMxBC4iE+W+iOaFouiwg+eUqOasoeaVsAoKDAoFBAIC", 
            "BwQSAzEEDAoMCgUEAgIHBRIDMQ0TCgwKBQQCAgcBEgMxFCEKDAoFBAICBwMS", 
            "AzEsLQogCgQEAgIIEgMyBC4iE+WBnOa7nuiwg+eUqOasoeaVsAoKDAoFBAIC", 
            "CAQSAzIEDAoMCgUEAgIIBRIDMg0TCgwKBQQCAggBEgMyFB4KDAoFBAICCAMS", 
            "AzIsLQogCgQEAgIJEgMzBC8iE+mUmeivr+iwg+eUqOasoeaVsAoKDAoFBAIC", 
            "CQQSAzMEDAoMCgUEAgIJBRIDMw0TCgwKBQQCAgkBEgMzFB4KDAoFBAICCQMS", 
            "AzMsLgoaCgQEAgIKEgM0BC8iDeaYr+WQpuW8guatpQoKDAoFBAICCgQSAzQE", 
            "DAoMCgUEAgIKBRIDNA0RCgwKBQQCAgoBEgM0FBsKDAoFBAICCgMSAzQsLgol", 
            "CgIEAxIEOABAARoZ5pWw5o2u5bqT6L+e5o6l5rGg5oyH5qCHCgoKCgMEAwES", 
            "AzgIGAoXCgQEAwIAEgM5BC4iCui/nuaOpeaxoAoKDAoFBAMCAAQSAzkEDAoM", 
            "CgUEAwIABhIDOQ0XCgwKBQQDAgABEgM5GBoKDAoFBAMCAAMSAzksLQojCgQE", 
            "AwIBEgM6BC4iFuacgOWkp+i/nuaOpeaxoOWkp+WwjwoKDAoFBAMCAQQSAzoE", 
            "DAoMCgUEAwIBBRIDOg0TCgwKBQQDAgEBEgM6FB8KDAoFBAMCAQMSAzosLQoj", 
            "CgQEAwICEgM7BC4iFuW9k+WJjei/nuaOpeaxoOWkp+WwjwoKDAoFBAMCAgQS", 
            "AzsEDAoMCgUEAwICBRIDOw0TCgwKBQQDAgIBEgM7FB8KDAoFBAMCAgMSAzss", 
            "LQojCgQEAwIDEgM8BC4iFuW9k+WJjea0u+WKqOi/nuaOpeaVsAoKDAoFBAMC", 
            "AwQSAzwEDAoMCgUEAwIDBRIDPA0TCgwKBQQDAgMBEgM8FCAKDAoFBAMCAwMS", 
            "AzwsLQojCgQEAwIEEgM9BC4iFuW9k+WJjeetieW+hei/nuaOpeaVsAoKDAoF", 
            "BAMCBAQSAz0EDAoMCgUEAwIEBRIDPQ0TCgwKBQQDAgQBEgM9FCQKDAoFBAMC", 
            "BAMSAz0sLQodCgQEAwIFEgM+BC4iEOazhOa8j+i/nuaOpeaVsAoKDAoFBAMC", 
            "BQQSAz4EDAoMCgUEAwIFBRIDPg0TCgwKBQQDAgUBEgM+FCEKDAoFBAMCBQMS", 
            "Az4sLQodCgQEAwIGEgM/BC4iEOWksei0pemHjei/nuaVsAoKDAoFBAMCBgQS", 
            "Az8EDAoMCgUEAwIGBRIDPw0TCgwKBQQDAgYBEgM/FCQKDAoFBAMCBgMSAz8s", 
            "LQpACgIEBBIEQwBXARo05aSW6YOo6LCD55SoQ3Jvc3NCVG1ldHJpY+aVsOaN", 
            "rijkuJrliqHnm7jkupLosIPnlKgpCgoKCgMEBAESA0MIFQoaCgQEBAIAEgNE", 
            "BDIiDeaYr+WQpuW8guatpQoKDAoFBAQCAAQSA0QEDAoMCgUEBAIABRIDRA0R", 
            "CgwKBQQEAgABEgNEFBsKDAoFBAQCAAMSA0QwMQoeCgQEBAIBEgNFBDIiEead", 
            "pea6kGFnZW50IGd1aWQKCgwKBQQEAgEEEgNFBAwKDAoFBAQCAQUSA0UNEwoM", 
            "CgUEBAIBARIDRRQhCgwKBQQEAgEDEgNFMDEKOQoEBAQCAhIDRgQyIizmnaXm", 
            "upBhZ2VudCBpZCAg77yMIGFnZW5056uv5LiN6ZyA6KaB5aGr5YWFCgoMCgUE", 
            "BAICBBIDRgQMCgwKBQQEAgIFEgNGDRMKDAoFBAQCAgESA0YUHwoMCgUEBAIC", 
            "AxIDRjAxChoKBAQEAgMSA0cEMiIN5p2l5rqQ5Lia5YqhCgoMCgUEBAIDBBID", 
            "RwQMCgwKBQQEAgMGEgNHDSAKDAoFBAQCAwESA0chJwoMCgUEBAIDAxIDRzAx", 
            "Ch4KBAQEAgQSA0gEMiIR55uu5qCHYWdlbnQgZ3VpZAoKDAoFBAQCBAQSA0gE", 
            "DAoMCgUEBAIEBRIDSA0TCgwKBQQEAgQBEgNIFB8KDAoFBAQCBAMSA0gwMQo5", 
            "CgQEBAIFEgNJBDIiLOebruagh2FnZW50IGlkICDvvIwgYWdlbnTnq6/kuI3p", 
            "nIDopoHloavlhYUKCgwKBQQEAgUEEgNJBAwKDAoFBAQCBQUSA0kNEwoMCgUE", 
            "BAIFARIDSRQdCgwKBQQEAgUDEgNJMDEKGgoEBAQCBhIDSgQyIg3nm67moIfk", 
            "uJrliqEKCgwKBQQEAgYEEgNKBAwKDAoFBAQCBgYSA0oNIAoMCgUEBAIGARID", 
            "SiElCgwKBQQEAgYDEgNKMDEKHQoEBAQCBxIDSwQyIhDor7fmsYLmgLvmrKHm", 
            "lbAKCgwKBQQEAgcEEgNLBAwKDAoFBAQCBwUSA0sNEwoMCgUEBAIHARIDSxQg", 
            "CgwKBQQEAgcDEgNLMDEKHQoEBAQCCBIDTAQyIhDmgLvlk43lupTml7bpl7QK", 
            "CgwKBQQEAggEEgNMBAwKDAoFBAQCCAUSA0wNEwoMCgUEBAIIARIDTBQfCgwK", 
            "BQQEAggDEgNMMDEKIAoEBAQCCRIDTQQzIhPmnIDlpKflk43lupTml7bpl7QK", 
            "CgwKBQQEAgkEEgNNBAwKDAoFBAQCCQUSA00NEwoMCgUEBAIJARIDTRQfCgwK", 
            "BQQEAgkDEgNNMDIKIAoEBAQCChIDTgQzIhPmnIDlsI/lk43lupTml7bpl7QK", 
            "CgwKBQQEAgoEEgNOBAwKDAoFBAQCCgUSA04NEwoMCgUEBAIKARIDThQfCgwK", 
            "BQQEAgoDEgNOMDIKIAoEBAQCCxIDTwQzIhPlvZPliY3lk43lupTml7bpl7QK", 
            "CgwKBQQEAgsEEgNPBAwKDAoFBAQCCwUSA08NEwoMCgUEBAILARIDTxQfCgwK", 
            "BQQEAgsDEgNPMDIKHQoEBAQCDBIDUAQzIhDmhaLor7fmsYLmrKHmlbAKCgwK", 
            "BQQEAgwEEgNQBAwKDAoFBAQCDAUSA1ANEwoMCgUEBAIMARIDUBQdCgwKBQQE", 
            "AgwDEgNQMDIKIAoEBAQCDRIDUQQzIhPlvojmhaLor7fmsYLmrKHmlbAKCgwK", 
            "BQQEAg0EEgNRBAwKDAoFBAQCDQUSA1ENEwoMCgUEBAINARIDURQhCgwKBQQE", 
            "Ag0DEgNRMDIKIAoEBAQCDhIDUgQzIhPlgZzmu57or7fmsYLmrKHmlbAKCgwK", 
            "BQQEAg4EEgNSBAwKDAoFBAQCDgUSA1INEwoMCgUEBAIOARIDUhQeCgwKBQQE", 
            "Ag4DEgNSMDIKIAoEBAQCDxIDUwQzIhPplJnor6/or7fmsYLmrKHmlbAKCgwK", 
            "BQQEAg8EEgNTBAwKDAoFBAQCDwUSA1MNEwoMCgUEBAIPARIDUxQeCgwKBQQE", 
            "Ag8DEgNTMDIKIAoEBAQCEBIDVAQzIhPlvILluLjor7fmsYLmrKHmlbAKCgwK", 
            "BQQEAhAEEgNUBAwKDAoFBAQCEAUSA1QNEwoMCgUEBAIQARIDVBQiCgwKBQQE", 
            "AhADEgNUMDIKJAoEBAQCERIDVQQzIhdodHRw6ZSZ6K+v6K+35rGC5qyh5pWw", 
            "CgoMCgUEBAIRBBIDVQQMCgwKBQQEAhEFEgNVDRMKDAoFBAQCEQESA1UUIgoM", 
            "CgUEBAIRAxIDVTAyClUKBAQEAhISA1YEMyJI6Leo5a655Zmo6LCD55So57G7", 
            "5Z6L77yM6K+l5a2X5q615rKh5pyJ5YC877yM6buY6K6k5Li6QkFDS0VORF9U", 
            "WVBFX0hUVFAKCgwKBQQEAhIEEgNWBAwKDAoFBAQCEgYSA1YNGAoMCgUEBAIS", 
            "ARIDVhkkCgwKBQQEAhIDEgNWMDIKIAoCBAUSBVsAkQEBGhPlrrnlmahtZXRy", 
            "aWPmlbDmja4KCgoKAwQFARIDWwgQCiYKBAQFAgASA1wENiIZSlZNIOW9k+WJ", 
            "jUhlYXDkvb/nlKgoTUIpCgoMCgUEBQIABBIDXAQMCgwKBQQFAgAFEgNcDRMK", 
            "DAoFBAUCAAESA1wUJAoMCgUEBQIAAxIDXDQ1Ch4KBAQFAgESA10ENiIRSlZN", 
            "IE1heCBIZWFwKE1CKQoKDAoFBAUCAQQSA10EDAoMCgUEBQIBBRIDXQ0TCgwK", 
            "BQQFAgEBEgNdFCIKDAoFBAUCAQMSA100NQokCgQEBQICEgNeBDYiF0pWTSBI", 
            "ZWFwIGNvbW1pdHRlZChNQikKCgwKBQQFAgIEEgNeBAwKDAoFBAUCAgUSA14N", 
            "EwoMCgUEBQICARIDXhQoCgwKBQQFAgIDEgNeNDUKKQoEBAUCAxIDXwQ2IhxK", 
            "Vk0gTWFqb3IgQ29sbGVjdGlvbnPmrKHmlbAKCgwKBQQFAgMEEgNfBAwKDAoF", 
            "BAUCAwUSA18NEwoMCgUEBQIDARIDXxQsCgwKBQQFAgMDEgNfNDUKLAoEBAUC", 
            "BBIDYAQ2Ih9KVk0gTWFqb3IgQ29sbGVjdGlvbnPmgLvogJfml7YKCgwKBQQF", 
            "AgQEEgNgBAwKDAoFBAUCBAUSA2ANEwoMCgUEBQIEARIDYBQuCgwKBQQFAgQD", 
            "EgNgNDUKLwoEBAUCBRIDYQQ2IiJKVk0gTWFqb3IgQ29sbGVjdGlvbnPmnIDl", 
            "pKfogJfml7YKCgwKBQQFAgUEEgNhBAwKDAoFBAUCBQUSA2ENEwoMCgUEBQIF", 
            "ARIDYRQuCgwKBQQFAgUDEgNhNDUKLwoEBAUCBhIDYgQ2IiJKVk0gTWFqb3Ig", 
            "Q29sbGVjdGlvbnPmnIDlsI/ogJfml7YKCgwKBQQFAgYEEgNiBAwKDAoFBAUC", 
            "BgUSA2INEwoMCgUEBQIGARIDYhQuCgwKBQQFAgYDEgNiNDUKKQoEBAUCBxID", 
            "YwQ2IhxKVk0gTWlub3IgQ29sbGVjdGlvbnPmrKHmlbAKCgwKBQQFAgcEEgNj", 
            "BAwKDAoFBAUCBwUSA2MNEwoMCgUEBQIHARIDYxQsCgwKBQQFAgcDEgNjNDUK", 
            "LAoEBAUCCBIDZAQ2Ih9KVk0gTWlub3IgQ29sbGVjdGlvbnPmgLvogJfml7YK", 
            "CgwKBQQFAggEEgNkBAwKDAoFBAUCCAUSA2QNEwoMCgUEBQIIARIDZBQuCgwK", 
            "BQQFAggDEgNkNDUKLwoEBAUCCRIDZQQ3IiJKVk0gTWlub3IgQ29sbGVjdGlv", 
            "bnPmnIDlpKfogJfml7YKCgwKBQQFAgkEEgNlBAwKDAoFBAUCCQUSA2UNEwoM", 
            "CgUEBQIJARIDZRQuCgwKBQQFAgkDEgNlNDYKLwoEBAUCChIDZgQ3IiJKVk0g", 
            "TWlub3IgQ29sbGVjdGlvbnPmnIDlsI/ogJfml7YKCgwKBQQFAgoEEgNmBAwK", 
            "DAoFBAUCCgUSA2YNEwoMCgUEBQIKARIDZhQuCgwKBQQFAgoDEgNmNDYKJQoE", 
            "BAUCCxIDZwQ3IhhKVk0gQ29kZSBDYWNoZeW3suS9v+eUqAoKDAoFBAUCCwQS", 
            "A2cEDAoMCgUEBQILBRIDZw0TCgwKBQQFAgsBEgNnFCQKDAoFBAUCCwMSA2c0", 
            "NgolCgQEBQIMEgNoBDciGEpWTSBDb2RlIENhY2hl5bey5o+Q5LqkCgoMCgUE", 
            "BQIMBBIDaAQMCgwKBQQFAgwFEgNoDRMKDAoFBAUCDAESA2gUKQoMCgUEBQIM", 
            "AxIDaDQ2CigKBAQFAg0SA2kENyIbSlZNIENvZGUgQ2FjaGXmnIDlpKflj6/n", 
            "lKgKCgwKBQQFAg0EEgNpBAwKDAoFBAUCDQUSA2kNEwoMCgUEBQINARIDaRQj", 
            "CgwKBQQFAg0DEgNpNDYKKAoEBAUCDhIDagQ3IhtKVk0gUFMgRWRlbiBTcGFj", 
            "ZeW3suS9v+eUqAoKDAoFBAUCDgQSA2oEDAoMCgUEBQIOBRIDag0TCgwKBQQF", 
            "Ag4BEgNqFCYKDAoFBAUCDgMSA2o0NgooCgQEBQIPEgNrBDciG0pWTSBQUyBF", 
            "ZGVuIFNwYWNl5bey5o+Q5LqkCgoMCgUEBQIPBBIDawQMCgwKBQQFAg8FEgNr", 
            "DRMKDAoFBAUCDwESA2sUKwoMCgUEBQIPAxIDazQ2CisKBAQFAhASA2wENyIe", 
            "SlZNIFBTIEVkZW4gU3BhY2XmnIDlpKflj6/nlKgKCgwKBQQFAhAEEgNsBAwK", 
            "DAoFBAUCEAUSA2wNEwoMCgUEBQIQARIDbBQlCgwKBQQFAhADEgNsNDYKJQoE", 
            "BAUCERIDbQQ3IhhKVk0gUFMgT2xkIEdlbuW3suS9v+eUqAoKDAoFBAUCEQQS", 
            "A20EDAoMCgUEBQIRBRIDbQ0TCgwKBQQFAhEBEgNtFCMKDAoFBAUCEQMSA200", 
            "NgolCgQEBQISEgNuBDciGEpWTSBQUyBPbGQgR2Vu5bey5o+Q5LqkCgoMCgUE", 
            "BQISBBIDbgQMCgwKBQQFAhIFEgNuDRMKDAoFBAUCEgESA24UKAoMCgUEBQIS", 
            "AxIDbjQ2CigKBAQFAhMSA28ENyIbSlZNIFBTIE9sZCBHZW7mnIDlpKflj6/n", 
            "lKgKCgwKBQQFAhMEEgNvBAwKDAoFBAUCEwUSA28NEwoMCgUEBQITARIDbxQi", 
            "CgwKBQQFAhMDEgNvNDYKJgoEBAUCFBIDcAQ3IhlKVk0gUFMgUGVybSBHZW7l", 
            "t7Lkvb/nlKgKCgwKBQQFAhQEEgNwBAwKDAoFBAUCFAUSA3ANEwoMCgUEBQIU", 
            "ARIDcBQkCgwKBQQFAhQDEgNwNDYKJgoEBAUCFRIDcQQ3IhlKVk0gUFMgUGVy", 
            "bSBHZW7lt7Lmj5DkuqQKCgwKBQQFAhUEEgNxBAwKDAoFBAUCFQUSA3ENEwoM", 
            "CgUEBQIVARIDcRQpCgwKBQQFAhUDEgNxNDYKLAoEBAUCFhIDcgQ3Ih9KVk0g", 
            "UFMgUGVybSBHZW7lt7LmnIDlpKflj6/nlKgKCgwKBQQFAhYEEgNyBAwKDAoF", 
            "BAUCFgUSA3INEwoMCgUEBQIWARIDchQjCgwKBQQFAhYDEgNyNDYKLAoEBAUC", 
            "FxIDcwQ3Ih9KVk0gUFMgU3Vydml2b3IgU3BhY2Xlt7Lkvb/nlKgKCgwKBQQF", 
            "AhcEEgNzBAwKDAoFBAUCFwUSA3MNEwoMCgUEBQIXARIDcxQqCgwKBQQFAhcD", 
            "EgNzNDYKLAoEBAUCGBIDdAQ3Ih9KVk0gUFMgU3Vydml2b3IgU3BhY2Xlt7Lm", 
            "j5DkuqQKCgwKBQQFAhgEEgN0BAwKDAoFBAUCGAUSA3QNEwoMCgUEBQIYARID", 
            "dBQvCgwKBQQFAhgDEgN0NDYKLwoEBAUCGRIDdQQ3IiJKVk0gUFMgU3Vydml2", 
            "b3IgU3BhY2XmnIDlpKflj6/nlKgKCgwKBQQFAhkEEgN1BAwKDAoFBAUCGQUS", 
            "A3UNEwoMCgUEBQIZARIDdRQpCgwKBQQFAhkDEgN1NDYKJQoEBAUCGhIDdgQ3", 
            "IhhKVk0gTWV0YSBTcGFjZeW3suS9v+eUqAoKDAoFBAUCGgQSA3YEDAoMCgUE", 
            "BQIaBRIDdg0TCgwKBQQFAhoBEgN2FCQKDAoFBAUCGgMSA3Y0NgolCgQEBQIb", 
            "EgN3BDciGEpWTSBNZXRhIFNwYWNl5bey5o+Q5LqkCgoMCgUEBQIbBBIDdwQM", 
            "CgwKBQQFAhsFEgN3DRMKDAoFBAUCGwESA3cUKQoMCgUEBQIbAxIDdzQ2CigK", 
            "BAQFAhwSA3gENyIbSlZNIE1ldGEgU3BhY2XmnIDlpKflj6/nlKgKCgwKBQQF", 
            "AhwEEgN4BAwKDAoFBAUCHAUSA3gNEwoMCgUEBQIcARIDeBQjCgwKBQQFAhwD", 
            "EgN4NDYKKwoEBAUCHRIDeQQ3Ih5KVk0gQ29tcHJlc3NlZCBTcGFjZeW3suS9", 
            "v+eUqAoKDAoFBAUCHQQSA3kEDAoMCgUEBQIdBRIDeQ0TCgwKBQQFAh0BEgN5", 
            "FCoKDAoFBAUCHQMSA3k0NgorCgQEBQIeEgN6BDciHkpWTSBDb21wcmVzc2Vk", 
            "IFNwYWNl5bey5o+Q5LqkCgoMCgUEBQIeBBIDegQMCgwKBQQFAh4FEgN6DRMK", 
            "DAoFBAUCHgESA3oULwoMCgUEBQIeAxIDejQ2Ci4KBAQFAh8SA3sENyIhSlZN", 
            "IENvbXByZXNzZWQgU3BhY2XmnIDlpKflj6/nlKgKCgwKBQQFAh8EEgN7BAwK", 
            "DAoFBAUCHwUSA3sNEwoMCgUEBQIfARIDexQpCgwKBQQFAh8DEgN7NDYKMAoE", 
            "BAUCIBIDfAQ3IiNDbGFzc2VzIEN1cnJlbnQgTG9hZGVkIGNsYXNzIGNvdW50", 
            "CgoMCgUEBQIgBBIDfAQMCgwKBQQFAiAFEgN8DRMKDAoFBAUCIAESA3wUKAoM", 
            "CgUEBQIgAxIDfDQ2CioKBAQFAiESA30ENyIdQ2xhc3NlcyBUb3RhbCBDbGFz", 
            "c2VzIExvYWRlZAoKDAoFBAUCIQQSA30EDAoMCgUEBQIhBRIDfQ0TCgwKBQQF", 
            "AiEBEgN9FCYKDAoFBAUCIQMSA300NgoWCgQEBQIiEgN+BDciCUdD5qyh5pWw", 
            "CgoMCgUEBQIiBBIDfgQMCgwKBQQFAiIFEgN+DRMKDAoFBAUCIgESA34UGwoM", 
            "CgUEBQIiAxIDfjQ2ChkKBAQFAiMSA38ENyIMR0PmgLvogJfml7YKCgwKBQQF", 
            "AiMEEgN/BAwKDAoFBAUCIwUSA38NEwoMCgUEBQIjARIDfxQdCgwKBQQFAiMD", 
            "EgN/NDYKIwoEBAUCJBIEgAEENyIV5Y2V5qyh5pyA5aSnR0PogJfml7YKCg0K", 
            "BQQFAiQEEgSAAQQMCg0KBQQFAiQFEgSAAQ0TCg0KBQQFAiQBEgSAARQdCg0K", 
            "BQQFAiQDEgSAATQ2CiMKBAQFAiUSBIEBBDciFeWNleasoeacgOWwj0dD6ICX", 
            "5pe2CgoNCgUEBQIlBBIEgQEEDAoNCgUEBQIlBRIEgQENEwoNCgUEBQIlARIE", 
            "gQEUHQoNCgUEBQIlAxIEgQE0NgoeCgQEBQImEgSCAQQ3IhDov5DooYznur/n", 
            "qIvmlbAKCg0KBQQFAiYEEgSCAQQMCg0KBQQFAiYFEgSCAQ0TCg0KBQQFAiYB", 
            "EgSCARQiCg0KBQQFAiYDEgSCATQ2Ch4KBAQFAicSBIMBBDciEOatu+mUgee6", 
            "v+eoi+aVsAoKDQoFBAUCJwQSBIMBBAwKDQoFBAUCJwUSBIMBDRMKDQoFBAUC", 
            "JwESBIMBFCMKDQoFBAUCJwMSBIMBNDYKHgoEBAUCKBIEhAEENyIQZmluaXNo", 
            "57q/56iL5pWwCgoNCgUEBQIoBBIEhAEEDAoNCgUEBQIoBRIEhAENEwoNCgUE", 
            "BQIoARIEhAEUIQoNCgUEBQIoAxIEhAE0NgodCgQEBQIpEgSFAQQ3Ig9ibG9j", 
            "a+e6v+eoi+aVsAoKDQoFBAUCKQQSBIUBBAwKDQoFBAUCKQUSBIUBDRMKDQoF", 
            "BAUCKQESBIUBFCAKDQoFBAUCKQMSBIUBNDYKHgoEBAUCKhIEhgEENyIQQ1BV", 
            "5L2/55So546HKCUpCgoNCgUEBQIqBBIEhgEEDAoNCgUEBQIqBRIEhgENEwoN", 
            "CgUEBQIqARIEhgEUHAoNCgUEBQIqAxIEhgE0NgopCgQEBQIrEgSHAQQ3IhtD", 
            "TFIgSGVhcCBDdXJyZW50IFVzYWdlKE1CKQoKDQoFBAUCKwQSBIcBBAwKDQoF", 
            "BAUCKwUSBIcBDRMKDQoFBAUCKwESBIcBFCQKDQoFBAUCKwMSBIcBNDYKJQoE", 
            "BAUCLBIEiAEENyIXQ0xSIEhlYXAgQ29tbWl0dGVkKE1CKQoKDQoFBAUCLAQS", 
            "BIgBBAwKDQoFBAUCLAUSBIgBDRMKDQoFBAUCLAESBIgBFCgKDQoFBAUCLAMS", 
            "BIgBNDYKJwoEBAUCLRIEiQEENyIZQ0xSIEhlYXAgR2VuIDAgVXNhZ2UoTUIp", 
            "CgoNCgUEBQItBBIEiQEEDAoNCgUEBQItBRIEiQENEwoNCgUEBQItARIEiQEU", 
            "IgoNCgUEBQItAxIEiQE0NgonCgQEBQIuEgSKAQhLIhlnZW4gMCBHQ+asoeaV", 
            "sCAgICAgICAgICAKCg0KBQQFAi4EEgSKAQgQCg0KBQQFAi4FEgSKAREXCg0K", 
            "BQQFAi4BEgSKARgpCg0KBQQFAi4DEgSKAUhKCicKBAQFAi8SBIsBBDciGUNM", 
            "UiBIZWFwIEdlbiAxIFVzYWdlKE1CKQoKDQoFBAUCLwQSBIsBBAwKDQoFBAUC", 
            "LwUSBIsBDRMKDQoFBAUCLwESBIsBFCIKDQoFBAUCLwMSBIsBNDYKIQoEBAUC", 
            "MBIEjAEISyITZ2VuIDEgR0PmrKHmlbAgICAgCgoNCgUEBQIwBBIEjAEIEAoN", 
            "CgUEBQIwBRIEjAERFwoNCgUEBQIwARIEjAEYKQoNCgUEBQIwAxIEjAFISgon", 
            "CgQEBQIxEgSNAQQ3IhlDTFIgSGVhcCBHZW4gMiBVc2FnZShNQikKCg0KBQQF", 
            "AjEEEgSNAQQMCg0KBQQFAjEFEgSNAQ0TCg0KBQQFAjEBEgSNARQiCg0KBQQF", 
            "AjEDEgSNATQ2CiEKBAQFAjISBI4BCEsiE2dlbiAyIEdD5qyh5pWwICAgIAoK", 
            "DQoFBAUCMgQSBI4BCBAKDQoFBAUCMgUSBI4BERcKDQoFBAUCMgESBI4BGCkK", 
            "DQoFBAUCMgMSBI4BSEoKLgoEBAUCMxIEjwEENyIgQ0xSIExhcmdlIE9iamVj", 
            "dCBIZWFwIFVzYWdlKE1CKQoKDQoFBAUCMwQSBI8BBAwKDQoFBAUCMwUSBI8B", 
            "DRMKDQoFBAUCMwESBI8BFCsKDQoFBAUCMwMSBI8BNDYKJwoEBAUCNBIEkAEI", 
            "OyIZTGFyZ2VPYmplY3RIZWFwIEdD5qyh5pWwCgoNCgUEBQI0BBIEkAEIEAoN", 
            "CgUEBQI0BRIEkAERFwoNCgUEBQI0ARIEkAEYLwoNCgUEBQI0AxIEkAE4Ogok", 
            "CgIEBhIGlAEAmAEBGhbmr4/kuKrliIbljLrnmoTmlbDmja4KCgsKAwQGARIE", 
            "lAEIEgoYCgQEBgIAEgSVAQQmIgrliIbljLrlkI0KCg0KBQQGAgAEEgSVAQQM", 
            "Cg0KBQQGAgAFEgSVAQ0TCg0KBQQGAgABEgSVARQdCg0KBQQGAgADEgSVASQl", 
            "Ch8KBAQGAgESBJYBBCYiEeejgeebmOWkp+WwjyhNQikKCg0KBQQGAgEEEgSW", 
            "AQQMCg0KBQQGAgEFEgSWAQ0TCg0KBQQGAgEBEgSWARQcCg0KBQQGAgEDEgSW", 
            "ASQlCiUKBAQGAgISBJcBBCYiF+epuumXsuejgeebmOWkp+WwjyhNQikKCg0K", 
            "BQQGAgIEEgSXAQQMCg0KBQQGAgIFEgSXAQ0TCg0KBQQGAgIBEgSXARQgCg0K", 
            "BQQGAgIDEgSXASQlCicKAgQHEgabAQCxAQEaGeS4u+acuueOr+Wig21ldHJp", 
            "Y+aVsOaNrgoKCwoDBAcBEgSbAQgQCh4KBAQHAgASBJwBBC4iEGNwdeS9v+eU", 
            "qOeOhyglKQoKDQoFBAcCAAQSBJwBBAwKDQoFBAcCAAUSBJwBDRMKDQoFBAcC", 
            "AAESBJwBFBwKDQoFBAcCAAMSBJwBLC0KHwoEBAcCARIEnQEELiIR5YaF5a2Y", 
            "5aSn5bCPKE1CKQoKDQoFBAcCAQQSBJ0BBAwKDQoFBAcCAQUSBJ0BDRMKDQoF", 
            "BAcCAQESBJ0BFBsKDQoFBAcCAQMSBJ0BLC0KJQoEBAcCAhIEngEELiIX56m6", 
            "6Zey5YaF5a2Y5aSn5bCPKE1CKQoKDQoFBAcCAgQSBJ4BBAwKDQoFBAcCAgUS", 
            "BJ4BDRMKDQoFBAcCAgESBJ4BFB8KDQoFBAcCAgMSBJ4BLC0KJQoEBAcCAxIE", 
            "nwEELiIX5bey55So5YaF5a2Y5aSn5bCPKE1CKQoKDQoFBAcCAwQSBJ8BBAwK", 
            "DQoFBAcCAwUSBJ8BDRMKDQoFBAcCAwESBJ8BFB8KDQoFBAcCAwMSBJ8BLC0K", 
            "LQoEBAcCBBIEoAEELiIf56OB55uYSU/or7vlj5blrZfoioLmlbAoYnl0ZXMp", 
            "CgoNCgUEBwIEBBIEoAEEDAoNCgUEBwIEBRIEoAENEwoNCgUEBwIEARIEoAEU", 
            "IQoNCgUEBwIEAxIEoAEsLQorCgQEBwIFEgShAQQuIh3no4Hnm5hJT+ivu+WP", 
            "luasoeaVsCjmrKHmlbApCgoNCgUEBwIFBBIEoQEEDAoNCgUEBwIFBRIEoQEN", 
            "EwoNCgUEBwIFARIEoQEUIQoNCgUEBwIFAxIEoQEsLQotCgQEBwIGEgSiAQQu", 
            "Ih/no4Hnm5hJT+WGmeWFpeWtl+iKguaVsChieXRlcykKCg0KBQQHAgYEEgSi", 
            "AQQMCg0KBQQHAgYFEgSiAQ0TCg0KBQQHAgYBEgSiARQiCg0KBQQHAgYDEgSi", 
            "ASwtCi0KBAQHAgcSBKMBBC4iH+ejgeebmElP5YaZ5YWl5qyh5pWwKOasoeaV", 
            "sO+8iQoKDQoFBAcCBwQSBKMBBAwKDQoFBAcCBwUSBKMBDRMKDQoFBAcCBwES", 
            "BKMBFCIKDQoFBAcCBwMSBKMBLC0KJwoEBAcCCBIEpAEELiIZ5aSa5Liq5YiG", 
            "5Yy656OB55uY5L+h5oGvCgoNCgUEBwIIBBIEpAEEDAoNCgUEBwIIBhIEpAEN", 
            "FwoNCgUEBwIIARIEpAEYIgoNCgUEBwIIAxIEpAEsLQotCgQEBwIJEgSlAQQv", 
            "Ih/nvZHnu5xJT+WPkemAgeWtl+iKguaVsChieXRlcykKCg0KBQQHAgkEEgSl", 
            "AQQMCg0KBQQHAgkFEgSlAQ0TCg0KBQQHAgkBEgSlARQgCg0KBQQHAgkDEgSl", 
            "ASwuCi0KBAQHAgoSBKYBBC8iH+e9kee7nElP5Y+R6YCB5a2X6IqC5pWwKGJ5", 
            "dGVzKQoKDQoFBAcCCgQSBKYBBAwKDQoFBAcCCgUSBKYBDRMKDQoFBAcCCgES", 
            "BKYBFCAKDQoFBAcCCgMSBKYBLC4KJAoEBAcCCxIEpwEELyIW572R5Y2h5Y+R", 
            "6YCB55qE5YyF5pWwCgoNCgUEBwILBBIEpwEEDAoNCgUEBwILBRIEpwENEwoN", 
            "CgUEBwILARIEpwEUIwoNCgUEBwILAxIEpwEsLgokCgQEBwIMEgSoAQQvIhbn", 
            "vZHljaHmjqXmlLbnmoTljIXmlbAKCg0KBQQHAgwEEgSoAQQMCg0KBQQHAgwF", 
            "EgSoAQ0TCg0KBQQHAgwBEgSoARQjCg0KBQQHAgwDEgSoASwuCjMKBAQHAg0S", 
            "BKkBBC8iJXRjcOi/nuaOpeeKtuaAge+8jExJU1RFTueKtuaAgeaVsOmHjwoK", 
            "DQoFBAcCDQQSBKkBBAwKDQoFBAcCDQUSBKkBDRMKDQoFBAcCDQESBKkBFCcK", 
            "DQoFBAcCDQMSBKkBLC4KOAoEBAcCDhIEqgEELyIqdGNw6L+e5o6l54q25oCB", 
            "77yMRVNUQUJMSVNIRUTnirbmgIHmlbDph48KCg0KBQQHAg4EEgSqAQQMCg0K", 
            "BQQHAg4FEgSqAQ0TCg0KBQQHAg4BEgSqARQnCg0KBQQHAg4DEgSqASwuCjYK", 
            "BAQHAg8SBKsBBC8iKHRjcOi/nuaOpeeKtuaAge+8jFRJTUVfV0FJVOeKtuaA", 
            "geaVsOmHjwoKDQoFBAcCDwQSBKsBBAwKDQoFBAcCDwUSBKsBDRMKDQoFBAcC", 
            "DwESBKsBFCkKDQoFBAcCDwMSBKsBLC4KNQoEBAcCEBIErAEELyIndGNw6L+e", 
            "5o6l54q25oCB77yMRklOX1dBSVTnirbmgIHmlbDph48KCg0KBQQHAhAEEgSs", 
            "AQQMCg0KBQQHAhAFEgSsAQ0TCg0KBQQHAhABEgSsARQoCg0KBQQHAhADEgSs", 
            "ASwuCjcKBAQHAhESBK0BBC8iKXRjcOi/nuaOpeeKtuaAge+8jEZJTl9XQUlU", 
            "XzLnirbmgIHmlbDph48KCg0KBQQHAhEEEgStAQQMCg0KBQQHAhEFEgStAQ0T", 
            "Cg0KBQQHAhEBEgStARQpCg0KBQQHAhEDEgStASwuCjcKBAQHAhISBK4BBC8i", 
            "KXRjcOi/nuaOpeeKtuaAge+8jENMT1NFX1dBSVTnirbmgIHmlbDph48KCg0K", 
            "BQQHAhIEEgSuAQQMCg0KBQQHAhIFEgSuAQ0TCg0KBQQHAhIBEgSuARQqCg0K", 
            "BQQHAhIDEgSuASwuChsKBAQHAhMSBK8BBC8iDXRjcOi/nuaOpeaVsAoKDQoF", 
            "BAcCEwQSBK8BBAwKDQoFBAcCEwUSBK8BDRMKDQoFBAcCEwESBK8BFCAKDQoF", 
            "BAcCEwMSBK8BLC4KJwoEBAcCFBIEsAEELyIZ5b2T5YmN5omT5byA5paH5Lu2", 
            "5Y+l5p+ECgoNCgUEBwIUBBIEsAEEDAoNCgUEBwIUBRIEsAENEwoNCgUEBwIU", 
            "ARIEsAEUHgoNCgUEBwIUAxIEsAEsLgonCgIECBIGtgEAvwEBGhnkuIrkvKBt", 
            "ZXRyaWPmlbDmja7or7fmsYIKCgsKAwQIARIEtgEIEgodCgQECAIAEgS3AQQ2", 
            "Ig9hZ2VudCBpZGVudGl0eQoKDQoFBAgCAAQSBLcBBAwKDQoFBAgCAAYSBLcB", 
            "DRoKDQoFBAgCAAESBLcBGygKDQoFBAgCAAMSBLcBNDUKJwoEBAgCARIEuAEE", 
            "NiIZ5Lia5YqhbWV0cmlj5oyH5qCH5pWw5o2uCgoNCgUECAIBBBIEuAEEDAoN", 
            "CgUECAIBBhIEuAENFQoNCgUECAIBARIEuAEWHwoNCgUECAIBAxIEuAE0NQou", 
            "CgQECAICEgS5AQQ2IiDlkI7nq68t5Lia5YqhbWV0cmlj5oyH5qCH5pWw5o2u", 
            "CgoNCgUECAICBBIEuQEEDAoNCgUECAICBhIEuQENFwoNCgUECAICARIEuQEY", 
            "IwoNCgUECAICAxIEuQE0NQonCgQECAIDEgS6AQQ2IhnlkI7nq69tZXRyaWPm", 
            "jIfmoIfmlbDmja4KCg0KBQQIAgMEEgS6AQQMCg0KBQQIAgMGEgS6AQ0VCg0K", 
            "BQQIAgMBEgS6ARYfCg0KBQQIAgMDEgS6ATQ1Ci0KBAQIAgQSBLsBBDYiH+Wu", 
            "ueWZqOeOr+Wig21ldHJpY+aMh+agh+aVsOaNrgoKDQoFBAgCBAQSBLsBBAwK", 
            "DQoFBAgCBAYSBLsBDRUKDQoFBAgCBAESBLsBFh8KDQoFBAgCBAMSBLsBNDUK", 
            "LQoEBAgCBRIEvAEENiIf5Li75py6546v5aKDbWV0cmlj5oyH5qCH5pWw5o2u", 
            "CgoNCgUECAIFBBIEvAEEDAoNCgUECAIFBhIEvAENFQoNCgUECAIFARIEvAEW", 
            "HwoNCgUECAIFAxIEvAE0NQowCgQECAIGEgS9AQQ2IiLkuJrliqHpl7Tnm7jk", 
            "upLosIPnlKhtZXRpcmPmlbDmja4KCg0KBQQIAgYEEgS9AQQMCg0KBQQIAgYG", 
            "EgS9AQ0aCg0KBQQIAgYBEgS9ARspCg0KBQQIAgYDEgS9ATQ1CicKBAQIAgcS", 
            "BL4BBDYiGeaVsOaNruW6k+i/nuaOpeaxoOaMh+aghwoKDQoFBAgCBwQSBL4B", 
            "BAwKDQoFBAgCBwYSBL4BDR0KDQoFBAgCBwESBL4BHicKDQoFBAgCBwMSBL4B", 
          "NDU="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_BTMetric__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_BTMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.BTMetric, global::BonreePB.BTMetric.Builder>(internal__static_BonreePB_BTMetric__Descriptor,
                new string[] { "Bt", "RequestCount", "SumRespTime", "MaxRespTime", "MinRespTime", "CurRespTime", "SlowCalls", "VerySlowCalls", "StallCalls", "ErrorCalls", "ExceptionCount", "HttpErrorCount", });
        internal__static_BonreePB_BEBTMetric__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_BEBTMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.BEBTMetric, global::BonreePB.BEBTMetric.Builder>(internal__static_BonreePB_BEBTMetric__Descriptor,
                new string[] { "Bt", "Be", "RequestCount", "SumRespTime", "MaxRespTime", "MinRespTime", "CurRespTime", "SlowCalls", "VerySlowCalls", "StallCalls", "ErrorCalls", "IsAsync", });
        internal__static_BonreePB_BEMetric__Descriptor = Descriptor.MessageTypes[2];
        internal__static_BonreePB_BEMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.BEMetric, global::BonreePB.BEMetric.Builder>(internal__static_BonreePB_BEMetric__Descriptor,
                new string[] { "Be", "RequestCount", "SumRespTime", "MaxRespTime", "MinRespTime", "CurRespTime", "SlowCalls", "VerySlowCalls", "StallCalls", "ErrorCalls", "IsAsync", });
        internal__static_BonreePB_DataSourceMetric__Descriptor = Descriptor.MessageTypes[3];
        internal__static_BonreePB_DataSourceMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.DataSourceMetric, global::BonreePB.DataSourceMetric.Builder>(internal__static_BonreePB_DataSourceMetric__Descriptor,
                new string[] { "Ds", "MaxPoolSize", "CurPoolSize", "CurConnCount", "CurWaitConnCount", "LeakConnCount", "FaildReconnCount", });
        internal__static_BonreePB_CrossBTMetric__Descriptor = Descriptor.MessageTypes[4];
        internal__static_BonreePB_CrossBTMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.CrossBTMetric, global::BonreePB.CrossBTMetric.Builder>(internal__static_BonreePB_CrossBTMetric__Descriptor,
                new string[] { "IsAsync", "FromAgentGUID", "FromAgentID", "FromBT", "ToAgentGUID", "ToAgentID", "ToBT", "RequestCount", "SumRespTime", "MaxRespTime", "MinRespTime", "CurRespTime", "SlowCalls", "VerySlowCalls", "StallCalls", "ErrorCalls", "ExceptionCount", "HttpErrorCount", "BackendType", });
        internal__static_BonreePB_VMMetric__Descriptor = Descriptor.MessageTypes[5];
        internal__static_BonreePB_VMMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.VMMetric, global::BonreePB.VMMetric.Builder>(internal__static_BonreePB_VMMetric__Descriptor,
                new string[] { "JvmUsageHeapSize", "JvmMaxHeapSize", "JvmCommittedHeapSize", "JvmMajorCollectionsCount", "JvmSumMajorCollectionsTime", "JvmMaxMajorCollectionsTime", "JvmMinMajorCollectionsTime", "JvmMinorCollectionsCount", "JvmSumMinorCollectionsTime", "JvmMaxMinorCollectionsTime", "JvmMinMinorCollectionsTime", "JvmCodeCacheUsed", "JvmCodeCacheCommitted", "JvmCodeCacheMAX", "JvmPSEdenSpaceUsed", "JvmPSEdenSpaceCommitted", "JvmPSEdenSpaceMAX", "JvmPSOldGenUsed", "JvmPSOldGenCommitted", "JvmPSOldGenMAX", "JvmPSPermGenUsed", "JvmPSPermGenCommitted", "JvmPSPermGenMAX", "JvmPSSurvivorSpaceUsed", "JvmPSSurvivorSpaceCommitted", "JvmPSSurvivorSpaceMAX", "JvmMetaSpaceUsed", "JvmMetaSpaceCommitted", "JvmMetaSpaceMAX", "JvmCompressedSpaceUsed", "JvmCompressedSpaceCommitted", "JvmCompressedSpaceMAX", "CurrentLoadedClasses", "TotalLoadedClasses", "GcCount", "SumGCTime", "MaxGCTime", "MinGCTime", "RunningThreads", "DeadlockThreads", "FinishThreads", "BlockThreads", "CpuUsage", "ClrUsageHeapSize", "ClrCommittedHeapSize", "ClrGen0Usage", "ClrGen0GcCount", "ClrGen1Usage", "ClrGen1GcCount", "ClrGen2Usage", "ClrGen2GcCount", "ClrLargeObjectHeapUsage", "ClrLargeObjectGcCount", });
        internal__static_BonreePB_DiskMetric__Descriptor = Descriptor.MessageTypes[6];
        internal__static_BonreePB_DiskMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.DiskMetric, global::BonreePB.DiskMetric.Builder>(internal__static_BonreePB_DiskMetric__Descriptor,
                new string[] { "Partition", "DiskSize", "DiskFreeSize", });
        internal__static_BonreePB_MAMetric__Descriptor = Descriptor.MessageTypes[7];
        internal__static_BonreePB_MAMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.MAMetric, global::BonreePB.MAMetric.Builder>(internal__static_BonreePB_MAMetric__Descriptor,
                new string[] { "CpuUsage", "MemSize", "FreeMemSize", "UsedMemSize", "DiskReadBytes", "DiskReadCount", "DiskWriteBytes", "DiskWriteCount", "DiskMetric", "NetSendBytes", "NetRecvBytes", "NetSendPackages", "NetRecvPackages", "TcpListenStateCount", "TcpEstablishedCount", "TcpTimeWaitStateCount", "TcpFinWaitStateCount", "TcpFinWait2StateCount", "TcpCloseWaitStateCOunt", "TcpConnCount", "CurOpenFds", });
        internal__static_BonreePB_MetricsReq__Descriptor = Descriptor.MessageTypes[8];
        internal__static_BonreePB_MetricsReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.MetricsReq, global::BonreePB.MetricsReq.Builder>(internal__static_BonreePB_MetricsReq__Descriptor,
                new string[] { "AgentIdentity", "BtMetrics", "BebtMetrics", "BeMetrics", "VmMetrics", "MaMetrics", "CrossBTMetircs", "DsMetrics", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbAgent.RegisterAllExtensions(registry);
        global::BonreePB.PbBusinessTransaction.RegisterAllExtensions(registry);
        global::BonreePB.PbBackend.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbAgent.Descriptor, 
          global::BonreePB.PbBusinessTransaction.Descriptor, 
          global::BonreePB.PbBackend.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BTMetric : pb::GeneratedMessage<BTMetric, BTMetric.Builder> {
    private BTMetric() { }
    private static readonly BTMetric defaultInstance = new BTMetric().MakeReadOnly();
    private static readonly string[] _bTMetricFieldNames = new string[] { "bt", "curRespTime", "errorCalls", "exceptionCount", "httpErrorCount", "maxRespTime", "minRespTime", "requestCount", "slowCalls", "stallCalls", "sumRespTime", "verySlowCalls" };
    private static readonly uint[] _bTMetricFieldTags = new uint[] { 10, 48, 80, 88, 96, 32, 40, 16, 56, 72, 24, 64 };
    public static BTMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BTMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BTMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_BTMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BTMetric, BTMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_BTMetric__FieldAccessorTable; }
    }
    
    public const int BtFieldNumber = 1;
    private bool hasBt;
    private global::BonreePB.BusinessTransaction bt_;
    public bool HasBt {
      get { return hasBt; }
    }
    public global::BonreePB.BusinessTransaction Bt {
      get { return bt_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public const int RequestCountFieldNumber = 2;
    private bool hasRequestCount;
    private uint requestCount_;
    public bool HasRequestCount {
      get { return hasRequestCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestCount {
      get { return requestCount_; }
    }
    
    public const int SumRespTimeFieldNumber = 3;
    private bool hasSumRespTime;
    private ulong sumRespTime_;
    public bool HasSumRespTime {
      get { return hasSumRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SumRespTime {
      get { return sumRespTime_; }
    }
    
    public const int MaxRespTimeFieldNumber = 4;
    private bool hasMaxRespTime;
    private uint maxRespTime_;
    public bool HasMaxRespTime {
      get { return hasMaxRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRespTime {
      get { return maxRespTime_; }
    }
    
    public const int MinRespTimeFieldNumber = 5;
    private bool hasMinRespTime;
    private uint minRespTime_;
    public bool HasMinRespTime {
      get { return hasMinRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinRespTime {
      get { return minRespTime_; }
    }
    
    public const int CurRespTimeFieldNumber = 6;
    private bool hasCurRespTime;
    private uint curRespTime_;
    public bool HasCurRespTime {
      get { return hasCurRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurRespTime {
      get { return curRespTime_; }
    }
    
    public const int SlowCallsFieldNumber = 7;
    private bool hasSlowCalls;
    private uint slowCalls_;
    public bool HasSlowCalls {
      get { return hasSlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlowCalls {
      get { return slowCalls_; }
    }
    
    public const int VerySlowCallsFieldNumber = 8;
    private bool hasVerySlowCalls;
    private uint verySlowCalls_;
    public bool HasVerySlowCalls {
      get { return hasVerySlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint VerySlowCalls {
      get { return verySlowCalls_; }
    }
    
    public const int StallCallsFieldNumber = 9;
    private bool hasStallCalls;
    private uint stallCalls_;
    public bool HasStallCalls {
      get { return hasStallCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint StallCalls {
      get { return stallCalls_; }
    }
    
    public const int ErrorCallsFieldNumber = 10;
    private bool hasErrorCalls;
    private uint errorCalls_;
    public bool HasErrorCalls {
      get { return hasErrorCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCalls {
      get { return errorCalls_; }
    }
    
    public const int ExceptionCountFieldNumber = 11;
    private bool hasExceptionCount;
    private uint exceptionCount_;
    public bool HasExceptionCount {
      get { return hasExceptionCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExceptionCount {
      get { return exceptionCount_; }
    }
    
    public const int HttpErrorCountFieldNumber = 12;
    private bool hasHttpErrorCount;
    private uint httpErrorCount_;
    public bool HasHttpErrorCount {
      get { return hasHttpErrorCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint HttpErrorCount {
      get { return httpErrorCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bTMetricFieldNames;
      if (hasBt) {
        output.WriteMessage(1, field_names[0], Bt);
      }
      if (hasRequestCount) {
        output.WriteUInt32(2, field_names[7], RequestCount);
      }
      if (hasSumRespTime) {
        output.WriteUInt64(3, field_names[10], SumRespTime);
      }
      if (hasMaxRespTime) {
        output.WriteUInt32(4, field_names[5], MaxRespTime);
      }
      if (hasMinRespTime) {
        output.WriteUInt32(5, field_names[6], MinRespTime);
      }
      if (hasCurRespTime) {
        output.WriteUInt32(6, field_names[1], CurRespTime);
      }
      if (hasSlowCalls) {
        output.WriteUInt32(7, field_names[8], SlowCalls);
      }
      if (hasVerySlowCalls) {
        output.WriteUInt32(8, field_names[11], VerySlowCalls);
      }
      if (hasStallCalls) {
        output.WriteUInt32(9, field_names[9], StallCalls);
      }
      if (hasErrorCalls) {
        output.WriteUInt32(10, field_names[2], ErrorCalls);
      }
      if (hasExceptionCount) {
        output.WriteUInt32(11, field_names[3], ExceptionCount);
      }
      if (hasHttpErrorCount) {
        output.WriteUInt32(12, field_names[4], HttpErrorCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBt) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Bt);
      }
      if (hasRequestCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RequestCount);
      }
      if (hasSumRespTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SumRespTime);
      }
      if (hasMaxRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxRespTime);
      }
      if (hasMinRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MinRespTime);
      }
      if (hasCurRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, CurRespTime);
      }
      if (hasSlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SlowCalls);
      }
      if (hasVerySlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, VerySlowCalls);
      }
      if (hasStallCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, StallCalls);
      }
      if (hasErrorCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, ErrorCalls);
      }
      if (hasExceptionCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, ExceptionCount);
      }
      if (hasHttpErrorCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, HttpErrorCount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BTMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BTMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BTMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BTMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BTMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BTMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BTMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BTMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BTMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BTMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BTMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BTMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BTMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BTMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BTMetric result;
      
      private BTMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          BTMetric original = result;
          result = new BTMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BTMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.BTMetric.Descriptor; }
      }
      
      public override BTMetric DefaultInstanceForType {
        get { return global::BonreePB.BTMetric.DefaultInstance; }
      }
      
      public override BTMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BTMetric) {
          return MergeFrom((BTMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BTMetric other) {
        if (other == global::BonreePB.BTMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBt) {
          MergeBt(other.Bt);
        }
        if (other.HasRequestCount) {
          RequestCount = other.RequestCount;
        }
        if (other.HasSumRespTime) {
          SumRespTime = other.SumRespTime;
        }
        if (other.HasMaxRespTime) {
          MaxRespTime = other.MaxRespTime;
        }
        if (other.HasMinRespTime) {
          MinRespTime = other.MinRespTime;
        }
        if (other.HasCurRespTime) {
          CurRespTime = other.CurRespTime;
        }
        if (other.HasSlowCalls) {
          SlowCalls = other.SlowCalls;
        }
        if (other.HasVerySlowCalls) {
          VerySlowCalls = other.VerySlowCalls;
        }
        if (other.HasStallCalls) {
          StallCalls = other.StallCalls;
        }
        if (other.HasErrorCalls) {
          ErrorCalls = other.ErrorCalls;
        }
        if (other.HasExceptionCount) {
          ExceptionCount = other.ExceptionCount;
        }
        if (other.HasHttpErrorCount) {
          HttpErrorCount = other.HttpErrorCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bTMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bTMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasBt) {
                subBuilder.MergeFrom(Bt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bt = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasRequestCount = input.ReadUInt32(ref result.requestCount_);
              break;
            }
            case 24: {
              result.hasSumRespTime = input.ReadUInt64(ref result.sumRespTime_);
              break;
            }
            case 32: {
              result.hasMaxRespTime = input.ReadUInt32(ref result.maxRespTime_);
              break;
            }
            case 40: {
              result.hasMinRespTime = input.ReadUInt32(ref result.minRespTime_);
              break;
            }
            case 48: {
              result.hasCurRespTime = input.ReadUInt32(ref result.curRespTime_);
              break;
            }
            case 56: {
              result.hasSlowCalls = input.ReadUInt32(ref result.slowCalls_);
              break;
            }
            case 64: {
              result.hasVerySlowCalls = input.ReadUInt32(ref result.verySlowCalls_);
              break;
            }
            case 72: {
              result.hasStallCalls = input.ReadUInt32(ref result.stallCalls_);
              break;
            }
            case 80: {
              result.hasErrorCalls = input.ReadUInt32(ref result.errorCalls_);
              break;
            }
            case 88: {
              result.hasExceptionCount = input.ReadUInt32(ref result.exceptionCount_);
              break;
            }
            case 96: {
              result.hasHttpErrorCount = input.ReadUInt32(ref result.httpErrorCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBt {
       get { return result.hasBt; }
      }
      public global::BonreePB.BusinessTransaction Bt {
        get { return result.Bt; }
        set { SetBt(value); }
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = value;
        return this;
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBt &&
            result.bt_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.bt_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.bt_).MergeFrom(value).BuildPartial();
        } else {
          result.bt_ = value;
        }
        result.hasBt = true;
        return this;
      }
      public Builder ClearBt() {
        PrepareBuilder();
        result.hasBt = false;
        result.bt_ = null;
        return this;
      }
      
      public bool HasRequestCount {
        get { return result.hasRequestCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint RequestCount {
        get { return result.RequestCount; }
        set { SetRequestCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRequestCount(uint value) {
        PrepareBuilder();
        result.hasRequestCount = true;
        result.requestCount_ = value;
        return this;
      }
      public Builder ClearRequestCount() {
        PrepareBuilder();
        result.hasRequestCount = false;
        result.requestCount_ = 0;
        return this;
      }
      
      public bool HasSumRespTime {
        get { return result.hasSumRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SumRespTime {
        get { return result.SumRespTime; }
        set { SetSumRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumRespTime(ulong value) {
        PrepareBuilder();
        result.hasSumRespTime = true;
        result.sumRespTime_ = value;
        return this;
      }
      public Builder ClearSumRespTime() {
        PrepareBuilder();
        result.hasSumRespTime = false;
        result.sumRespTime_ = 0UL;
        return this;
      }
      
      public bool HasMaxRespTime {
        get { return result.hasMaxRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRespTime {
        get { return result.MaxRespTime; }
        set { SetMaxRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRespTime(uint value) {
        PrepareBuilder();
        result.hasMaxRespTime = true;
        result.maxRespTime_ = value;
        return this;
      }
      public Builder ClearMaxRespTime() {
        PrepareBuilder();
        result.hasMaxRespTime = false;
        result.maxRespTime_ = 0;
        return this;
      }
      
      public bool HasMinRespTime {
        get { return result.hasMinRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinRespTime {
        get { return result.MinRespTime; }
        set { SetMinRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinRespTime(uint value) {
        PrepareBuilder();
        result.hasMinRespTime = true;
        result.minRespTime_ = value;
        return this;
      }
      public Builder ClearMinRespTime() {
        PrepareBuilder();
        result.hasMinRespTime = false;
        result.minRespTime_ = 0;
        return this;
      }
      
      public bool HasCurRespTime {
        get { return result.hasCurRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurRespTime {
        get { return result.CurRespTime; }
        set { SetCurRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurRespTime(uint value) {
        PrepareBuilder();
        result.hasCurRespTime = true;
        result.curRespTime_ = value;
        return this;
      }
      public Builder ClearCurRespTime() {
        PrepareBuilder();
        result.hasCurRespTime = false;
        result.curRespTime_ = 0;
        return this;
      }
      
      public bool HasSlowCalls {
        get { return result.hasSlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlowCalls {
        get { return result.SlowCalls; }
        set { SetSlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlowCalls(uint value) {
        PrepareBuilder();
        result.hasSlowCalls = true;
        result.slowCalls_ = value;
        return this;
      }
      public Builder ClearSlowCalls() {
        PrepareBuilder();
        result.hasSlowCalls = false;
        result.slowCalls_ = 0;
        return this;
      }
      
      public bool HasVerySlowCalls {
        get { return result.hasVerySlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint VerySlowCalls {
        get { return result.VerySlowCalls; }
        set { SetVerySlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVerySlowCalls(uint value) {
        PrepareBuilder();
        result.hasVerySlowCalls = true;
        result.verySlowCalls_ = value;
        return this;
      }
      public Builder ClearVerySlowCalls() {
        PrepareBuilder();
        result.hasVerySlowCalls = false;
        result.verySlowCalls_ = 0;
        return this;
      }
      
      public bool HasStallCalls {
        get { return result.hasStallCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint StallCalls {
        get { return result.StallCalls; }
        set { SetStallCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStallCalls(uint value) {
        PrepareBuilder();
        result.hasStallCalls = true;
        result.stallCalls_ = value;
        return this;
      }
      public Builder ClearStallCalls() {
        PrepareBuilder();
        result.hasStallCalls = false;
        result.stallCalls_ = 0;
        return this;
      }
      
      public bool HasErrorCalls {
        get { return result.hasErrorCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCalls {
        get { return result.ErrorCalls; }
        set { SetErrorCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCalls(uint value) {
        PrepareBuilder();
        result.hasErrorCalls = true;
        result.errorCalls_ = value;
        return this;
      }
      public Builder ClearErrorCalls() {
        PrepareBuilder();
        result.hasErrorCalls = false;
        result.errorCalls_ = 0;
        return this;
      }
      
      public bool HasExceptionCount {
        get { return result.hasExceptionCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExceptionCount {
        get { return result.ExceptionCount; }
        set { SetExceptionCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExceptionCount(uint value) {
        PrepareBuilder();
        result.hasExceptionCount = true;
        result.exceptionCount_ = value;
        return this;
      }
      public Builder ClearExceptionCount() {
        PrepareBuilder();
        result.hasExceptionCount = false;
        result.exceptionCount_ = 0;
        return this;
      }
      
      public bool HasHttpErrorCount {
        get { return result.hasHttpErrorCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint HttpErrorCount {
        get { return result.HttpErrorCount; }
        set { SetHttpErrorCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHttpErrorCount(uint value) {
        PrepareBuilder();
        result.hasHttpErrorCount = true;
        result.httpErrorCount_ = value;
        return this;
      }
      public Builder ClearHttpErrorCount() {
        PrepareBuilder();
        result.hasHttpErrorCount = false;
        result.httpErrorCount_ = 0;
        return this;
      }
    }
    static BTMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BEBTMetric : pb::GeneratedMessage<BEBTMetric, BEBTMetric.Builder> {
    private BEBTMetric() { }
    private static readonly BEBTMetric defaultInstance = new BEBTMetric().MakeReadOnly();
    private static readonly string[] _bEBTMetricFieldNames = new string[] { "be", "bt", "curRespTime", "errorCalls", "isAsync", "maxRespTime", "minRespTime", "requestCount", "slowCalls", "stallCalls", "sumRespTime", "verySlowCalls" };
    private static readonly uint[] _bEBTMetricFieldTags = new uint[] { 18, 10, 56, 88, 96, 40, 48, 24, 64, 80, 32, 72 };
    public static BEBTMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BEBTMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BEBTMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_BEBTMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BEBTMetric, BEBTMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_BEBTMetric__FieldAccessorTable; }
    }
    
    public const int BtFieldNumber = 1;
    private bool hasBt;
    private global::BonreePB.BusinessTransaction bt_;
    public bool HasBt {
      get { return hasBt; }
    }
    public global::BonreePB.BusinessTransaction Bt {
      get { return bt_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public const int BeFieldNumber = 2;
    private bool hasBe;
    private global::BonreePB.Backend be_;
    public bool HasBe {
      get { return hasBe; }
    }
    public global::BonreePB.Backend Be {
      get { return be_ ?? global::BonreePB.Backend.DefaultInstance; }
    }
    
    public const int RequestCountFieldNumber = 3;
    private bool hasRequestCount;
    private uint requestCount_;
    public bool HasRequestCount {
      get { return hasRequestCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestCount {
      get { return requestCount_; }
    }
    
    public const int SumRespTimeFieldNumber = 4;
    private bool hasSumRespTime;
    private ulong sumRespTime_;
    public bool HasSumRespTime {
      get { return hasSumRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SumRespTime {
      get { return sumRespTime_; }
    }
    
    public const int MaxRespTimeFieldNumber = 5;
    private bool hasMaxRespTime;
    private uint maxRespTime_;
    public bool HasMaxRespTime {
      get { return hasMaxRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRespTime {
      get { return maxRespTime_; }
    }
    
    public const int MinRespTimeFieldNumber = 6;
    private bool hasMinRespTime;
    private uint minRespTime_;
    public bool HasMinRespTime {
      get { return hasMinRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinRespTime {
      get { return minRespTime_; }
    }
    
    public const int CurRespTimeFieldNumber = 7;
    private bool hasCurRespTime;
    private uint curRespTime_;
    public bool HasCurRespTime {
      get { return hasCurRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurRespTime {
      get { return curRespTime_; }
    }
    
    public const int SlowCallsFieldNumber = 8;
    private bool hasSlowCalls;
    private uint slowCalls_;
    public bool HasSlowCalls {
      get { return hasSlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlowCalls {
      get { return slowCalls_; }
    }
    
    public const int VerySlowCallsFieldNumber = 9;
    private bool hasVerySlowCalls;
    private uint verySlowCalls_;
    public bool HasVerySlowCalls {
      get { return hasVerySlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint VerySlowCalls {
      get { return verySlowCalls_; }
    }
    
    public const int StallCallsFieldNumber = 10;
    private bool hasStallCalls;
    private uint stallCalls_;
    public bool HasStallCalls {
      get { return hasStallCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint StallCalls {
      get { return stallCalls_; }
    }
    
    public const int ErrorCallsFieldNumber = 11;
    private bool hasErrorCalls;
    private uint errorCalls_;
    public bool HasErrorCalls {
      get { return hasErrorCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCalls {
      get { return errorCalls_; }
    }
    
    public const int IsAsyncFieldNumber = 12;
    private bool hasIsAsync;
    private bool isAsync_;
    public bool HasIsAsync {
      get { return hasIsAsync; }
    }
    public bool IsAsync {
      get { return isAsync_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bEBTMetricFieldNames;
      if (hasBt) {
        output.WriteMessage(1, field_names[1], Bt);
      }
      if (hasBe) {
        output.WriteMessage(2, field_names[0], Be);
      }
      if (hasRequestCount) {
        output.WriteUInt32(3, field_names[7], RequestCount);
      }
      if (hasSumRespTime) {
        output.WriteUInt64(4, field_names[10], SumRespTime);
      }
      if (hasMaxRespTime) {
        output.WriteUInt32(5, field_names[5], MaxRespTime);
      }
      if (hasMinRespTime) {
        output.WriteUInt32(6, field_names[6], MinRespTime);
      }
      if (hasCurRespTime) {
        output.WriteUInt32(7, field_names[2], CurRespTime);
      }
      if (hasSlowCalls) {
        output.WriteUInt32(8, field_names[8], SlowCalls);
      }
      if (hasVerySlowCalls) {
        output.WriteUInt32(9, field_names[11], VerySlowCalls);
      }
      if (hasStallCalls) {
        output.WriteUInt32(10, field_names[9], StallCalls);
      }
      if (hasErrorCalls) {
        output.WriteUInt32(11, field_names[3], ErrorCalls);
      }
      if (hasIsAsync) {
        output.WriteBool(12, field_names[4], IsAsync);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBt) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Bt);
      }
      if (hasBe) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Be);
      }
      if (hasRequestCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, RequestCount);
      }
      if (hasSumRespTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, SumRespTime);
      }
      if (hasMaxRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MaxRespTime);
      }
      if (hasMinRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, MinRespTime);
      }
      if (hasCurRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, CurRespTime);
      }
      if (hasSlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, SlowCalls);
      }
      if (hasVerySlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, VerySlowCalls);
      }
      if (hasStallCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, StallCalls);
      }
      if (hasErrorCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, ErrorCalls);
      }
      if (hasIsAsync) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, IsAsync);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BEBTMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BEBTMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BEBTMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BEBTMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BEBTMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BEBTMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BEBTMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BEBTMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BEBTMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BEBTMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BEBTMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BEBTMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BEBTMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BEBTMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BEBTMetric result;
      
      private BEBTMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          BEBTMetric original = result;
          result = new BEBTMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BEBTMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.BEBTMetric.Descriptor; }
      }
      
      public override BEBTMetric DefaultInstanceForType {
        get { return global::BonreePB.BEBTMetric.DefaultInstance; }
      }
      
      public override BEBTMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BEBTMetric) {
          return MergeFrom((BEBTMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BEBTMetric other) {
        if (other == global::BonreePB.BEBTMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBt) {
          MergeBt(other.Bt);
        }
        if (other.HasBe) {
          MergeBe(other.Be);
        }
        if (other.HasRequestCount) {
          RequestCount = other.RequestCount;
        }
        if (other.HasSumRespTime) {
          SumRespTime = other.SumRespTime;
        }
        if (other.HasMaxRespTime) {
          MaxRespTime = other.MaxRespTime;
        }
        if (other.HasMinRespTime) {
          MinRespTime = other.MinRespTime;
        }
        if (other.HasCurRespTime) {
          CurRespTime = other.CurRespTime;
        }
        if (other.HasSlowCalls) {
          SlowCalls = other.SlowCalls;
        }
        if (other.HasVerySlowCalls) {
          VerySlowCalls = other.VerySlowCalls;
        }
        if (other.HasStallCalls) {
          StallCalls = other.StallCalls;
        }
        if (other.HasErrorCalls) {
          ErrorCalls = other.ErrorCalls;
        }
        if (other.HasIsAsync) {
          IsAsync = other.IsAsync;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bEBTMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bEBTMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasBt) {
                subBuilder.MergeFrom(Bt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bt = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::BonreePB.Backend.Builder subBuilder = global::BonreePB.Backend.CreateBuilder();
              if (result.hasBe) {
                subBuilder.MergeFrom(Be);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Be = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasRequestCount = input.ReadUInt32(ref result.requestCount_);
              break;
            }
            case 32: {
              result.hasSumRespTime = input.ReadUInt64(ref result.sumRespTime_);
              break;
            }
            case 40: {
              result.hasMaxRespTime = input.ReadUInt32(ref result.maxRespTime_);
              break;
            }
            case 48: {
              result.hasMinRespTime = input.ReadUInt32(ref result.minRespTime_);
              break;
            }
            case 56: {
              result.hasCurRespTime = input.ReadUInt32(ref result.curRespTime_);
              break;
            }
            case 64: {
              result.hasSlowCalls = input.ReadUInt32(ref result.slowCalls_);
              break;
            }
            case 72: {
              result.hasVerySlowCalls = input.ReadUInt32(ref result.verySlowCalls_);
              break;
            }
            case 80: {
              result.hasStallCalls = input.ReadUInt32(ref result.stallCalls_);
              break;
            }
            case 88: {
              result.hasErrorCalls = input.ReadUInt32(ref result.errorCalls_);
              break;
            }
            case 96: {
              result.hasIsAsync = input.ReadBool(ref result.isAsync_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBt {
       get { return result.hasBt; }
      }
      public global::BonreePB.BusinessTransaction Bt {
        get { return result.Bt; }
        set { SetBt(value); }
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = value;
        return this;
      }
      public Builder SetBt(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBt = true;
        result.bt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBt(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBt &&
            result.bt_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.bt_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.bt_).MergeFrom(value).BuildPartial();
        } else {
          result.bt_ = value;
        }
        result.hasBt = true;
        return this;
      }
      public Builder ClearBt() {
        PrepareBuilder();
        result.hasBt = false;
        result.bt_ = null;
        return this;
      }
      
      public bool HasBe {
       get { return result.hasBe; }
      }
      public global::BonreePB.Backend Be {
        get { return result.Be; }
        set { SetBe(value); }
      }
      public Builder SetBe(global::BonreePB.Backend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBe = true;
        result.be_ = value;
        return this;
      }
      public Builder SetBe(global::BonreePB.Backend.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBe = true;
        result.be_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBe(global::BonreePB.Backend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBe &&
            result.be_ != global::BonreePB.Backend.DefaultInstance) {
            result.be_ = global::BonreePB.Backend.CreateBuilder(result.be_).MergeFrom(value).BuildPartial();
        } else {
          result.be_ = value;
        }
        result.hasBe = true;
        return this;
      }
      public Builder ClearBe() {
        PrepareBuilder();
        result.hasBe = false;
        result.be_ = null;
        return this;
      }
      
      public bool HasRequestCount {
        get { return result.hasRequestCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint RequestCount {
        get { return result.RequestCount; }
        set { SetRequestCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRequestCount(uint value) {
        PrepareBuilder();
        result.hasRequestCount = true;
        result.requestCount_ = value;
        return this;
      }
      public Builder ClearRequestCount() {
        PrepareBuilder();
        result.hasRequestCount = false;
        result.requestCount_ = 0;
        return this;
      }
      
      public bool HasSumRespTime {
        get { return result.hasSumRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SumRespTime {
        get { return result.SumRespTime; }
        set { SetSumRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumRespTime(ulong value) {
        PrepareBuilder();
        result.hasSumRespTime = true;
        result.sumRespTime_ = value;
        return this;
      }
      public Builder ClearSumRespTime() {
        PrepareBuilder();
        result.hasSumRespTime = false;
        result.sumRespTime_ = 0UL;
        return this;
      }
      
      public bool HasMaxRespTime {
        get { return result.hasMaxRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRespTime {
        get { return result.MaxRespTime; }
        set { SetMaxRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRespTime(uint value) {
        PrepareBuilder();
        result.hasMaxRespTime = true;
        result.maxRespTime_ = value;
        return this;
      }
      public Builder ClearMaxRespTime() {
        PrepareBuilder();
        result.hasMaxRespTime = false;
        result.maxRespTime_ = 0;
        return this;
      }
      
      public bool HasMinRespTime {
        get { return result.hasMinRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinRespTime {
        get { return result.MinRespTime; }
        set { SetMinRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinRespTime(uint value) {
        PrepareBuilder();
        result.hasMinRespTime = true;
        result.minRespTime_ = value;
        return this;
      }
      public Builder ClearMinRespTime() {
        PrepareBuilder();
        result.hasMinRespTime = false;
        result.minRespTime_ = 0;
        return this;
      }
      
      public bool HasCurRespTime {
        get { return result.hasCurRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurRespTime {
        get { return result.CurRespTime; }
        set { SetCurRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurRespTime(uint value) {
        PrepareBuilder();
        result.hasCurRespTime = true;
        result.curRespTime_ = value;
        return this;
      }
      public Builder ClearCurRespTime() {
        PrepareBuilder();
        result.hasCurRespTime = false;
        result.curRespTime_ = 0;
        return this;
      }
      
      public bool HasSlowCalls {
        get { return result.hasSlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlowCalls {
        get { return result.SlowCalls; }
        set { SetSlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlowCalls(uint value) {
        PrepareBuilder();
        result.hasSlowCalls = true;
        result.slowCalls_ = value;
        return this;
      }
      public Builder ClearSlowCalls() {
        PrepareBuilder();
        result.hasSlowCalls = false;
        result.slowCalls_ = 0;
        return this;
      }
      
      public bool HasVerySlowCalls {
        get { return result.hasVerySlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint VerySlowCalls {
        get { return result.VerySlowCalls; }
        set { SetVerySlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVerySlowCalls(uint value) {
        PrepareBuilder();
        result.hasVerySlowCalls = true;
        result.verySlowCalls_ = value;
        return this;
      }
      public Builder ClearVerySlowCalls() {
        PrepareBuilder();
        result.hasVerySlowCalls = false;
        result.verySlowCalls_ = 0;
        return this;
      }
      
      public bool HasStallCalls {
        get { return result.hasStallCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint StallCalls {
        get { return result.StallCalls; }
        set { SetStallCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStallCalls(uint value) {
        PrepareBuilder();
        result.hasStallCalls = true;
        result.stallCalls_ = value;
        return this;
      }
      public Builder ClearStallCalls() {
        PrepareBuilder();
        result.hasStallCalls = false;
        result.stallCalls_ = 0;
        return this;
      }
      
      public bool HasErrorCalls {
        get { return result.hasErrorCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCalls {
        get { return result.ErrorCalls; }
        set { SetErrorCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCalls(uint value) {
        PrepareBuilder();
        result.hasErrorCalls = true;
        result.errorCalls_ = value;
        return this;
      }
      public Builder ClearErrorCalls() {
        PrepareBuilder();
        result.hasErrorCalls = false;
        result.errorCalls_ = 0;
        return this;
      }
      
      public bool HasIsAsync {
        get { return result.hasIsAsync; }
      }
      public bool IsAsync {
        get { return result.IsAsync; }
        set { SetIsAsync(value); }
      }
      public Builder SetIsAsync(bool value) {
        PrepareBuilder();
        result.hasIsAsync = true;
        result.isAsync_ = value;
        return this;
      }
      public Builder ClearIsAsync() {
        PrepareBuilder();
        result.hasIsAsync = false;
        result.isAsync_ = false;
        return this;
      }
    }
    static BEBTMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BEMetric : pb::GeneratedMessage<BEMetric, BEMetric.Builder> {
    private BEMetric() { }
    private static readonly BEMetric defaultInstance = new BEMetric().MakeReadOnly();
    private static readonly string[] _bEMetricFieldNames = new string[] { "be", "curRespTime", "errorCalls", "isAsync", "maxRespTime", "minRespTime", "requestCount", "slowCalls", "stallCalls", "sumRespTime", "verySlowCalls" };
    private static readonly uint[] _bEMetricFieldTags = new uint[] { 10, 48, 80, 88, 32, 40, 16, 56, 72, 24, 64 };
    public static BEMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BEMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BEMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_BEMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BEMetric, BEMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_BEMetric__FieldAccessorTable; }
    }
    
    public const int BeFieldNumber = 1;
    private bool hasBe;
    private global::BonreePB.Backend be_;
    public bool HasBe {
      get { return hasBe; }
    }
    public global::BonreePB.Backend Be {
      get { return be_ ?? global::BonreePB.Backend.DefaultInstance; }
    }
    
    public const int RequestCountFieldNumber = 2;
    private bool hasRequestCount;
    private uint requestCount_;
    public bool HasRequestCount {
      get { return hasRequestCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestCount {
      get { return requestCount_; }
    }
    
    public const int SumRespTimeFieldNumber = 3;
    private bool hasSumRespTime;
    private ulong sumRespTime_;
    public bool HasSumRespTime {
      get { return hasSumRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SumRespTime {
      get { return sumRespTime_; }
    }
    
    public const int MaxRespTimeFieldNumber = 4;
    private bool hasMaxRespTime;
    private uint maxRespTime_;
    public bool HasMaxRespTime {
      get { return hasMaxRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRespTime {
      get { return maxRespTime_; }
    }
    
    public const int MinRespTimeFieldNumber = 5;
    private bool hasMinRespTime;
    private uint minRespTime_;
    public bool HasMinRespTime {
      get { return hasMinRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinRespTime {
      get { return minRespTime_; }
    }
    
    public const int CurRespTimeFieldNumber = 6;
    private bool hasCurRespTime;
    private uint curRespTime_;
    public bool HasCurRespTime {
      get { return hasCurRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurRespTime {
      get { return curRespTime_; }
    }
    
    public const int SlowCallsFieldNumber = 7;
    private bool hasSlowCalls;
    private uint slowCalls_;
    public bool HasSlowCalls {
      get { return hasSlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlowCalls {
      get { return slowCalls_; }
    }
    
    public const int VerySlowCallsFieldNumber = 8;
    private bool hasVerySlowCalls;
    private uint verySlowCalls_;
    public bool HasVerySlowCalls {
      get { return hasVerySlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint VerySlowCalls {
      get { return verySlowCalls_; }
    }
    
    public const int StallCallsFieldNumber = 9;
    private bool hasStallCalls;
    private uint stallCalls_;
    public bool HasStallCalls {
      get { return hasStallCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint StallCalls {
      get { return stallCalls_; }
    }
    
    public const int ErrorCallsFieldNumber = 10;
    private bool hasErrorCalls;
    private uint errorCalls_;
    public bool HasErrorCalls {
      get { return hasErrorCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCalls {
      get { return errorCalls_; }
    }
    
    public const int IsAsyncFieldNumber = 11;
    private bool hasIsAsync;
    private bool isAsync_;
    public bool HasIsAsync {
      get { return hasIsAsync; }
    }
    public bool IsAsync {
      get { return isAsync_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bEMetricFieldNames;
      if (hasBe) {
        output.WriteMessage(1, field_names[0], Be);
      }
      if (hasRequestCount) {
        output.WriteUInt32(2, field_names[6], RequestCount);
      }
      if (hasSumRespTime) {
        output.WriteUInt64(3, field_names[9], SumRespTime);
      }
      if (hasMaxRespTime) {
        output.WriteUInt32(4, field_names[4], MaxRespTime);
      }
      if (hasMinRespTime) {
        output.WriteUInt32(5, field_names[5], MinRespTime);
      }
      if (hasCurRespTime) {
        output.WriteUInt32(6, field_names[1], CurRespTime);
      }
      if (hasSlowCalls) {
        output.WriteUInt32(7, field_names[7], SlowCalls);
      }
      if (hasVerySlowCalls) {
        output.WriteUInt32(8, field_names[10], VerySlowCalls);
      }
      if (hasStallCalls) {
        output.WriteUInt32(9, field_names[8], StallCalls);
      }
      if (hasErrorCalls) {
        output.WriteUInt32(10, field_names[2], ErrorCalls);
      }
      if (hasIsAsync) {
        output.WriteBool(11, field_names[3], IsAsync);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBe) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Be);
      }
      if (hasRequestCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RequestCount);
      }
      if (hasSumRespTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, SumRespTime);
      }
      if (hasMaxRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxRespTime);
      }
      if (hasMinRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MinRespTime);
      }
      if (hasCurRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, CurRespTime);
      }
      if (hasSlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SlowCalls);
      }
      if (hasVerySlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, VerySlowCalls);
      }
      if (hasStallCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, StallCalls);
      }
      if (hasErrorCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, ErrorCalls);
      }
      if (hasIsAsync) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, IsAsync);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BEMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BEMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BEMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BEMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BEMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BEMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BEMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BEMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BEMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BEMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BEMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BEMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BEMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BEMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BEMetric result;
      
      private BEMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          BEMetric original = result;
          result = new BEMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BEMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.BEMetric.Descriptor; }
      }
      
      public override BEMetric DefaultInstanceForType {
        get { return global::BonreePB.BEMetric.DefaultInstance; }
      }
      
      public override BEMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BEMetric) {
          return MergeFrom((BEMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BEMetric other) {
        if (other == global::BonreePB.BEMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBe) {
          MergeBe(other.Be);
        }
        if (other.HasRequestCount) {
          RequestCount = other.RequestCount;
        }
        if (other.HasSumRespTime) {
          SumRespTime = other.SumRespTime;
        }
        if (other.HasMaxRespTime) {
          MaxRespTime = other.MaxRespTime;
        }
        if (other.HasMinRespTime) {
          MinRespTime = other.MinRespTime;
        }
        if (other.HasCurRespTime) {
          CurRespTime = other.CurRespTime;
        }
        if (other.HasSlowCalls) {
          SlowCalls = other.SlowCalls;
        }
        if (other.HasVerySlowCalls) {
          VerySlowCalls = other.VerySlowCalls;
        }
        if (other.HasStallCalls) {
          StallCalls = other.StallCalls;
        }
        if (other.HasErrorCalls) {
          ErrorCalls = other.ErrorCalls;
        }
        if (other.HasIsAsync) {
          IsAsync = other.IsAsync;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bEMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bEMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.Backend.Builder subBuilder = global::BonreePB.Backend.CreateBuilder();
              if (result.hasBe) {
                subBuilder.MergeFrom(Be);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Be = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasRequestCount = input.ReadUInt32(ref result.requestCount_);
              break;
            }
            case 24: {
              result.hasSumRespTime = input.ReadUInt64(ref result.sumRespTime_);
              break;
            }
            case 32: {
              result.hasMaxRespTime = input.ReadUInt32(ref result.maxRespTime_);
              break;
            }
            case 40: {
              result.hasMinRespTime = input.ReadUInt32(ref result.minRespTime_);
              break;
            }
            case 48: {
              result.hasCurRespTime = input.ReadUInt32(ref result.curRespTime_);
              break;
            }
            case 56: {
              result.hasSlowCalls = input.ReadUInt32(ref result.slowCalls_);
              break;
            }
            case 64: {
              result.hasVerySlowCalls = input.ReadUInt32(ref result.verySlowCalls_);
              break;
            }
            case 72: {
              result.hasStallCalls = input.ReadUInt32(ref result.stallCalls_);
              break;
            }
            case 80: {
              result.hasErrorCalls = input.ReadUInt32(ref result.errorCalls_);
              break;
            }
            case 88: {
              result.hasIsAsync = input.ReadBool(ref result.isAsync_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBe {
       get { return result.hasBe; }
      }
      public global::BonreePB.Backend Be {
        get { return result.Be; }
        set { SetBe(value); }
      }
      public Builder SetBe(global::BonreePB.Backend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBe = true;
        result.be_ = value;
        return this;
      }
      public Builder SetBe(global::BonreePB.Backend.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBe = true;
        result.be_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBe(global::BonreePB.Backend value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBe &&
            result.be_ != global::BonreePB.Backend.DefaultInstance) {
            result.be_ = global::BonreePB.Backend.CreateBuilder(result.be_).MergeFrom(value).BuildPartial();
        } else {
          result.be_ = value;
        }
        result.hasBe = true;
        return this;
      }
      public Builder ClearBe() {
        PrepareBuilder();
        result.hasBe = false;
        result.be_ = null;
        return this;
      }
      
      public bool HasRequestCount {
        get { return result.hasRequestCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint RequestCount {
        get { return result.RequestCount; }
        set { SetRequestCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRequestCount(uint value) {
        PrepareBuilder();
        result.hasRequestCount = true;
        result.requestCount_ = value;
        return this;
      }
      public Builder ClearRequestCount() {
        PrepareBuilder();
        result.hasRequestCount = false;
        result.requestCount_ = 0;
        return this;
      }
      
      public bool HasSumRespTime {
        get { return result.hasSumRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SumRespTime {
        get { return result.SumRespTime; }
        set { SetSumRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumRespTime(ulong value) {
        PrepareBuilder();
        result.hasSumRespTime = true;
        result.sumRespTime_ = value;
        return this;
      }
      public Builder ClearSumRespTime() {
        PrepareBuilder();
        result.hasSumRespTime = false;
        result.sumRespTime_ = 0UL;
        return this;
      }
      
      public bool HasMaxRespTime {
        get { return result.hasMaxRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRespTime {
        get { return result.MaxRespTime; }
        set { SetMaxRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRespTime(uint value) {
        PrepareBuilder();
        result.hasMaxRespTime = true;
        result.maxRespTime_ = value;
        return this;
      }
      public Builder ClearMaxRespTime() {
        PrepareBuilder();
        result.hasMaxRespTime = false;
        result.maxRespTime_ = 0;
        return this;
      }
      
      public bool HasMinRespTime {
        get { return result.hasMinRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinRespTime {
        get { return result.MinRespTime; }
        set { SetMinRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinRespTime(uint value) {
        PrepareBuilder();
        result.hasMinRespTime = true;
        result.minRespTime_ = value;
        return this;
      }
      public Builder ClearMinRespTime() {
        PrepareBuilder();
        result.hasMinRespTime = false;
        result.minRespTime_ = 0;
        return this;
      }
      
      public bool HasCurRespTime {
        get { return result.hasCurRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurRespTime {
        get { return result.CurRespTime; }
        set { SetCurRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurRespTime(uint value) {
        PrepareBuilder();
        result.hasCurRespTime = true;
        result.curRespTime_ = value;
        return this;
      }
      public Builder ClearCurRespTime() {
        PrepareBuilder();
        result.hasCurRespTime = false;
        result.curRespTime_ = 0;
        return this;
      }
      
      public bool HasSlowCalls {
        get { return result.hasSlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlowCalls {
        get { return result.SlowCalls; }
        set { SetSlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlowCalls(uint value) {
        PrepareBuilder();
        result.hasSlowCalls = true;
        result.slowCalls_ = value;
        return this;
      }
      public Builder ClearSlowCalls() {
        PrepareBuilder();
        result.hasSlowCalls = false;
        result.slowCalls_ = 0;
        return this;
      }
      
      public bool HasVerySlowCalls {
        get { return result.hasVerySlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint VerySlowCalls {
        get { return result.VerySlowCalls; }
        set { SetVerySlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVerySlowCalls(uint value) {
        PrepareBuilder();
        result.hasVerySlowCalls = true;
        result.verySlowCalls_ = value;
        return this;
      }
      public Builder ClearVerySlowCalls() {
        PrepareBuilder();
        result.hasVerySlowCalls = false;
        result.verySlowCalls_ = 0;
        return this;
      }
      
      public bool HasStallCalls {
        get { return result.hasStallCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint StallCalls {
        get { return result.StallCalls; }
        set { SetStallCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStallCalls(uint value) {
        PrepareBuilder();
        result.hasStallCalls = true;
        result.stallCalls_ = value;
        return this;
      }
      public Builder ClearStallCalls() {
        PrepareBuilder();
        result.hasStallCalls = false;
        result.stallCalls_ = 0;
        return this;
      }
      
      public bool HasErrorCalls {
        get { return result.hasErrorCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCalls {
        get { return result.ErrorCalls; }
        set { SetErrorCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCalls(uint value) {
        PrepareBuilder();
        result.hasErrorCalls = true;
        result.errorCalls_ = value;
        return this;
      }
      public Builder ClearErrorCalls() {
        PrepareBuilder();
        result.hasErrorCalls = false;
        result.errorCalls_ = 0;
        return this;
      }
      
      public bool HasIsAsync {
        get { return result.hasIsAsync; }
      }
      public bool IsAsync {
        get { return result.IsAsync; }
        set { SetIsAsync(value); }
      }
      public Builder SetIsAsync(bool value) {
        PrepareBuilder();
        result.hasIsAsync = true;
        result.isAsync_ = value;
        return this;
      }
      public Builder ClearIsAsync() {
        PrepareBuilder();
        result.hasIsAsync = false;
        result.isAsync_ = false;
        return this;
      }
    }
    static BEMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataSourceMetric : pb::GeneratedMessage<DataSourceMetric, DataSourceMetric.Builder> {
    private DataSourceMetric() { }
    private static readonly DataSourceMetric defaultInstance = new DataSourceMetric().MakeReadOnly();
    private static readonly string[] _dataSourceMetricFieldNames = new string[] { "curConnCount", "curPoolSize", "curWaitConnCount", "ds", "faildReconnCount", "leakConnCount", "maxPoolSize" };
    private static readonly uint[] _dataSourceMetricFieldTags = new uint[] { 32, 24, 40, 10, 56, 48, 16 };
    public static DataSourceMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataSourceMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataSourceMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_DataSourceMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataSourceMetric, DataSourceMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_DataSourceMetric__FieldAccessorTable; }
    }
    
    public const int DsFieldNumber = 1;
    private bool hasDs;
    private global::BonreePB.DataSource ds_;
    public bool HasDs {
      get { return hasDs; }
    }
    public global::BonreePB.DataSource Ds {
      get { return ds_ ?? global::BonreePB.DataSource.DefaultInstance; }
    }
    
    public const int MaxPoolSizeFieldNumber = 2;
    private bool hasMaxPoolSize;
    private uint maxPoolSize_;
    public bool HasMaxPoolSize {
      get { return hasMaxPoolSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxPoolSize {
      get { return maxPoolSize_; }
    }
    
    public const int CurPoolSizeFieldNumber = 3;
    private bool hasCurPoolSize;
    private uint curPoolSize_;
    public bool HasCurPoolSize {
      get { return hasCurPoolSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurPoolSize {
      get { return curPoolSize_; }
    }
    
    public const int CurConnCountFieldNumber = 4;
    private bool hasCurConnCount;
    private uint curConnCount_;
    public bool HasCurConnCount {
      get { return hasCurConnCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurConnCount {
      get { return curConnCount_; }
    }
    
    public const int CurWaitConnCountFieldNumber = 5;
    private bool hasCurWaitConnCount;
    private uint curWaitConnCount_;
    public bool HasCurWaitConnCount {
      get { return hasCurWaitConnCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurWaitConnCount {
      get { return curWaitConnCount_; }
    }
    
    public const int LeakConnCountFieldNumber = 6;
    private bool hasLeakConnCount;
    private uint leakConnCount_;
    public bool HasLeakConnCount {
      get { return hasLeakConnCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint LeakConnCount {
      get { return leakConnCount_; }
    }
    
    public const int FaildReconnCountFieldNumber = 7;
    private bool hasFaildReconnCount;
    private uint faildReconnCount_;
    public bool HasFaildReconnCount {
      get { return hasFaildReconnCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint FaildReconnCount {
      get { return faildReconnCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _dataSourceMetricFieldNames;
      if (hasDs) {
        output.WriteMessage(1, field_names[3], Ds);
      }
      if (hasMaxPoolSize) {
        output.WriteUInt32(2, field_names[6], MaxPoolSize);
      }
      if (hasCurPoolSize) {
        output.WriteUInt32(3, field_names[1], CurPoolSize);
      }
      if (hasCurConnCount) {
        output.WriteUInt32(4, field_names[0], CurConnCount);
      }
      if (hasCurWaitConnCount) {
        output.WriteUInt32(5, field_names[2], CurWaitConnCount);
      }
      if (hasLeakConnCount) {
        output.WriteUInt32(6, field_names[5], LeakConnCount);
      }
      if (hasFaildReconnCount) {
        output.WriteUInt32(7, field_names[4], FaildReconnCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDs) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Ds);
      }
      if (hasMaxPoolSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MaxPoolSize);
      }
      if (hasCurPoolSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, CurPoolSize);
      }
      if (hasCurConnCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, CurConnCount);
      }
      if (hasCurWaitConnCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CurWaitConnCount);
      }
      if (hasLeakConnCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, LeakConnCount);
      }
      if (hasFaildReconnCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, FaildReconnCount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static DataSourceMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataSourceMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataSourceMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataSourceMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataSourceMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataSourceMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataSourceMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataSourceMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataSourceMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataSourceMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataSourceMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataSourceMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataSourceMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataSourceMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataSourceMetric result;
      
      private DataSourceMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          DataSourceMetric original = result;
          result = new DataSourceMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataSourceMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.DataSourceMetric.Descriptor; }
      }
      
      public override DataSourceMetric DefaultInstanceForType {
        get { return global::BonreePB.DataSourceMetric.DefaultInstance; }
      }
      
      public override DataSourceMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataSourceMetric) {
          return MergeFrom((DataSourceMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataSourceMetric other) {
        if (other == global::BonreePB.DataSourceMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDs) {
          MergeDs(other.Ds);
        }
        if (other.HasMaxPoolSize) {
          MaxPoolSize = other.MaxPoolSize;
        }
        if (other.HasCurPoolSize) {
          CurPoolSize = other.CurPoolSize;
        }
        if (other.HasCurConnCount) {
          CurConnCount = other.CurConnCount;
        }
        if (other.HasCurWaitConnCount) {
          CurWaitConnCount = other.CurWaitConnCount;
        }
        if (other.HasLeakConnCount) {
          LeakConnCount = other.LeakConnCount;
        }
        if (other.HasFaildReconnCount) {
          FaildReconnCount = other.FaildReconnCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataSourceMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataSourceMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.DataSource.Builder subBuilder = global::BonreePB.DataSource.CreateBuilder();
              if (result.hasDs) {
                subBuilder.MergeFrom(Ds);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Ds = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMaxPoolSize = input.ReadUInt32(ref result.maxPoolSize_);
              break;
            }
            case 24: {
              result.hasCurPoolSize = input.ReadUInt32(ref result.curPoolSize_);
              break;
            }
            case 32: {
              result.hasCurConnCount = input.ReadUInt32(ref result.curConnCount_);
              break;
            }
            case 40: {
              result.hasCurWaitConnCount = input.ReadUInt32(ref result.curWaitConnCount_);
              break;
            }
            case 48: {
              result.hasLeakConnCount = input.ReadUInt32(ref result.leakConnCount_);
              break;
            }
            case 56: {
              result.hasFaildReconnCount = input.ReadUInt32(ref result.faildReconnCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDs {
       get { return result.hasDs; }
      }
      public global::BonreePB.DataSource Ds {
        get { return result.Ds; }
        set { SetDs(value); }
      }
      public Builder SetDs(global::BonreePB.DataSource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDs = true;
        result.ds_ = value;
        return this;
      }
      public Builder SetDs(global::BonreePB.DataSource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDs = true;
        result.ds_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDs(global::BonreePB.DataSource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDs &&
            result.ds_ != global::BonreePB.DataSource.DefaultInstance) {
            result.ds_ = global::BonreePB.DataSource.CreateBuilder(result.ds_).MergeFrom(value).BuildPartial();
        } else {
          result.ds_ = value;
        }
        result.hasDs = true;
        return this;
      }
      public Builder ClearDs() {
        PrepareBuilder();
        result.hasDs = false;
        result.ds_ = null;
        return this;
      }
      
      public bool HasMaxPoolSize {
        get { return result.hasMaxPoolSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxPoolSize {
        get { return result.MaxPoolSize; }
        set { SetMaxPoolSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxPoolSize(uint value) {
        PrepareBuilder();
        result.hasMaxPoolSize = true;
        result.maxPoolSize_ = value;
        return this;
      }
      public Builder ClearMaxPoolSize() {
        PrepareBuilder();
        result.hasMaxPoolSize = false;
        result.maxPoolSize_ = 0;
        return this;
      }
      
      public bool HasCurPoolSize {
        get { return result.hasCurPoolSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurPoolSize {
        get { return result.CurPoolSize; }
        set { SetCurPoolSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurPoolSize(uint value) {
        PrepareBuilder();
        result.hasCurPoolSize = true;
        result.curPoolSize_ = value;
        return this;
      }
      public Builder ClearCurPoolSize() {
        PrepareBuilder();
        result.hasCurPoolSize = false;
        result.curPoolSize_ = 0;
        return this;
      }
      
      public bool HasCurConnCount {
        get { return result.hasCurConnCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurConnCount {
        get { return result.CurConnCount; }
        set { SetCurConnCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurConnCount(uint value) {
        PrepareBuilder();
        result.hasCurConnCount = true;
        result.curConnCount_ = value;
        return this;
      }
      public Builder ClearCurConnCount() {
        PrepareBuilder();
        result.hasCurConnCount = false;
        result.curConnCount_ = 0;
        return this;
      }
      
      public bool HasCurWaitConnCount {
        get { return result.hasCurWaitConnCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurWaitConnCount {
        get { return result.CurWaitConnCount; }
        set { SetCurWaitConnCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurWaitConnCount(uint value) {
        PrepareBuilder();
        result.hasCurWaitConnCount = true;
        result.curWaitConnCount_ = value;
        return this;
      }
      public Builder ClearCurWaitConnCount() {
        PrepareBuilder();
        result.hasCurWaitConnCount = false;
        result.curWaitConnCount_ = 0;
        return this;
      }
      
      public bool HasLeakConnCount {
        get { return result.hasLeakConnCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint LeakConnCount {
        get { return result.LeakConnCount; }
        set { SetLeakConnCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLeakConnCount(uint value) {
        PrepareBuilder();
        result.hasLeakConnCount = true;
        result.leakConnCount_ = value;
        return this;
      }
      public Builder ClearLeakConnCount() {
        PrepareBuilder();
        result.hasLeakConnCount = false;
        result.leakConnCount_ = 0;
        return this;
      }
      
      public bool HasFaildReconnCount {
        get { return result.hasFaildReconnCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint FaildReconnCount {
        get { return result.FaildReconnCount; }
        set { SetFaildReconnCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFaildReconnCount(uint value) {
        PrepareBuilder();
        result.hasFaildReconnCount = true;
        result.faildReconnCount_ = value;
        return this;
      }
      public Builder ClearFaildReconnCount() {
        PrepareBuilder();
        result.hasFaildReconnCount = false;
        result.faildReconnCount_ = 0;
        return this;
      }
    }
    static DataSourceMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CrossBTMetric : pb::GeneratedMessage<CrossBTMetric, CrossBTMetric.Builder> {
    private CrossBTMetric() { }
    private static readonly CrossBTMetric defaultInstance = new CrossBTMetric().MakeReadOnly();
    private static readonly string[] _crossBTMetricFieldNames = new string[] { "FromAgentGUID", "FromAgentID", "ToAgentGUID", "ToAgentID", "backendType", "curRespTime", "errorCalls", "exceptionCount", "fromBT", "httpErrorCount", "isAsync", "maxRespTime", "minRespTime", "requestCount", "slowCalls", "stallCalls", "sumRespTime", "toBT", "verySlowCalls" };
    private static readonly uint[] _crossBTMetricFieldTags = new uint[] { 18, 24, 42, 48, 152, 96, 128, 136, 34, 144, 8, 80, 88, 64, 104, 120, 72, 58, 112 };
    public static CrossBTMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CrossBTMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CrossBTMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_CrossBTMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CrossBTMetric, CrossBTMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_CrossBTMetric__FieldAccessorTable; }
    }
    
    public const int IsAsyncFieldNumber = 1;
    private bool hasIsAsync;
    private bool isAsync_;
    public bool HasIsAsync {
      get { return hasIsAsync; }
    }
    public bool IsAsync {
      get { return isAsync_; }
    }
    
    public const int FromAgentGUIDFieldNumber = 2;
    private bool hasFromAgentGUID;
    private string fromAgentGUID_ = "";
    public bool HasFromAgentGUID {
      get { return hasFromAgentGUID; }
    }
    public string FromAgentGUID {
      get { return fromAgentGUID_; }
    }
    
    public const int FromAgentIDFieldNumber = 3;
    private bool hasFromAgentID;
    private ulong fromAgentID_;
    public bool HasFromAgentID {
      get { return hasFromAgentID; }
    }
    [global::System.CLSCompliant(false)]
    public ulong FromAgentID {
      get { return fromAgentID_; }
    }
    
    public const int FromBTFieldNumber = 4;
    private bool hasFromBT;
    private global::BonreePB.BusinessTransaction fromBT_;
    public bool HasFromBT {
      get { return hasFromBT; }
    }
    public global::BonreePB.BusinessTransaction FromBT {
      get { return fromBT_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public const int ToAgentGUIDFieldNumber = 5;
    private bool hasToAgentGUID;
    private string toAgentGUID_ = "";
    public bool HasToAgentGUID {
      get { return hasToAgentGUID; }
    }
    public string ToAgentGUID {
      get { return toAgentGUID_; }
    }
    
    public const int ToAgentIDFieldNumber = 6;
    private bool hasToAgentID;
    private ulong toAgentID_;
    public bool HasToAgentID {
      get { return hasToAgentID; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ToAgentID {
      get { return toAgentID_; }
    }
    
    public const int ToBTFieldNumber = 7;
    private bool hasToBT;
    private global::BonreePB.BusinessTransaction toBT_;
    public bool HasToBT {
      get { return hasToBT; }
    }
    public global::BonreePB.BusinessTransaction ToBT {
      get { return toBT_ ?? global::BonreePB.BusinessTransaction.DefaultInstance; }
    }
    
    public const int RequestCountFieldNumber = 8;
    private bool hasRequestCount;
    private uint requestCount_;
    public bool HasRequestCount {
      get { return hasRequestCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestCount {
      get { return requestCount_; }
    }
    
    public const int SumRespTimeFieldNumber = 9;
    private bool hasSumRespTime;
    private ulong sumRespTime_;
    public bool HasSumRespTime {
      get { return hasSumRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SumRespTime {
      get { return sumRespTime_; }
    }
    
    public const int MaxRespTimeFieldNumber = 10;
    private bool hasMaxRespTime;
    private uint maxRespTime_;
    public bool HasMaxRespTime {
      get { return hasMaxRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRespTime {
      get { return maxRespTime_; }
    }
    
    public const int MinRespTimeFieldNumber = 11;
    private bool hasMinRespTime;
    private uint minRespTime_;
    public bool HasMinRespTime {
      get { return hasMinRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinRespTime {
      get { return minRespTime_; }
    }
    
    public const int CurRespTimeFieldNumber = 12;
    private bool hasCurRespTime;
    private uint curRespTime_;
    public bool HasCurRespTime {
      get { return hasCurRespTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurRespTime {
      get { return curRespTime_; }
    }
    
    public const int SlowCallsFieldNumber = 13;
    private bool hasSlowCalls;
    private uint slowCalls_;
    public bool HasSlowCalls {
      get { return hasSlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint SlowCalls {
      get { return slowCalls_; }
    }
    
    public const int VerySlowCallsFieldNumber = 14;
    private bool hasVerySlowCalls;
    private uint verySlowCalls_;
    public bool HasVerySlowCalls {
      get { return hasVerySlowCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint VerySlowCalls {
      get { return verySlowCalls_; }
    }
    
    public const int StallCallsFieldNumber = 15;
    private bool hasStallCalls;
    private uint stallCalls_;
    public bool HasStallCalls {
      get { return hasStallCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint StallCalls {
      get { return stallCalls_; }
    }
    
    public const int ErrorCallsFieldNumber = 16;
    private bool hasErrorCalls;
    private uint errorCalls_;
    public bool HasErrorCalls {
      get { return hasErrorCalls; }
    }
    [global::System.CLSCompliant(false)]
    public uint ErrorCalls {
      get { return errorCalls_; }
    }
    
    public const int ExceptionCountFieldNumber = 17;
    private bool hasExceptionCount;
    private uint exceptionCount_;
    public bool HasExceptionCount {
      get { return hasExceptionCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExceptionCount {
      get { return exceptionCount_; }
    }
    
    public const int HttpErrorCountFieldNumber = 18;
    private bool hasHttpErrorCount;
    private uint httpErrorCount_;
    public bool HasHttpErrorCount {
      get { return hasHttpErrorCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint HttpErrorCount {
      get { return httpErrorCount_; }
    }
    
    public const int BackendTypeFieldNumber = 19;
    private bool hasBackendType;
    private global::BonreePB.BackendType backendType_ = global::BonreePB.BackendType.BACKEND_TYPE_MYSQL;
    public bool HasBackendType {
      get { return hasBackendType; }
    }
    public global::BonreePB.BackendType BackendType {
      get { return backendType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _crossBTMetricFieldNames;
      if (hasIsAsync) {
        output.WriteBool(1, field_names[10], IsAsync);
      }
      if (hasFromAgentGUID) {
        output.WriteString(2, field_names[0], FromAgentGUID);
      }
      if (hasFromAgentID) {
        output.WriteUInt64(3, field_names[1], FromAgentID);
      }
      if (hasFromBT) {
        output.WriteMessage(4, field_names[8], FromBT);
      }
      if (hasToAgentGUID) {
        output.WriteString(5, field_names[2], ToAgentGUID);
      }
      if (hasToAgentID) {
        output.WriteUInt64(6, field_names[3], ToAgentID);
      }
      if (hasToBT) {
        output.WriteMessage(7, field_names[17], ToBT);
      }
      if (hasRequestCount) {
        output.WriteUInt32(8, field_names[13], RequestCount);
      }
      if (hasSumRespTime) {
        output.WriteUInt64(9, field_names[16], SumRespTime);
      }
      if (hasMaxRespTime) {
        output.WriteUInt32(10, field_names[11], MaxRespTime);
      }
      if (hasMinRespTime) {
        output.WriteUInt32(11, field_names[12], MinRespTime);
      }
      if (hasCurRespTime) {
        output.WriteUInt32(12, field_names[5], CurRespTime);
      }
      if (hasSlowCalls) {
        output.WriteUInt32(13, field_names[14], SlowCalls);
      }
      if (hasVerySlowCalls) {
        output.WriteUInt32(14, field_names[18], VerySlowCalls);
      }
      if (hasStallCalls) {
        output.WriteUInt32(15, field_names[15], StallCalls);
      }
      if (hasErrorCalls) {
        output.WriteUInt32(16, field_names[6], ErrorCalls);
      }
      if (hasExceptionCount) {
        output.WriteUInt32(17, field_names[7], ExceptionCount);
      }
      if (hasHttpErrorCount) {
        output.WriteUInt32(18, field_names[9], HttpErrorCount);
      }
      if (hasBackendType) {
        output.WriteEnum(19, field_names[4], (int) BackendType, BackendType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsAsync) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, IsAsync);
      }
      if (hasFromAgentGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(2, FromAgentGUID);
      }
      if (hasFromAgentID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, FromAgentID);
      }
      if (hasFromBT) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, FromBT);
      }
      if (hasToAgentGUID) {
        size += pb::CodedOutputStream.ComputeStringSize(5, ToAgentGUID);
      }
      if (hasToAgentID) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, ToAgentID);
      }
      if (hasToBT) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, ToBT);
      }
      if (hasRequestCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, RequestCount);
      }
      if (hasSumRespTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(9, SumRespTime);
      }
      if (hasMaxRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, MaxRespTime);
      }
      if (hasMinRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, MinRespTime);
      }
      if (hasCurRespTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, CurRespTime);
      }
      if (hasSlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, SlowCalls);
      }
      if (hasVerySlowCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, VerySlowCalls);
      }
      if (hasStallCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, StallCalls);
      }
      if (hasErrorCalls) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, ErrorCalls);
      }
      if (hasExceptionCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, ExceptionCount);
      }
      if (hasHttpErrorCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(18, HttpErrorCount);
      }
      if (hasBackendType) {
        size += pb::CodedOutputStream.ComputeEnumSize(19, (int) BackendType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CrossBTMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrossBTMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrossBTMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrossBTMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrossBTMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrossBTMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CrossBTMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CrossBTMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CrossBTMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrossBTMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CrossBTMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CrossBTMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CrossBTMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CrossBTMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CrossBTMetric result;
      
      private CrossBTMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          CrossBTMetric original = result;
          result = new CrossBTMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CrossBTMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.CrossBTMetric.Descriptor; }
      }
      
      public override CrossBTMetric DefaultInstanceForType {
        get { return global::BonreePB.CrossBTMetric.DefaultInstance; }
      }
      
      public override CrossBTMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CrossBTMetric) {
          return MergeFrom((CrossBTMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CrossBTMetric other) {
        if (other == global::BonreePB.CrossBTMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsAsync) {
          IsAsync = other.IsAsync;
        }
        if (other.HasFromAgentGUID) {
          FromAgentGUID = other.FromAgentGUID;
        }
        if (other.HasFromAgentID) {
          FromAgentID = other.FromAgentID;
        }
        if (other.HasFromBT) {
          MergeFromBT(other.FromBT);
        }
        if (other.HasToAgentGUID) {
          ToAgentGUID = other.ToAgentGUID;
        }
        if (other.HasToAgentID) {
          ToAgentID = other.ToAgentID;
        }
        if (other.HasToBT) {
          MergeToBT(other.ToBT);
        }
        if (other.HasRequestCount) {
          RequestCount = other.RequestCount;
        }
        if (other.HasSumRespTime) {
          SumRespTime = other.SumRespTime;
        }
        if (other.HasMaxRespTime) {
          MaxRespTime = other.MaxRespTime;
        }
        if (other.HasMinRespTime) {
          MinRespTime = other.MinRespTime;
        }
        if (other.HasCurRespTime) {
          CurRespTime = other.CurRespTime;
        }
        if (other.HasSlowCalls) {
          SlowCalls = other.SlowCalls;
        }
        if (other.HasVerySlowCalls) {
          VerySlowCalls = other.VerySlowCalls;
        }
        if (other.HasStallCalls) {
          StallCalls = other.StallCalls;
        }
        if (other.HasErrorCalls) {
          ErrorCalls = other.ErrorCalls;
        }
        if (other.HasExceptionCount) {
          ExceptionCount = other.ExceptionCount;
        }
        if (other.HasHttpErrorCount) {
          HttpErrorCount = other.HttpErrorCount;
        }
        if (other.HasBackendType) {
          BackendType = other.BackendType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_crossBTMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _crossBTMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsAsync = input.ReadBool(ref result.isAsync_);
              break;
            }
            case 18: {
              result.hasFromAgentGUID = input.ReadString(ref result.fromAgentGUID_);
              break;
            }
            case 24: {
              result.hasFromAgentID = input.ReadUInt64(ref result.fromAgentID_);
              break;
            }
            case 34: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasFromBT) {
                subBuilder.MergeFrom(FromBT);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FromBT = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              result.hasToAgentGUID = input.ReadString(ref result.toAgentGUID_);
              break;
            }
            case 48: {
              result.hasToAgentID = input.ReadUInt64(ref result.toAgentID_);
              break;
            }
            case 58: {
              global::BonreePB.BusinessTransaction.Builder subBuilder = global::BonreePB.BusinessTransaction.CreateBuilder();
              if (result.hasToBT) {
                subBuilder.MergeFrom(ToBT);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToBT = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              result.hasRequestCount = input.ReadUInt32(ref result.requestCount_);
              break;
            }
            case 72: {
              result.hasSumRespTime = input.ReadUInt64(ref result.sumRespTime_);
              break;
            }
            case 80: {
              result.hasMaxRespTime = input.ReadUInt32(ref result.maxRespTime_);
              break;
            }
            case 88: {
              result.hasMinRespTime = input.ReadUInt32(ref result.minRespTime_);
              break;
            }
            case 96: {
              result.hasCurRespTime = input.ReadUInt32(ref result.curRespTime_);
              break;
            }
            case 104: {
              result.hasSlowCalls = input.ReadUInt32(ref result.slowCalls_);
              break;
            }
            case 112: {
              result.hasVerySlowCalls = input.ReadUInt32(ref result.verySlowCalls_);
              break;
            }
            case 120: {
              result.hasStallCalls = input.ReadUInt32(ref result.stallCalls_);
              break;
            }
            case 128: {
              result.hasErrorCalls = input.ReadUInt32(ref result.errorCalls_);
              break;
            }
            case 136: {
              result.hasExceptionCount = input.ReadUInt32(ref result.exceptionCount_);
              break;
            }
            case 144: {
              result.hasHttpErrorCount = input.ReadUInt32(ref result.httpErrorCount_);
              break;
            }
            case 152: {
              object unknown;
              if(input.ReadEnum(ref result.backendType_, out unknown)) {
                result.hasBackendType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(19, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsAsync {
        get { return result.hasIsAsync; }
      }
      public bool IsAsync {
        get { return result.IsAsync; }
        set { SetIsAsync(value); }
      }
      public Builder SetIsAsync(bool value) {
        PrepareBuilder();
        result.hasIsAsync = true;
        result.isAsync_ = value;
        return this;
      }
      public Builder ClearIsAsync() {
        PrepareBuilder();
        result.hasIsAsync = false;
        result.isAsync_ = false;
        return this;
      }
      
      public bool HasFromAgentGUID {
        get { return result.hasFromAgentGUID; }
      }
      public string FromAgentGUID {
        get { return result.FromAgentGUID; }
        set { SetFromAgentGUID(value); }
      }
      public Builder SetFromAgentGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromAgentGUID = true;
        result.fromAgentGUID_ = value;
        return this;
      }
      public Builder ClearFromAgentGUID() {
        PrepareBuilder();
        result.hasFromAgentGUID = false;
        result.fromAgentGUID_ = "";
        return this;
      }
      
      public bool HasFromAgentID {
        get { return result.hasFromAgentID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong FromAgentID {
        get { return result.FromAgentID; }
        set { SetFromAgentID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFromAgentID(ulong value) {
        PrepareBuilder();
        result.hasFromAgentID = true;
        result.fromAgentID_ = value;
        return this;
      }
      public Builder ClearFromAgentID() {
        PrepareBuilder();
        result.hasFromAgentID = false;
        result.fromAgentID_ = 0UL;
        return this;
      }
      
      public bool HasFromBT {
       get { return result.hasFromBT; }
      }
      public global::BonreePB.BusinessTransaction FromBT {
        get { return result.FromBT; }
        set { SetFromBT(value); }
      }
      public Builder SetFromBT(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromBT = true;
        result.fromBT_ = value;
        return this;
      }
      public Builder SetFromBT(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFromBT = true;
        result.fromBT_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFromBT(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFromBT &&
            result.fromBT_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.fromBT_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.fromBT_).MergeFrom(value).BuildPartial();
        } else {
          result.fromBT_ = value;
        }
        result.hasFromBT = true;
        return this;
      }
      public Builder ClearFromBT() {
        PrepareBuilder();
        result.hasFromBT = false;
        result.fromBT_ = null;
        return this;
      }
      
      public bool HasToAgentGUID {
        get { return result.hasToAgentGUID; }
      }
      public string ToAgentGUID {
        get { return result.ToAgentGUID; }
        set { SetToAgentGUID(value); }
      }
      public Builder SetToAgentGUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToAgentGUID = true;
        result.toAgentGUID_ = value;
        return this;
      }
      public Builder ClearToAgentGUID() {
        PrepareBuilder();
        result.hasToAgentGUID = false;
        result.toAgentGUID_ = "";
        return this;
      }
      
      public bool HasToAgentID {
        get { return result.hasToAgentID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ToAgentID {
        get { return result.ToAgentID; }
        set { SetToAgentID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetToAgentID(ulong value) {
        PrepareBuilder();
        result.hasToAgentID = true;
        result.toAgentID_ = value;
        return this;
      }
      public Builder ClearToAgentID() {
        PrepareBuilder();
        result.hasToAgentID = false;
        result.toAgentID_ = 0UL;
        return this;
      }
      
      public bool HasToBT {
       get { return result.hasToBT; }
      }
      public global::BonreePB.BusinessTransaction ToBT {
        get { return result.ToBT; }
        set { SetToBT(value); }
      }
      public Builder SetToBT(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToBT = true;
        result.toBT_ = value;
        return this;
      }
      public Builder SetToBT(global::BonreePB.BusinessTransaction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToBT = true;
        result.toBT_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToBT(global::BonreePB.BusinessTransaction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToBT &&
            result.toBT_ != global::BonreePB.BusinessTransaction.DefaultInstance) {
            result.toBT_ = global::BonreePB.BusinessTransaction.CreateBuilder(result.toBT_).MergeFrom(value).BuildPartial();
        } else {
          result.toBT_ = value;
        }
        result.hasToBT = true;
        return this;
      }
      public Builder ClearToBT() {
        PrepareBuilder();
        result.hasToBT = false;
        result.toBT_ = null;
        return this;
      }
      
      public bool HasRequestCount {
        get { return result.hasRequestCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint RequestCount {
        get { return result.RequestCount; }
        set { SetRequestCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRequestCount(uint value) {
        PrepareBuilder();
        result.hasRequestCount = true;
        result.requestCount_ = value;
        return this;
      }
      public Builder ClearRequestCount() {
        PrepareBuilder();
        result.hasRequestCount = false;
        result.requestCount_ = 0;
        return this;
      }
      
      public bool HasSumRespTime {
        get { return result.hasSumRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SumRespTime {
        get { return result.SumRespTime; }
        set { SetSumRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumRespTime(ulong value) {
        PrepareBuilder();
        result.hasSumRespTime = true;
        result.sumRespTime_ = value;
        return this;
      }
      public Builder ClearSumRespTime() {
        PrepareBuilder();
        result.hasSumRespTime = false;
        result.sumRespTime_ = 0UL;
        return this;
      }
      
      public bool HasMaxRespTime {
        get { return result.hasMaxRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRespTime {
        get { return result.MaxRespTime; }
        set { SetMaxRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRespTime(uint value) {
        PrepareBuilder();
        result.hasMaxRespTime = true;
        result.maxRespTime_ = value;
        return this;
      }
      public Builder ClearMaxRespTime() {
        PrepareBuilder();
        result.hasMaxRespTime = false;
        result.maxRespTime_ = 0;
        return this;
      }
      
      public bool HasMinRespTime {
        get { return result.hasMinRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinRespTime {
        get { return result.MinRespTime; }
        set { SetMinRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinRespTime(uint value) {
        PrepareBuilder();
        result.hasMinRespTime = true;
        result.minRespTime_ = value;
        return this;
      }
      public Builder ClearMinRespTime() {
        PrepareBuilder();
        result.hasMinRespTime = false;
        result.minRespTime_ = 0;
        return this;
      }
      
      public bool HasCurRespTime {
        get { return result.hasCurRespTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurRespTime {
        get { return result.CurRespTime; }
        set { SetCurRespTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurRespTime(uint value) {
        PrepareBuilder();
        result.hasCurRespTime = true;
        result.curRespTime_ = value;
        return this;
      }
      public Builder ClearCurRespTime() {
        PrepareBuilder();
        result.hasCurRespTime = false;
        result.curRespTime_ = 0;
        return this;
      }
      
      public bool HasSlowCalls {
        get { return result.hasSlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint SlowCalls {
        get { return result.SlowCalls; }
        set { SetSlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSlowCalls(uint value) {
        PrepareBuilder();
        result.hasSlowCalls = true;
        result.slowCalls_ = value;
        return this;
      }
      public Builder ClearSlowCalls() {
        PrepareBuilder();
        result.hasSlowCalls = false;
        result.slowCalls_ = 0;
        return this;
      }
      
      public bool HasVerySlowCalls {
        get { return result.hasVerySlowCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint VerySlowCalls {
        get { return result.VerySlowCalls; }
        set { SetVerySlowCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVerySlowCalls(uint value) {
        PrepareBuilder();
        result.hasVerySlowCalls = true;
        result.verySlowCalls_ = value;
        return this;
      }
      public Builder ClearVerySlowCalls() {
        PrepareBuilder();
        result.hasVerySlowCalls = false;
        result.verySlowCalls_ = 0;
        return this;
      }
      
      public bool HasStallCalls {
        get { return result.hasStallCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint StallCalls {
        get { return result.StallCalls; }
        set { SetStallCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStallCalls(uint value) {
        PrepareBuilder();
        result.hasStallCalls = true;
        result.stallCalls_ = value;
        return this;
      }
      public Builder ClearStallCalls() {
        PrepareBuilder();
        result.hasStallCalls = false;
        result.stallCalls_ = 0;
        return this;
      }
      
      public bool HasErrorCalls {
        get { return result.hasErrorCalls; }
      }
      [global::System.CLSCompliant(false)]
      public uint ErrorCalls {
        get { return result.ErrorCalls; }
        set { SetErrorCalls(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetErrorCalls(uint value) {
        PrepareBuilder();
        result.hasErrorCalls = true;
        result.errorCalls_ = value;
        return this;
      }
      public Builder ClearErrorCalls() {
        PrepareBuilder();
        result.hasErrorCalls = false;
        result.errorCalls_ = 0;
        return this;
      }
      
      public bool HasExceptionCount {
        get { return result.hasExceptionCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExceptionCount {
        get { return result.ExceptionCount; }
        set { SetExceptionCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExceptionCount(uint value) {
        PrepareBuilder();
        result.hasExceptionCount = true;
        result.exceptionCount_ = value;
        return this;
      }
      public Builder ClearExceptionCount() {
        PrepareBuilder();
        result.hasExceptionCount = false;
        result.exceptionCount_ = 0;
        return this;
      }
      
      public bool HasHttpErrorCount {
        get { return result.hasHttpErrorCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint HttpErrorCount {
        get { return result.HttpErrorCount; }
        set { SetHttpErrorCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHttpErrorCount(uint value) {
        PrepareBuilder();
        result.hasHttpErrorCount = true;
        result.httpErrorCount_ = value;
        return this;
      }
      public Builder ClearHttpErrorCount() {
        PrepareBuilder();
        result.hasHttpErrorCount = false;
        result.httpErrorCount_ = 0;
        return this;
      }
      
      public bool HasBackendType {
       get { return result.hasBackendType; }
      }
      public global::BonreePB.BackendType BackendType {
        get { return result.BackendType; }
        set { SetBackendType(value); }
      }
      public Builder SetBackendType(global::BonreePB.BackendType value) {
        PrepareBuilder();
        result.hasBackendType = true;
        result.backendType_ = value;
        return this;
      }
      public Builder ClearBackendType() {
        PrepareBuilder();
        result.hasBackendType = false;
        result.backendType_ = global::BonreePB.BackendType.BACKEND_TYPE_MYSQL;
        return this;
      }
    }
    static CrossBTMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VMMetric : pb::GeneratedMessage<VMMetric, VMMetric.Builder> {
    private VMMetric() { }
    private static readonly VMMetric defaultInstance = new VMMetric().MakeReadOnly();
    private static readonly string[] _vMMetricFieldNames = new string[] { "blockThreads", "clrCommittedHeapSize", "clrGen_0_Usage", "clrGen_0_gc_count", "clrGen_1_Usage", "clrGen_1_gc_count", "clrGen_2_Usage", "clrGen_2_gc_count", "clrLargeObjectHeapUsage", "clrLargeObject_gc_count", "clrUsageHeapSize", "cpuUsage", "currentLoadedClasses", "deadlockThreads", "finishThreads", "gcCount", "jvmCodeCacheCommitted", "jvmCodeCacheMAX", "jvmCodeCacheUsed", "jvmCommittedHeapSize", "jvmCompressedSpaceCommitted", "jvmCompressedSpaceMAX", "jvmCompressedSpaceUsed", "jvmMajorCollectionsCount", "jvmMaxHeapSize", "jvmMaxMajorCollectionsTime", "jvmMaxMinorCollectionsTime", "jvmMetaSpaceCommitted", "jvmMetaSpaceMAX", "jvmMetaSpaceUsed", "jvmMinMajorCollectionsTime", "jvmMinMinorCollectionsTime", "jvmMinorCollectionsCount", "jvmPSEdenSpaceCommitted", "jvmPSEdenSpaceMAX", "jvmPSEdenSpaceUsed", "jvmPSOldGenCommitted", "jvmPSOldGenMAX", "jvmPSOldGenUsed", "jvmPSPermGenCommitted", "jvmPSPermGenMAX", "jvmPSPermGenUsed", "jvmPSSurvivorSpaceCommitted", "jvmPSSurvivorSpaceMAX", "jvmPSSurvivorSpaceUsed", "jvmSumMajorCollectionsTime", "jvmSumMinorCollectionsTime", "jvmUsageHeapSize", "maxGCTime", "minGCTime", "runningThreads", "sumGCTime", "totalLoadedClasses" };
    private static readonly uint[] _vMMetricFieldTags = new uint[] { 336, 360, 368, 376, 384, 392, 400, 408, 416, 424, 352, 344, 264, 320, 328, 280, 104, 112, 96, 24, 248, 256, 240, 32, 16, 48, 80, 224, 232, 216, 56, 88, 64, 128, 136, 120, 152, 160, 144, 176, 184, 168, 200, 208, 192, 40, 72, 8, 296, 304, 312, 288, 272 };
    public static VMMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VMMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VMMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_VMMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VMMetric, VMMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_VMMetric__FieldAccessorTable; }
    }
    
    public const int JvmUsageHeapSizeFieldNumber = 1;
    private bool hasJvmUsageHeapSize;
    private uint jvmUsageHeapSize_;
    public bool HasJvmUsageHeapSize {
      get { return hasJvmUsageHeapSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmUsageHeapSize {
      get { return jvmUsageHeapSize_; }
    }
    
    public const int JvmMaxHeapSizeFieldNumber = 2;
    private bool hasJvmMaxHeapSize;
    private uint jvmMaxHeapSize_;
    public bool HasJvmMaxHeapSize {
      get { return hasJvmMaxHeapSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMaxHeapSize {
      get { return jvmMaxHeapSize_; }
    }
    
    public const int JvmCommittedHeapSizeFieldNumber = 3;
    private bool hasJvmCommittedHeapSize;
    private uint jvmCommittedHeapSize_;
    public bool HasJvmCommittedHeapSize {
      get { return hasJvmCommittedHeapSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmCommittedHeapSize {
      get { return jvmCommittedHeapSize_; }
    }
    
    public const int JvmMajorCollectionsCountFieldNumber = 4;
    private bool hasJvmMajorCollectionsCount;
    private uint jvmMajorCollectionsCount_;
    public bool HasJvmMajorCollectionsCount {
      get { return hasJvmMajorCollectionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMajorCollectionsCount {
      get { return jvmMajorCollectionsCount_; }
    }
    
    public const int JvmSumMajorCollectionsTimeFieldNumber = 5;
    private bool hasJvmSumMajorCollectionsTime;
    private uint jvmSumMajorCollectionsTime_;
    public bool HasJvmSumMajorCollectionsTime {
      get { return hasJvmSumMajorCollectionsTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmSumMajorCollectionsTime {
      get { return jvmSumMajorCollectionsTime_; }
    }
    
    public const int JvmMaxMajorCollectionsTimeFieldNumber = 6;
    private bool hasJvmMaxMajorCollectionsTime;
    private uint jvmMaxMajorCollectionsTime_;
    public bool HasJvmMaxMajorCollectionsTime {
      get { return hasJvmMaxMajorCollectionsTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMaxMajorCollectionsTime {
      get { return jvmMaxMajorCollectionsTime_; }
    }
    
    public const int JvmMinMajorCollectionsTimeFieldNumber = 7;
    private bool hasJvmMinMajorCollectionsTime;
    private uint jvmMinMajorCollectionsTime_;
    public bool HasJvmMinMajorCollectionsTime {
      get { return hasJvmMinMajorCollectionsTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMinMajorCollectionsTime {
      get { return jvmMinMajorCollectionsTime_; }
    }
    
    public const int JvmMinorCollectionsCountFieldNumber = 8;
    private bool hasJvmMinorCollectionsCount;
    private uint jvmMinorCollectionsCount_;
    public bool HasJvmMinorCollectionsCount {
      get { return hasJvmMinorCollectionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMinorCollectionsCount {
      get { return jvmMinorCollectionsCount_; }
    }
    
    public const int JvmSumMinorCollectionsTimeFieldNumber = 9;
    private bool hasJvmSumMinorCollectionsTime;
    private uint jvmSumMinorCollectionsTime_;
    public bool HasJvmSumMinorCollectionsTime {
      get { return hasJvmSumMinorCollectionsTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmSumMinorCollectionsTime {
      get { return jvmSumMinorCollectionsTime_; }
    }
    
    public const int JvmMaxMinorCollectionsTimeFieldNumber = 10;
    private bool hasJvmMaxMinorCollectionsTime;
    private uint jvmMaxMinorCollectionsTime_;
    public bool HasJvmMaxMinorCollectionsTime {
      get { return hasJvmMaxMinorCollectionsTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMaxMinorCollectionsTime {
      get { return jvmMaxMinorCollectionsTime_; }
    }
    
    public const int JvmMinMinorCollectionsTimeFieldNumber = 11;
    private bool hasJvmMinMinorCollectionsTime;
    private uint jvmMinMinorCollectionsTime_;
    public bool HasJvmMinMinorCollectionsTime {
      get { return hasJvmMinMinorCollectionsTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMinMinorCollectionsTime {
      get { return jvmMinMinorCollectionsTime_; }
    }
    
    public const int JvmCodeCacheUsedFieldNumber = 12;
    private bool hasJvmCodeCacheUsed;
    private uint jvmCodeCacheUsed_;
    public bool HasJvmCodeCacheUsed {
      get { return hasJvmCodeCacheUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmCodeCacheUsed {
      get { return jvmCodeCacheUsed_; }
    }
    
    public const int JvmCodeCacheCommittedFieldNumber = 13;
    private bool hasJvmCodeCacheCommitted;
    private uint jvmCodeCacheCommitted_;
    public bool HasJvmCodeCacheCommitted {
      get { return hasJvmCodeCacheCommitted; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmCodeCacheCommitted {
      get { return jvmCodeCacheCommitted_; }
    }
    
    public const int JvmCodeCacheMAXFieldNumber = 14;
    private bool hasJvmCodeCacheMAX;
    private uint jvmCodeCacheMAX_;
    public bool HasJvmCodeCacheMAX {
      get { return hasJvmCodeCacheMAX; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmCodeCacheMAX {
      get { return jvmCodeCacheMAX_; }
    }
    
    public const int JvmPSEdenSpaceUsedFieldNumber = 15;
    private bool hasJvmPSEdenSpaceUsed;
    private uint jvmPSEdenSpaceUsed_;
    public bool HasJvmPSEdenSpaceUsed {
      get { return hasJvmPSEdenSpaceUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSEdenSpaceUsed {
      get { return jvmPSEdenSpaceUsed_; }
    }
    
    public const int JvmPSEdenSpaceCommittedFieldNumber = 16;
    private bool hasJvmPSEdenSpaceCommitted;
    private uint jvmPSEdenSpaceCommitted_;
    public bool HasJvmPSEdenSpaceCommitted {
      get { return hasJvmPSEdenSpaceCommitted; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSEdenSpaceCommitted {
      get { return jvmPSEdenSpaceCommitted_; }
    }
    
    public const int JvmPSEdenSpaceMAXFieldNumber = 17;
    private bool hasJvmPSEdenSpaceMAX;
    private uint jvmPSEdenSpaceMAX_;
    public bool HasJvmPSEdenSpaceMAX {
      get { return hasJvmPSEdenSpaceMAX; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSEdenSpaceMAX {
      get { return jvmPSEdenSpaceMAX_; }
    }
    
    public const int JvmPSOldGenUsedFieldNumber = 18;
    private bool hasJvmPSOldGenUsed;
    private uint jvmPSOldGenUsed_;
    public bool HasJvmPSOldGenUsed {
      get { return hasJvmPSOldGenUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSOldGenUsed {
      get { return jvmPSOldGenUsed_; }
    }
    
    public const int JvmPSOldGenCommittedFieldNumber = 19;
    private bool hasJvmPSOldGenCommitted;
    private uint jvmPSOldGenCommitted_;
    public bool HasJvmPSOldGenCommitted {
      get { return hasJvmPSOldGenCommitted; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSOldGenCommitted {
      get { return jvmPSOldGenCommitted_; }
    }
    
    public const int JvmPSOldGenMAXFieldNumber = 20;
    private bool hasJvmPSOldGenMAX;
    private uint jvmPSOldGenMAX_;
    public bool HasJvmPSOldGenMAX {
      get { return hasJvmPSOldGenMAX; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSOldGenMAX {
      get { return jvmPSOldGenMAX_; }
    }
    
    public const int JvmPSPermGenUsedFieldNumber = 21;
    private bool hasJvmPSPermGenUsed;
    private uint jvmPSPermGenUsed_;
    public bool HasJvmPSPermGenUsed {
      get { return hasJvmPSPermGenUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSPermGenUsed {
      get { return jvmPSPermGenUsed_; }
    }
    
    public const int JvmPSPermGenCommittedFieldNumber = 22;
    private bool hasJvmPSPermGenCommitted;
    private uint jvmPSPermGenCommitted_;
    public bool HasJvmPSPermGenCommitted {
      get { return hasJvmPSPermGenCommitted; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSPermGenCommitted {
      get { return jvmPSPermGenCommitted_; }
    }
    
    public const int JvmPSPermGenMAXFieldNumber = 23;
    private bool hasJvmPSPermGenMAX;
    private uint jvmPSPermGenMAX_;
    public bool HasJvmPSPermGenMAX {
      get { return hasJvmPSPermGenMAX; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSPermGenMAX {
      get { return jvmPSPermGenMAX_; }
    }
    
    public const int JvmPSSurvivorSpaceUsedFieldNumber = 24;
    private bool hasJvmPSSurvivorSpaceUsed;
    private uint jvmPSSurvivorSpaceUsed_;
    public bool HasJvmPSSurvivorSpaceUsed {
      get { return hasJvmPSSurvivorSpaceUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSSurvivorSpaceUsed {
      get { return jvmPSSurvivorSpaceUsed_; }
    }
    
    public const int JvmPSSurvivorSpaceCommittedFieldNumber = 25;
    private bool hasJvmPSSurvivorSpaceCommitted;
    private uint jvmPSSurvivorSpaceCommitted_;
    public bool HasJvmPSSurvivorSpaceCommitted {
      get { return hasJvmPSSurvivorSpaceCommitted; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSSurvivorSpaceCommitted {
      get { return jvmPSSurvivorSpaceCommitted_; }
    }
    
    public const int JvmPSSurvivorSpaceMAXFieldNumber = 26;
    private bool hasJvmPSSurvivorSpaceMAX;
    private uint jvmPSSurvivorSpaceMAX_;
    public bool HasJvmPSSurvivorSpaceMAX {
      get { return hasJvmPSSurvivorSpaceMAX; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmPSSurvivorSpaceMAX {
      get { return jvmPSSurvivorSpaceMAX_; }
    }
    
    public const int JvmMetaSpaceUsedFieldNumber = 27;
    private bool hasJvmMetaSpaceUsed;
    private uint jvmMetaSpaceUsed_;
    public bool HasJvmMetaSpaceUsed {
      get { return hasJvmMetaSpaceUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMetaSpaceUsed {
      get { return jvmMetaSpaceUsed_; }
    }
    
    public const int JvmMetaSpaceCommittedFieldNumber = 28;
    private bool hasJvmMetaSpaceCommitted;
    private uint jvmMetaSpaceCommitted_;
    public bool HasJvmMetaSpaceCommitted {
      get { return hasJvmMetaSpaceCommitted; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMetaSpaceCommitted {
      get { return jvmMetaSpaceCommitted_; }
    }
    
    public const int JvmMetaSpaceMAXFieldNumber = 29;
    private bool hasJvmMetaSpaceMAX;
    private uint jvmMetaSpaceMAX_;
    public bool HasJvmMetaSpaceMAX {
      get { return hasJvmMetaSpaceMAX; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmMetaSpaceMAX {
      get { return jvmMetaSpaceMAX_; }
    }
    
    public const int JvmCompressedSpaceUsedFieldNumber = 30;
    private bool hasJvmCompressedSpaceUsed;
    private uint jvmCompressedSpaceUsed_;
    public bool HasJvmCompressedSpaceUsed {
      get { return hasJvmCompressedSpaceUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmCompressedSpaceUsed {
      get { return jvmCompressedSpaceUsed_; }
    }
    
    public const int JvmCompressedSpaceCommittedFieldNumber = 31;
    private bool hasJvmCompressedSpaceCommitted;
    private uint jvmCompressedSpaceCommitted_;
    public bool HasJvmCompressedSpaceCommitted {
      get { return hasJvmCompressedSpaceCommitted; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmCompressedSpaceCommitted {
      get { return jvmCompressedSpaceCommitted_; }
    }
    
    public const int JvmCompressedSpaceMAXFieldNumber = 32;
    private bool hasJvmCompressedSpaceMAX;
    private uint jvmCompressedSpaceMAX_;
    public bool HasJvmCompressedSpaceMAX {
      get { return hasJvmCompressedSpaceMAX; }
    }
    [global::System.CLSCompliant(false)]
    public uint JvmCompressedSpaceMAX {
      get { return jvmCompressedSpaceMAX_; }
    }
    
    public const int CurrentLoadedClassesFieldNumber = 33;
    private bool hasCurrentLoadedClasses;
    private uint currentLoadedClasses_;
    public bool HasCurrentLoadedClasses {
      get { return hasCurrentLoadedClasses; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurrentLoadedClasses {
      get { return currentLoadedClasses_; }
    }
    
    public const int TotalLoadedClassesFieldNumber = 34;
    private bool hasTotalLoadedClasses;
    private uint totalLoadedClasses_;
    public bool HasTotalLoadedClasses {
      get { return hasTotalLoadedClasses; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalLoadedClasses {
      get { return totalLoadedClasses_; }
    }
    
    public const int GcCountFieldNumber = 35;
    private bool hasGcCount;
    private uint gcCount_;
    public bool HasGcCount {
      get { return hasGcCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GcCount {
      get { return gcCount_; }
    }
    
    public const int SumGCTimeFieldNumber = 36;
    private bool hasSumGCTime;
    private uint sumGCTime_;
    public bool HasSumGCTime {
      get { return hasSumGCTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint SumGCTime {
      get { return sumGCTime_; }
    }
    
    public const int MaxGCTimeFieldNumber = 37;
    private bool hasMaxGCTime;
    private uint maxGCTime_;
    public bool HasMaxGCTime {
      get { return hasMaxGCTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxGCTime {
      get { return maxGCTime_; }
    }
    
    public const int MinGCTimeFieldNumber = 38;
    private bool hasMinGCTime;
    private uint minGCTime_;
    public bool HasMinGCTime {
      get { return hasMinGCTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MinGCTime {
      get { return minGCTime_; }
    }
    
    public const int RunningThreadsFieldNumber = 39;
    private bool hasRunningThreads;
    private uint runningThreads_;
    public bool HasRunningThreads {
      get { return hasRunningThreads; }
    }
    [global::System.CLSCompliant(false)]
    public uint RunningThreads {
      get { return runningThreads_; }
    }
    
    public const int DeadlockThreadsFieldNumber = 40;
    private bool hasDeadlockThreads;
    private uint deadlockThreads_;
    public bool HasDeadlockThreads {
      get { return hasDeadlockThreads; }
    }
    [global::System.CLSCompliant(false)]
    public uint DeadlockThreads {
      get { return deadlockThreads_; }
    }
    
    public const int FinishThreadsFieldNumber = 41;
    private bool hasFinishThreads;
    private uint finishThreads_;
    public bool HasFinishThreads {
      get { return hasFinishThreads; }
    }
    [global::System.CLSCompliant(false)]
    public uint FinishThreads {
      get { return finishThreads_; }
    }
    
    public const int BlockThreadsFieldNumber = 42;
    private bool hasBlockThreads;
    private uint blockThreads_;
    public bool HasBlockThreads {
      get { return hasBlockThreads; }
    }
    [global::System.CLSCompliant(false)]
    public uint BlockThreads {
      get { return blockThreads_; }
    }
    
    public const int CpuUsageFieldNumber = 43;
    private bool hasCpuUsage;
    private uint cpuUsage_;
    public bool HasCpuUsage {
      get { return hasCpuUsage; }
    }
    [global::System.CLSCompliant(false)]
    public uint CpuUsage {
      get { return cpuUsage_; }
    }
    
    public const int ClrUsageHeapSizeFieldNumber = 44;
    private bool hasClrUsageHeapSize;
    private uint clrUsageHeapSize_;
    public bool HasClrUsageHeapSize {
      get { return hasClrUsageHeapSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrUsageHeapSize {
      get { return clrUsageHeapSize_; }
    }
    
    public const int ClrCommittedHeapSizeFieldNumber = 45;
    private bool hasClrCommittedHeapSize;
    private uint clrCommittedHeapSize_;
    public bool HasClrCommittedHeapSize {
      get { return hasClrCommittedHeapSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrCommittedHeapSize {
      get { return clrCommittedHeapSize_; }
    }
    
    public const int ClrGen0UsageFieldNumber = 46;
    private bool hasClrGen0Usage;
    private uint clrGen0Usage_;
    public bool HasClrGen0Usage {
      get { return hasClrGen0Usage; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrGen0Usage {
      get { return clrGen0Usage_; }
    }
    
    public const int ClrGen0GcCountFieldNumber = 47;
    private bool hasClrGen0GcCount;
    private uint clrGen0GcCount_;
    public bool HasClrGen0GcCount {
      get { return hasClrGen0GcCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrGen0GcCount {
      get { return clrGen0GcCount_; }
    }
    
    public const int ClrGen1UsageFieldNumber = 48;
    private bool hasClrGen1Usage;
    private uint clrGen1Usage_;
    public bool HasClrGen1Usage {
      get { return hasClrGen1Usage; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrGen1Usage {
      get { return clrGen1Usage_; }
    }
    
    public const int ClrGen1GcCountFieldNumber = 49;
    private bool hasClrGen1GcCount;
    private uint clrGen1GcCount_;
    public bool HasClrGen1GcCount {
      get { return hasClrGen1GcCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrGen1GcCount {
      get { return clrGen1GcCount_; }
    }
    
    public const int ClrGen2UsageFieldNumber = 50;
    private bool hasClrGen2Usage;
    private uint clrGen2Usage_;
    public bool HasClrGen2Usage {
      get { return hasClrGen2Usage; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrGen2Usage {
      get { return clrGen2Usage_; }
    }
    
    public const int ClrGen2GcCountFieldNumber = 51;
    private bool hasClrGen2GcCount;
    private uint clrGen2GcCount_;
    public bool HasClrGen2GcCount {
      get { return hasClrGen2GcCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrGen2GcCount {
      get { return clrGen2GcCount_; }
    }
    
    public const int ClrLargeObjectHeapUsageFieldNumber = 52;
    private bool hasClrLargeObjectHeapUsage;
    private uint clrLargeObjectHeapUsage_;
    public bool HasClrLargeObjectHeapUsage {
      get { return hasClrLargeObjectHeapUsage; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrLargeObjectHeapUsage {
      get { return clrLargeObjectHeapUsage_; }
    }
    
    public const int ClrLargeObjectGcCountFieldNumber = 53;
    private bool hasClrLargeObjectGcCount;
    private uint clrLargeObjectGcCount_;
    public bool HasClrLargeObjectGcCount {
      get { return hasClrLargeObjectGcCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClrLargeObjectGcCount {
      get { return clrLargeObjectGcCount_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _vMMetricFieldNames;
      if (hasJvmUsageHeapSize) {
        output.WriteUInt32(1, field_names[47], JvmUsageHeapSize);
      }
      if (hasJvmMaxHeapSize) {
        output.WriteUInt32(2, field_names[24], JvmMaxHeapSize);
      }
      if (hasJvmCommittedHeapSize) {
        output.WriteUInt32(3, field_names[19], JvmCommittedHeapSize);
      }
      if (hasJvmMajorCollectionsCount) {
        output.WriteUInt32(4, field_names[23], JvmMajorCollectionsCount);
      }
      if (hasJvmSumMajorCollectionsTime) {
        output.WriteUInt32(5, field_names[45], JvmSumMajorCollectionsTime);
      }
      if (hasJvmMaxMajorCollectionsTime) {
        output.WriteUInt32(6, field_names[25], JvmMaxMajorCollectionsTime);
      }
      if (hasJvmMinMajorCollectionsTime) {
        output.WriteUInt32(7, field_names[30], JvmMinMajorCollectionsTime);
      }
      if (hasJvmMinorCollectionsCount) {
        output.WriteUInt32(8, field_names[32], JvmMinorCollectionsCount);
      }
      if (hasJvmSumMinorCollectionsTime) {
        output.WriteUInt32(9, field_names[46], JvmSumMinorCollectionsTime);
      }
      if (hasJvmMaxMinorCollectionsTime) {
        output.WriteUInt32(10, field_names[26], JvmMaxMinorCollectionsTime);
      }
      if (hasJvmMinMinorCollectionsTime) {
        output.WriteUInt32(11, field_names[31], JvmMinMinorCollectionsTime);
      }
      if (hasJvmCodeCacheUsed) {
        output.WriteUInt32(12, field_names[18], JvmCodeCacheUsed);
      }
      if (hasJvmCodeCacheCommitted) {
        output.WriteUInt32(13, field_names[16], JvmCodeCacheCommitted);
      }
      if (hasJvmCodeCacheMAX) {
        output.WriteUInt32(14, field_names[17], JvmCodeCacheMAX);
      }
      if (hasJvmPSEdenSpaceUsed) {
        output.WriteUInt32(15, field_names[35], JvmPSEdenSpaceUsed);
      }
      if (hasJvmPSEdenSpaceCommitted) {
        output.WriteUInt32(16, field_names[33], JvmPSEdenSpaceCommitted);
      }
      if (hasJvmPSEdenSpaceMAX) {
        output.WriteUInt32(17, field_names[34], JvmPSEdenSpaceMAX);
      }
      if (hasJvmPSOldGenUsed) {
        output.WriteUInt32(18, field_names[38], JvmPSOldGenUsed);
      }
      if (hasJvmPSOldGenCommitted) {
        output.WriteUInt32(19, field_names[36], JvmPSOldGenCommitted);
      }
      if (hasJvmPSOldGenMAX) {
        output.WriteUInt32(20, field_names[37], JvmPSOldGenMAX);
      }
      if (hasJvmPSPermGenUsed) {
        output.WriteUInt32(21, field_names[41], JvmPSPermGenUsed);
      }
      if (hasJvmPSPermGenCommitted) {
        output.WriteUInt32(22, field_names[39], JvmPSPermGenCommitted);
      }
      if (hasJvmPSPermGenMAX) {
        output.WriteUInt32(23, field_names[40], JvmPSPermGenMAX);
      }
      if (hasJvmPSSurvivorSpaceUsed) {
        output.WriteUInt32(24, field_names[44], JvmPSSurvivorSpaceUsed);
      }
      if (hasJvmPSSurvivorSpaceCommitted) {
        output.WriteUInt32(25, field_names[42], JvmPSSurvivorSpaceCommitted);
      }
      if (hasJvmPSSurvivorSpaceMAX) {
        output.WriteUInt32(26, field_names[43], JvmPSSurvivorSpaceMAX);
      }
      if (hasJvmMetaSpaceUsed) {
        output.WriteUInt32(27, field_names[29], JvmMetaSpaceUsed);
      }
      if (hasJvmMetaSpaceCommitted) {
        output.WriteUInt32(28, field_names[27], JvmMetaSpaceCommitted);
      }
      if (hasJvmMetaSpaceMAX) {
        output.WriteUInt32(29, field_names[28], JvmMetaSpaceMAX);
      }
      if (hasJvmCompressedSpaceUsed) {
        output.WriteUInt32(30, field_names[22], JvmCompressedSpaceUsed);
      }
      if (hasJvmCompressedSpaceCommitted) {
        output.WriteUInt32(31, field_names[20], JvmCompressedSpaceCommitted);
      }
      if (hasJvmCompressedSpaceMAX) {
        output.WriteUInt32(32, field_names[21], JvmCompressedSpaceMAX);
      }
      if (hasCurrentLoadedClasses) {
        output.WriteUInt32(33, field_names[12], CurrentLoadedClasses);
      }
      if (hasTotalLoadedClasses) {
        output.WriteUInt32(34, field_names[52], TotalLoadedClasses);
      }
      if (hasGcCount) {
        output.WriteUInt32(35, field_names[15], GcCount);
      }
      if (hasSumGCTime) {
        output.WriteUInt32(36, field_names[51], SumGCTime);
      }
      if (hasMaxGCTime) {
        output.WriteUInt32(37, field_names[48], MaxGCTime);
      }
      if (hasMinGCTime) {
        output.WriteUInt32(38, field_names[49], MinGCTime);
      }
      if (hasRunningThreads) {
        output.WriteUInt32(39, field_names[50], RunningThreads);
      }
      if (hasDeadlockThreads) {
        output.WriteUInt32(40, field_names[13], DeadlockThreads);
      }
      if (hasFinishThreads) {
        output.WriteUInt32(41, field_names[14], FinishThreads);
      }
      if (hasBlockThreads) {
        output.WriteUInt32(42, field_names[0], BlockThreads);
      }
      if (hasCpuUsage) {
        output.WriteUInt32(43, field_names[11], CpuUsage);
      }
      if (hasClrUsageHeapSize) {
        output.WriteUInt32(44, field_names[10], ClrUsageHeapSize);
      }
      if (hasClrCommittedHeapSize) {
        output.WriteUInt32(45, field_names[1], ClrCommittedHeapSize);
      }
      if (hasClrGen0Usage) {
        output.WriteUInt32(46, field_names[2], ClrGen0Usage);
      }
      if (hasClrGen0GcCount) {
        output.WriteUInt32(47, field_names[3], ClrGen0GcCount);
      }
      if (hasClrGen1Usage) {
        output.WriteUInt32(48, field_names[4], ClrGen1Usage);
      }
      if (hasClrGen1GcCount) {
        output.WriteUInt32(49, field_names[5], ClrGen1GcCount);
      }
      if (hasClrGen2Usage) {
        output.WriteUInt32(50, field_names[6], ClrGen2Usage);
      }
      if (hasClrGen2GcCount) {
        output.WriteUInt32(51, field_names[7], ClrGen2GcCount);
      }
      if (hasClrLargeObjectHeapUsage) {
        output.WriteUInt32(52, field_names[8], ClrLargeObjectHeapUsage);
      }
      if (hasClrLargeObjectGcCount) {
        output.WriteUInt32(53, field_names[9], ClrLargeObjectGcCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasJvmUsageHeapSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, JvmUsageHeapSize);
      }
      if (hasJvmMaxHeapSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, JvmMaxHeapSize);
      }
      if (hasJvmCommittedHeapSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, JvmCommittedHeapSize);
      }
      if (hasJvmMajorCollectionsCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, JvmMajorCollectionsCount);
      }
      if (hasJvmSumMajorCollectionsTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, JvmSumMajorCollectionsTime);
      }
      if (hasJvmMaxMajorCollectionsTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, JvmMaxMajorCollectionsTime);
      }
      if (hasJvmMinMajorCollectionsTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, JvmMinMajorCollectionsTime);
      }
      if (hasJvmMinorCollectionsCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, JvmMinorCollectionsCount);
      }
      if (hasJvmSumMinorCollectionsTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, JvmSumMinorCollectionsTime);
      }
      if (hasJvmMaxMinorCollectionsTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, JvmMaxMinorCollectionsTime);
      }
      if (hasJvmMinMinorCollectionsTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, JvmMinMinorCollectionsTime);
      }
      if (hasJvmCodeCacheUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, JvmCodeCacheUsed);
      }
      if (hasJvmCodeCacheCommitted) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, JvmCodeCacheCommitted);
      }
      if (hasJvmCodeCacheMAX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, JvmCodeCacheMAX);
      }
      if (hasJvmPSEdenSpaceUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, JvmPSEdenSpaceUsed);
      }
      if (hasJvmPSEdenSpaceCommitted) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, JvmPSEdenSpaceCommitted);
      }
      if (hasJvmPSEdenSpaceMAX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, JvmPSEdenSpaceMAX);
      }
      if (hasJvmPSOldGenUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(18, JvmPSOldGenUsed);
      }
      if (hasJvmPSOldGenCommitted) {
        size += pb::CodedOutputStream.ComputeUInt32Size(19, JvmPSOldGenCommitted);
      }
      if (hasJvmPSOldGenMAX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(20, JvmPSOldGenMAX);
      }
      if (hasJvmPSPermGenUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(21, JvmPSPermGenUsed);
      }
      if (hasJvmPSPermGenCommitted) {
        size += pb::CodedOutputStream.ComputeUInt32Size(22, JvmPSPermGenCommitted);
      }
      if (hasJvmPSPermGenMAX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(23, JvmPSPermGenMAX);
      }
      if (hasJvmPSSurvivorSpaceUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(24, JvmPSSurvivorSpaceUsed);
      }
      if (hasJvmPSSurvivorSpaceCommitted) {
        size += pb::CodedOutputStream.ComputeUInt32Size(25, JvmPSSurvivorSpaceCommitted);
      }
      if (hasJvmPSSurvivorSpaceMAX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(26, JvmPSSurvivorSpaceMAX);
      }
      if (hasJvmMetaSpaceUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(27, JvmMetaSpaceUsed);
      }
      if (hasJvmMetaSpaceCommitted) {
        size += pb::CodedOutputStream.ComputeUInt32Size(28, JvmMetaSpaceCommitted);
      }
      if (hasJvmMetaSpaceMAX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(29, JvmMetaSpaceMAX);
      }
      if (hasJvmCompressedSpaceUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(30, JvmCompressedSpaceUsed);
      }
      if (hasJvmCompressedSpaceCommitted) {
        size += pb::CodedOutputStream.ComputeUInt32Size(31, JvmCompressedSpaceCommitted);
      }
      if (hasJvmCompressedSpaceMAX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(32, JvmCompressedSpaceMAX);
      }
      if (hasCurrentLoadedClasses) {
        size += pb::CodedOutputStream.ComputeUInt32Size(33, CurrentLoadedClasses);
      }
      if (hasTotalLoadedClasses) {
        size += pb::CodedOutputStream.ComputeUInt32Size(34, TotalLoadedClasses);
      }
      if (hasGcCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(35, GcCount);
      }
      if (hasSumGCTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(36, SumGCTime);
      }
      if (hasMaxGCTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(37, MaxGCTime);
      }
      if (hasMinGCTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(38, MinGCTime);
      }
      if (hasRunningThreads) {
        size += pb::CodedOutputStream.ComputeUInt32Size(39, RunningThreads);
      }
      if (hasDeadlockThreads) {
        size += pb::CodedOutputStream.ComputeUInt32Size(40, DeadlockThreads);
      }
      if (hasFinishThreads) {
        size += pb::CodedOutputStream.ComputeUInt32Size(41, FinishThreads);
      }
      if (hasBlockThreads) {
        size += pb::CodedOutputStream.ComputeUInt32Size(42, BlockThreads);
      }
      if (hasCpuUsage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(43, CpuUsage);
      }
      if (hasClrUsageHeapSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(44, ClrUsageHeapSize);
      }
      if (hasClrCommittedHeapSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(45, ClrCommittedHeapSize);
      }
      if (hasClrGen0Usage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(46, ClrGen0Usage);
      }
      if (hasClrGen0GcCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(47, ClrGen0GcCount);
      }
      if (hasClrGen1Usage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(48, ClrGen1Usage);
      }
      if (hasClrGen1GcCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(49, ClrGen1GcCount);
      }
      if (hasClrGen2Usage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(50, ClrGen2Usage);
      }
      if (hasClrGen2GcCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(51, ClrGen2GcCount);
      }
      if (hasClrLargeObjectHeapUsage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(52, ClrLargeObjectHeapUsage);
      }
      if (hasClrLargeObjectGcCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(53, ClrLargeObjectGcCount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static VMMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VMMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VMMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VMMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VMMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VMMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VMMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VMMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VMMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VMMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VMMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VMMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<VMMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VMMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VMMetric result;
      
      private VMMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          VMMetric original = result;
          result = new VMMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VMMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.VMMetric.Descriptor; }
      }
      
      public override VMMetric DefaultInstanceForType {
        get { return global::BonreePB.VMMetric.DefaultInstance; }
      }
      
      public override VMMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VMMetric) {
          return MergeFrom((VMMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VMMetric other) {
        if (other == global::BonreePB.VMMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasJvmUsageHeapSize) {
          JvmUsageHeapSize = other.JvmUsageHeapSize;
        }
        if (other.HasJvmMaxHeapSize) {
          JvmMaxHeapSize = other.JvmMaxHeapSize;
        }
        if (other.HasJvmCommittedHeapSize) {
          JvmCommittedHeapSize = other.JvmCommittedHeapSize;
        }
        if (other.HasJvmMajorCollectionsCount) {
          JvmMajorCollectionsCount = other.JvmMajorCollectionsCount;
        }
        if (other.HasJvmSumMajorCollectionsTime) {
          JvmSumMajorCollectionsTime = other.JvmSumMajorCollectionsTime;
        }
        if (other.HasJvmMaxMajorCollectionsTime) {
          JvmMaxMajorCollectionsTime = other.JvmMaxMajorCollectionsTime;
        }
        if (other.HasJvmMinMajorCollectionsTime) {
          JvmMinMajorCollectionsTime = other.JvmMinMajorCollectionsTime;
        }
        if (other.HasJvmMinorCollectionsCount) {
          JvmMinorCollectionsCount = other.JvmMinorCollectionsCount;
        }
        if (other.HasJvmSumMinorCollectionsTime) {
          JvmSumMinorCollectionsTime = other.JvmSumMinorCollectionsTime;
        }
        if (other.HasJvmMaxMinorCollectionsTime) {
          JvmMaxMinorCollectionsTime = other.JvmMaxMinorCollectionsTime;
        }
        if (other.HasJvmMinMinorCollectionsTime) {
          JvmMinMinorCollectionsTime = other.JvmMinMinorCollectionsTime;
        }
        if (other.HasJvmCodeCacheUsed) {
          JvmCodeCacheUsed = other.JvmCodeCacheUsed;
        }
        if (other.HasJvmCodeCacheCommitted) {
          JvmCodeCacheCommitted = other.JvmCodeCacheCommitted;
        }
        if (other.HasJvmCodeCacheMAX) {
          JvmCodeCacheMAX = other.JvmCodeCacheMAX;
        }
        if (other.HasJvmPSEdenSpaceUsed) {
          JvmPSEdenSpaceUsed = other.JvmPSEdenSpaceUsed;
        }
        if (other.HasJvmPSEdenSpaceCommitted) {
          JvmPSEdenSpaceCommitted = other.JvmPSEdenSpaceCommitted;
        }
        if (other.HasJvmPSEdenSpaceMAX) {
          JvmPSEdenSpaceMAX = other.JvmPSEdenSpaceMAX;
        }
        if (other.HasJvmPSOldGenUsed) {
          JvmPSOldGenUsed = other.JvmPSOldGenUsed;
        }
        if (other.HasJvmPSOldGenCommitted) {
          JvmPSOldGenCommitted = other.JvmPSOldGenCommitted;
        }
        if (other.HasJvmPSOldGenMAX) {
          JvmPSOldGenMAX = other.JvmPSOldGenMAX;
        }
        if (other.HasJvmPSPermGenUsed) {
          JvmPSPermGenUsed = other.JvmPSPermGenUsed;
        }
        if (other.HasJvmPSPermGenCommitted) {
          JvmPSPermGenCommitted = other.JvmPSPermGenCommitted;
        }
        if (other.HasJvmPSPermGenMAX) {
          JvmPSPermGenMAX = other.JvmPSPermGenMAX;
        }
        if (other.HasJvmPSSurvivorSpaceUsed) {
          JvmPSSurvivorSpaceUsed = other.JvmPSSurvivorSpaceUsed;
        }
        if (other.HasJvmPSSurvivorSpaceCommitted) {
          JvmPSSurvivorSpaceCommitted = other.JvmPSSurvivorSpaceCommitted;
        }
        if (other.HasJvmPSSurvivorSpaceMAX) {
          JvmPSSurvivorSpaceMAX = other.JvmPSSurvivorSpaceMAX;
        }
        if (other.HasJvmMetaSpaceUsed) {
          JvmMetaSpaceUsed = other.JvmMetaSpaceUsed;
        }
        if (other.HasJvmMetaSpaceCommitted) {
          JvmMetaSpaceCommitted = other.JvmMetaSpaceCommitted;
        }
        if (other.HasJvmMetaSpaceMAX) {
          JvmMetaSpaceMAX = other.JvmMetaSpaceMAX;
        }
        if (other.HasJvmCompressedSpaceUsed) {
          JvmCompressedSpaceUsed = other.JvmCompressedSpaceUsed;
        }
        if (other.HasJvmCompressedSpaceCommitted) {
          JvmCompressedSpaceCommitted = other.JvmCompressedSpaceCommitted;
        }
        if (other.HasJvmCompressedSpaceMAX) {
          JvmCompressedSpaceMAX = other.JvmCompressedSpaceMAX;
        }
        if (other.HasCurrentLoadedClasses) {
          CurrentLoadedClasses = other.CurrentLoadedClasses;
        }
        if (other.HasTotalLoadedClasses) {
          TotalLoadedClasses = other.TotalLoadedClasses;
        }
        if (other.HasGcCount) {
          GcCount = other.GcCount;
        }
        if (other.HasSumGCTime) {
          SumGCTime = other.SumGCTime;
        }
        if (other.HasMaxGCTime) {
          MaxGCTime = other.MaxGCTime;
        }
        if (other.HasMinGCTime) {
          MinGCTime = other.MinGCTime;
        }
        if (other.HasRunningThreads) {
          RunningThreads = other.RunningThreads;
        }
        if (other.HasDeadlockThreads) {
          DeadlockThreads = other.DeadlockThreads;
        }
        if (other.HasFinishThreads) {
          FinishThreads = other.FinishThreads;
        }
        if (other.HasBlockThreads) {
          BlockThreads = other.BlockThreads;
        }
        if (other.HasCpuUsage) {
          CpuUsage = other.CpuUsage;
        }
        if (other.HasClrUsageHeapSize) {
          ClrUsageHeapSize = other.ClrUsageHeapSize;
        }
        if (other.HasClrCommittedHeapSize) {
          ClrCommittedHeapSize = other.ClrCommittedHeapSize;
        }
        if (other.HasClrGen0Usage) {
          ClrGen0Usage = other.ClrGen0Usage;
        }
        if (other.HasClrGen0GcCount) {
          ClrGen0GcCount = other.ClrGen0GcCount;
        }
        if (other.HasClrGen1Usage) {
          ClrGen1Usage = other.ClrGen1Usage;
        }
        if (other.HasClrGen1GcCount) {
          ClrGen1GcCount = other.ClrGen1GcCount;
        }
        if (other.HasClrGen2Usage) {
          ClrGen2Usage = other.ClrGen2Usage;
        }
        if (other.HasClrGen2GcCount) {
          ClrGen2GcCount = other.ClrGen2GcCount;
        }
        if (other.HasClrLargeObjectHeapUsage) {
          ClrLargeObjectHeapUsage = other.ClrLargeObjectHeapUsage;
        }
        if (other.HasClrLargeObjectGcCount) {
          ClrLargeObjectGcCount = other.ClrLargeObjectGcCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vMMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vMMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasJvmUsageHeapSize = input.ReadUInt32(ref result.jvmUsageHeapSize_);
              break;
            }
            case 16: {
              result.hasJvmMaxHeapSize = input.ReadUInt32(ref result.jvmMaxHeapSize_);
              break;
            }
            case 24: {
              result.hasJvmCommittedHeapSize = input.ReadUInt32(ref result.jvmCommittedHeapSize_);
              break;
            }
            case 32: {
              result.hasJvmMajorCollectionsCount = input.ReadUInt32(ref result.jvmMajorCollectionsCount_);
              break;
            }
            case 40: {
              result.hasJvmSumMajorCollectionsTime = input.ReadUInt32(ref result.jvmSumMajorCollectionsTime_);
              break;
            }
            case 48: {
              result.hasJvmMaxMajorCollectionsTime = input.ReadUInt32(ref result.jvmMaxMajorCollectionsTime_);
              break;
            }
            case 56: {
              result.hasJvmMinMajorCollectionsTime = input.ReadUInt32(ref result.jvmMinMajorCollectionsTime_);
              break;
            }
            case 64: {
              result.hasJvmMinorCollectionsCount = input.ReadUInt32(ref result.jvmMinorCollectionsCount_);
              break;
            }
            case 72: {
              result.hasJvmSumMinorCollectionsTime = input.ReadUInt32(ref result.jvmSumMinorCollectionsTime_);
              break;
            }
            case 80: {
              result.hasJvmMaxMinorCollectionsTime = input.ReadUInt32(ref result.jvmMaxMinorCollectionsTime_);
              break;
            }
            case 88: {
              result.hasJvmMinMinorCollectionsTime = input.ReadUInt32(ref result.jvmMinMinorCollectionsTime_);
              break;
            }
            case 96: {
              result.hasJvmCodeCacheUsed = input.ReadUInt32(ref result.jvmCodeCacheUsed_);
              break;
            }
            case 104: {
              result.hasJvmCodeCacheCommitted = input.ReadUInt32(ref result.jvmCodeCacheCommitted_);
              break;
            }
            case 112: {
              result.hasJvmCodeCacheMAX = input.ReadUInt32(ref result.jvmCodeCacheMAX_);
              break;
            }
            case 120: {
              result.hasJvmPSEdenSpaceUsed = input.ReadUInt32(ref result.jvmPSEdenSpaceUsed_);
              break;
            }
            case 128: {
              result.hasJvmPSEdenSpaceCommitted = input.ReadUInt32(ref result.jvmPSEdenSpaceCommitted_);
              break;
            }
            case 136: {
              result.hasJvmPSEdenSpaceMAX = input.ReadUInt32(ref result.jvmPSEdenSpaceMAX_);
              break;
            }
            case 144: {
              result.hasJvmPSOldGenUsed = input.ReadUInt32(ref result.jvmPSOldGenUsed_);
              break;
            }
            case 152: {
              result.hasJvmPSOldGenCommitted = input.ReadUInt32(ref result.jvmPSOldGenCommitted_);
              break;
            }
            case 160: {
              result.hasJvmPSOldGenMAX = input.ReadUInt32(ref result.jvmPSOldGenMAX_);
              break;
            }
            case 168: {
              result.hasJvmPSPermGenUsed = input.ReadUInt32(ref result.jvmPSPermGenUsed_);
              break;
            }
            case 176: {
              result.hasJvmPSPermGenCommitted = input.ReadUInt32(ref result.jvmPSPermGenCommitted_);
              break;
            }
            case 184: {
              result.hasJvmPSPermGenMAX = input.ReadUInt32(ref result.jvmPSPermGenMAX_);
              break;
            }
            case 192: {
              result.hasJvmPSSurvivorSpaceUsed = input.ReadUInt32(ref result.jvmPSSurvivorSpaceUsed_);
              break;
            }
            case 200: {
              result.hasJvmPSSurvivorSpaceCommitted = input.ReadUInt32(ref result.jvmPSSurvivorSpaceCommitted_);
              break;
            }
            case 208: {
              result.hasJvmPSSurvivorSpaceMAX = input.ReadUInt32(ref result.jvmPSSurvivorSpaceMAX_);
              break;
            }
            case 216: {
              result.hasJvmMetaSpaceUsed = input.ReadUInt32(ref result.jvmMetaSpaceUsed_);
              break;
            }
            case 224: {
              result.hasJvmMetaSpaceCommitted = input.ReadUInt32(ref result.jvmMetaSpaceCommitted_);
              break;
            }
            case 232: {
              result.hasJvmMetaSpaceMAX = input.ReadUInt32(ref result.jvmMetaSpaceMAX_);
              break;
            }
            case 240: {
              result.hasJvmCompressedSpaceUsed = input.ReadUInt32(ref result.jvmCompressedSpaceUsed_);
              break;
            }
            case 248: {
              result.hasJvmCompressedSpaceCommitted = input.ReadUInt32(ref result.jvmCompressedSpaceCommitted_);
              break;
            }
            case 256: {
              result.hasJvmCompressedSpaceMAX = input.ReadUInt32(ref result.jvmCompressedSpaceMAX_);
              break;
            }
            case 264: {
              result.hasCurrentLoadedClasses = input.ReadUInt32(ref result.currentLoadedClasses_);
              break;
            }
            case 272: {
              result.hasTotalLoadedClasses = input.ReadUInt32(ref result.totalLoadedClasses_);
              break;
            }
            case 280: {
              result.hasGcCount = input.ReadUInt32(ref result.gcCount_);
              break;
            }
            case 288: {
              result.hasSumGCTime = input.ReadUInt32(ref result.sumGCTime_);
              break;
            }
            case 296: {
              result.hasMaxGCTime = input.ReadUInt32(ref result.maxGCTime_);
              break;
            }
            case 304: {
              result.hasMinGCTime = input.ReadUInt32(ref result.minGCTime_);
              break;
            }
            case 312: {
              result.hasRunningThreads = input.ReadUInt32(ref result.runningThreads_);
              break;
            }
            case 320: {
              result.hasDeadlockThreads = input.ReadUInt32(ref result.deadlockThreads_);
              break;
            }
            case 328: {
              result.hasFinishThreads = input.ReadUInt32(ref result.finishThreads_);
              break;
            }
            case 336: {
              result.hasBlockThreads = input.ReadUInt32(ref result.blockThreads_);
              break;
            }
            case 344: {
              result.hasCpuUsage = input.ReadUInt32(ref result.cpuUsage_);
              break;
            }
            case 352: {
              result.hasClrUsageHeapSize = input.ReadUInt32(ref result.clrUsageHeapSize_);
              break;
            }
            case 360: {
              result.hasClrCommittedHeapSize = input.ReadUInt32(ref result.clrCommittedHeapSize_);
              break;
            }
            case 368: {
              result.hasClrGen0Usage = input.ReadUInt32(ref result.clrGen0Usage_);
              break;
            }
            case 376: {
              result.hasClrGen0GcCount = input.ReadUInt32(ref result.clrGen0GcCount_);
              break;
            }
            case 384: {
              result.hasClrGen1Usage = input.ReadUInt32(ref result.clrGen1Usage_);
              break;
            }
            case 392: {
              result.hasClrGen1GcCount = input.ReadUInt32(ref result.clrGen1GcCount_);
              break;
            }
            case 400: {
              result.hasClrGen2Usage = input.ReadUInt32(ref result.clrGen2Usage_);
              break;
            }
            case 408: {
              result.hasClrGen2GcCount = input.ReadUInt32(ref result.clrGen2GcCount_);
              break;
            }
            case 416: {
              result.hasClrLargeObjectHeapUsage = input.ReadUInt32(ref result.clrLargeObjectHeapUsage_);
              break;
            }
            case 424: {
              result.hasClrLargeObjectGcCount = input.ReadUInt32(ref result.clrLargeObjectGcCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasJvmUsageHeapSize {
        get { return result.hasJvmUsageHeapSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmUsageHeapSize {
        get { return result.JvmUsageHeapSize; }
        set { SetJvmUsageHeapSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmUsageHeapSize(uint value) {
        PrepareBuilder();
        result.hasJvmUsageHeapSize = true;
        result.jvmUsageHeapSize_ = value;
        return this;
      }
      public Builder ClearJvmUsageHeapSize() {
        PrepareBuilder();
        result.hasJvmUsageHeapSize = false;
        result.jvmUsageHeapSize_ = 0;
        return this;
      }
      
      public bool HasJvmMaxHeapSize {
        get { return result.hasJvmMaxHeapSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMaxHeapSize {
        get { return result.JvmMaxHeapSize; }
        set { SetJvmMaxHeapSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMaxHeapSize(uint value) {
        PrepareBuilder();
        result.hasJvmMaxHeapSize = true;
        result.jvmMaxHeapSize_ = value;
        return this;
      }
      public Builder ClearJvmMaxHeapSize() {
        PrepareBuilder();
        result.hasJvmMaxHeapSize = false;
        result.jvmMaxHeapSize_ = 0;
        return this;
      }
      
      public bool HasJvmCommittedHeapSize {
        get { return result.hasJvmCommittedHeapSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmCommittedHeapSize {
        get { return result.JvmCommittedHeapSize; }
        set { SetJvmCommittedHeapSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmCommittedHeapSize(uint value) {
        PrepareBuilder();
        result.hasJvmCommittedHeapSize = true;
        result.jvmCommittedHeapSize_ = value;
        return this;
      }
      public Builder ClearJvmCommittedHeapSize() {
        PrepareBuilder();
        result.hasJvmCommittedHeapSize = false;
        result.jvmCommittedHeapSize_ = 0;
        return this;
      }
      
      public bool HasJvmMajorCollectionsCount {
        get { return result.hasJvmMajorCollectionsCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMajorCollectionsCount {
        get { return result.JvmMajorCollectionsCount; }
        set { SetJvmMajorCollectionsCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMajorCollectionsCount(uint value) {
        PrepareBuilder();
        result.hasJvmMajorCollectionsCount = true;
        result.jvmMajorCollectionsCount_ = value;
        return this;
      }
      public Builder ClearJvmMajorCollectionsCount() {
        PrepareBuilder();
        result.hasJvmMajorCollectionsCount = false;
        result.jvmMajorCollectionsCount_ = 0;
        return this;
      }
      
      public bool HasJvmSumMajorCollectionsTime {
        get { return result.hasJvmSumMajorCollectionsTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmSumMajorCollectionsTime {
        get { return result.JvmSumMajorCollectionsTime; }
        set { SetJvmSumMajorCollectionsTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmSumMajorCollectionsTime(uint value) {
        PrepareBuilder();
        result.hasJvmSumMajorCollectionsTime = true;
        result.jvmSumMajorCollectionsTime_ = value;
        return this;
      }
      public Builder ClearJvmSumMajorCollectionsTime() {
        PrepareBuilder();
        result.hasJvmSumMajorCollectionsTime = false;
        result.jvmSumMajorCollectionsTime_ = 0;
        return this;
      }
      
      public bool HasJvmMaxMajorCollectionsTime {
        get { return result.hasJvmMaxMajorCollectionsTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMaxMajorCollectionsTime {
        get { return result.JvmMaxMajorCollectionsTime; }
        set { SetJvmMaxMajorCollectionsTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMaxMajorCollectionsTime(uint value) {
        PrepareBuilder();
        result.hasJvmMaxMajorCollectionsTime = true;
        result.jvmMaxMajorCollectionsTime_ = value;
        return this;
      }
      public Builder ClearJvmMaxMajorCollectionsTime() {
        PrepareBuilder();
        result.hasJvmMaxMajorCollectionsTime = false;
        result.jvmMaxMajorCollectionsTime_ = 0;
        return this;
      }
      
      public bool HasJvmMinMajorCollectionsTime {
        get { return result.hasJvmMinMajorCollectionsTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMinMajorCollectionsTime {
        get { return result.JvmMinMajorCollectionsTime; }
        set { SetJvmMinMajorCollectionsTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMinMajorCollectionsTime(uint value) {
        PrepareBuilder();
        result.hasJvmMinMajorCollectionsTime = true;
        result.jvmMinMajorCollectionsTime_ = value;
        return this;
      }
      public Builder ClearJvmMinMajorCollectionsTime() {
        PrepareBuilder();
        result.hasJvmMinMajorCollectionsTime = false;
        result.jvmMinMajorCollectionsTime_ = 0;
        return this;
      }
      
      public bool HasJvmMinorCollectionsCount {
        get { return result.hasJvmMinorCollectionsCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMinorCollectionsCount {
        get { return result.JvmMinorCollectionsCount; }
        set { SetJvmMinorCollectionsCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMinorCollectionsCount(uint value) {
        PrepareBuilder();
        result.hasJvmMinorCollectionsCount = true;
        result.jvmMinorCollectionsCount_ = value;
        return this;
      }
      public Builder ClearJvmMinorCollectionsCount() {
        PrepareBuilder();
        result.hasJvmMinorCollectionsCount = false;
        result.jvmMinorCollectionsCount_ = 0;
        return this;
      }
      
      public bool HasJvmSumMinorCollectionsTime {
        get { return result.hasJvmSumMinorCollectionsTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmSumMinorCollectionsTime {
        get { return result.JvmSumMinorCollectionsTime; }
        set { SetJvmSumMinorCollectionsTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmSumMinorCollectionsTime(uint value) {
        PrepareBuilder();
        result.hasJvmSumMinorCollectionsTime = true;
        result.jvmSumMinorCollectionsTime_ = value;
        return this;
      }
      public Builder ClearJvmSumMinorCollectionsTime() {
        PrepareBuilder();
        result.hasJvmSumMinorCollectionsTime = false;
        result.jvmSumMinorCollectionsTime_ = 0;
        return this;
      }
      
      public bool HasJvmMaxMinorCollectionsTime {
        get { return result.hasJvmMaxMinorCollectionsTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMaxMinorCollectionsTime {
        get { return result.JvmMaxMinorCollectionsTime; }
        set { SetJvmMaxMinorCollectionsTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMaxMinorCollectionsTime(uint value) {
        PrepareBuilder();
        result.hasJvmMaxMinorCollectionsTime = true;
        result.jvmMaxMinorCollectionsTime_ = value;
        return this;
      }
      public Builder ClearJvmMaxMinorCollectionsTime() {
        PrepareBuilder();
        result.hasJvmMaxMinorCollectionsTime = false;
        result.jvmMaxMinorCollectionsTime_ = 0;
        return this;
      }
      
      public bool HasJvmMinMinorCollectionsTime {
        get { return result.hasJvmMinMinorCollectionsTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMinMinorCollectionsTime {
        get { return result.JvmMinMinorCollectionsTime; }
        set { SetJvmMinMinorCollectionsTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMinMinorCollectionsTime(uint value) {
        PrepareBuilder();
        result.hasJvmMinMinorCollectionsTime = true;
        result.jvmMinMinorCollectionsTime_ = value;
        return this;
      }
      public Builder ClearJvmMinMinorCollectionsTime() {
        PrepareBuilder();
        result.hasJvmMinMinorCollectionsTime = false;
        result.jvmMinMinorCollectionsTime_ = 0;
        return this;
      }
      
      public bool HasJvmCodeCacheUsed {
        get { return result.hasJvmCodeCacheUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmCodeCacheUsed {
        get { return result.JvmCodeCacheUsed; }
        set { SetJvmCodeCacheUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmCodeCacheUsed(uint value) {
        PrepareBuilder();
        result.hasJvmCodeCacheUsed = true;
        result.jvmCodeCacheUsed_ = value;
        return this;
      }
      public Builder ClearJvmCodeCacheUsed() {
        PrepareBuilder();
        result.hasJvmCodeCacheUsed = false;
        result.jvmCodeCacheUsed_ = 0;
        return this;
      }
      
      public bool HasJvmCodeCacheCommitted {
        get { return result.hasJvmCodeCacheCommitted; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmCodeCacheCommitted {
        get { return result.JvmCodeCacheCommitted; }
        set { SetJvmCodeCacheCommitted(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmCodeCacheCommitted(uint value) {
        PrepareBuilder();
        result.hasJvmCodeCacheCommitted = true;
        result.jvmCodeCacheCommitted_ = value;
        return this;
      }
      public Builder ClearJvmCodeCacheCommitted() {
        PrepareBuilder();
        result.hasJvmCodeCacheCommitted = false;
        result.jvmCodeCacheCommitted_ = 0;
        return this;
      }
      
      public bool HasJvmCodeCacheMAX {
        get { return result.hasJvmCodeCacheMAX; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmCodeCacheMAX {
        get { return result.JvmCodeCacheMAX; }
        set { SetJvmCodeCacheMAX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmCodeCacheMAX(uint value) {
        PrepareBuilder();
        result.hasJvmCodeCacheMAX = true;
        result.jvmCodeCacheMAX_ = value;
        return this;
      }
      public Builder ClearJvmCodeCacheMAX() {
        PrepareBuilder();
        result.hasJvmCodeCacheMAX = false;
        result.jvmCodeCacheMAX_ = 0;
        return this;
      }
      
      public bool HasJvmPSEdenSpaceUsed {
        get { return result.hasJvmPSEdenSpaceUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSEdenSpaceUsed {
        get { return result.JvmPSEdenSpaceUsed; }
        set { SetJvmPSEdenSpaceUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSEdenSpaceUsed(uint value) {
        PrepareBuilder();
        result.hasJvmPSEdenSpaceUsed = true;
        result.jvmPSEdenSpaceUsed_ = value;
        return this;
      }
      public Builder ClearJvmPSEdenSpaceUsed() {
        PrepareBuilder();
        result.hasJvmPSEdenSpaceUsed = false;
        result.jvmPSEdenSpaceUsed_ = 0;
        return this;
      }
      
      public bool HasJvmPSEdenSpaceCommitted {
        get { return result.hasJvmPSEdenSpaceCommitted; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSEdenSpaceCommitted {
        get { return result.JvmPSEdenSpaceCommitted; }
        set { SetJvmPSEdenSpaceCommitted(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSEdenSpaceCommitted(uint value) {
        PrepareBuilder();
        result.hasJvmPSEdenSpaceCommitted = true;
        result.jvmPSEdenSpaceCommitted_ = value;
        return this;
      }
      public Builder ClearJvmPSEdenSpaceCommitted() {
        PrepareBuilder();
        result.hasJvmPSEdenSpaceCommitted = false;
        result.jvmPSEdenSpaceCommitted_ = 0;
        return this;
      }
      
      public bool HasJvmPSEdenSpaceMAX {
        get { return result.hasJvmPSEdenSpaceMAX; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSEdenSpaceMAX {
        get { return result.JvmPSEdenSpaceMAX; }
        set { SetJvmPSEdenSpaceMAX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSEdenSpaceMAX(uint value) {
        PrepareBuilder();
        result.hasJvmPSEdenSpaceMAX = true;
        result.jvmPSEdenSpaceMAX_ = value;
        return this;
      }
      public Builder ClearJvmPSEdenSpaceMAX() {
        PrepareBuilder();
        result.hasJvmPSEdenSpaceMAX = false;
        result.jvmPSEdenSpaceMAX_ = 0;
        return this;
      }
      
      public bool HasJvmPSOldGenUsed {
        get { return result.hasJvmPSOldGenUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSOldGenUsed {
        get { return result.JvmPSOldGenUsed; }
        set { SetJvmPSOldGenUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSOldGenUsed(uint value) {
        PrepareBuilder();
        result.hasJvmPSOldGenUsed = true;
        result.jvmPSOldGenUsed_ = value;
        return this;
      }
      public Builder ClearJvmPSOldGenUsed() {
        PrepareBuilder();
        result.hasJvmPSOldGenUsed = false;
        result.jvmPSOldGenUsed_ = 0;
        return this;
      }
      
      public bool HasJvmPSOldGenCommitted {
        get { return result.hasJvmPSOldGenCommitted; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSOldGenCommitted {
        get { return result.JvmPSOldGenCommitted; }
        set { SetJvmPSOldGenCommitted(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSOldGenCommitted(uint value) {
        PrepareBuilder();
        result.hasJvmPSOldGenCommitted = true;
        result.jvmPSOldGenCommitted_ = value;
        return this;
      }
      public Builder ClearJvmPSOldGenCommitted() {
        PrepareBuilder();
        result.hasJvmPSOldGenCommitted = false;
        result.jvmPSOldGenCommitted_ = 0;
        return this;
      }
      
      public bool HasJvmPSOldGenMAX {
        get { return result.hasJvmPSOldGenMAX; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSOldGenMAX {
        get { return result.JvmPSOldGenMAX; }
        set { SetJvmPSOldGenMAX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSOldGenMAX(uint value) {
        PrepareBuilder();
        result.hasJvmPSOldGenMAX = true;
        result.jvmPSOldGenMAX_ = value;
        return this;
      }
      public Builder ClearJvmPSOldGenMAX() {
        PrepareBuilder();
        result.hasJvmPSOldGenMAX = false;
        result.jvmPSOldGenMAX_ = 0;
        return this;
      }
      
      public bool HasJvmPSPermGenUsed {
        get { return result.hasJvmPSPermGenUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSPermGenUsed {
        get { return result.JvmPSPermGenUsed; }
        set { SetJvmPSPermGenUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSPermGenUsed(uint value) {
        PrepareBuilder();
        result.hasJvmPSPermGenUsed = true;
        result.jvmPSPermGenUsed_ = value;
        return this;
      }
      public Builder ClearJvmPSPermGenUsed() {
        PrepareBuilder();
        result.hasJvmPSPermGenUsed = false;
        result.jvmPSPermGenUsed_ = 0;
        return this;
      }
      
      public bool HasJvmPSPermGenCommitted {
        get { return result.hasJvmPSPermGenCommitted; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSPermGenCommitted {
        get { return result.JvmPSPermGenCommitted; }
        set { SetJvmPSPermGenCommitted(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSPermGenCommitted(uint value) {
        PrepareBuilder();
        result.hasJvmPSPermGenCommitted = true;
        result.jvmPSPermGenCommitted_ = value;
        return this;
      }
      public Builder ClearJvmPSPermGenCommitted() {
        PrepareBuilder();
        result.hasJvmPSPermGenCommitted = false;
        result.jvmPSPermGenCommitted_ = 0;
        return this;
      }
      
      public bool HasJvmPSPermGenMAX {
        get { return result.hasJvmPSPermGenMAX; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSPermGenMAX {
        get { return result.JvmPSPermGenMAX; }
        set { SetJvmPSPermGenMAX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSPermGenMAX(uint value) {
        PrepareBuilder();
        result.hasJvmPSPermGenMAX = true;
        result.jvmPSPermGenMAX_ = value;
        return this;
      }
      public Builder ClearJvmPSPermGenMAX() {
        PrepareBuilder();
        result.hasJvmPSPermGenMAX = false;
        result.jvmPSPermGenMAX_ = 0;
        return this;
      }
      
      public bool HasJvmPSSurvivorSpaceUsed {
        get { return result.hasJvmPSSurvivorSpaceUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSSurvivorSpaceUsed {
        get { return result.JvmPSSurvivorSpaceUsed; }
        set { SetJvmPSSurvivorSpaceUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSSurvivorSpaceUsed(uint value) {
        PrepareBuilder();
        result.hasJvmPSSurvivorSpaceUsed = true;
        result.jvmPSSurvivorSpaceUsed_ = value;
        return this;
      }
      public Builder ClearJvmPSSurvivorSpaceUsed() {
        PrepareBuilder();
        result.hasJvmPSSurvivorSpaceUsed = false;
        result.jvmPSSurvivorSpaceUsed_ = 0;
        return this;
      }
      
      public bool HasJvmPSSurvivorSpaceCommitted {
        get { return result.hasJvmPSSurvivorSpaceCommitted; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSSurvivorSpaceCommitted {
        get { return result.JvmPSSurvivorSpaceCommitted; }
        set { SetJvmPSSurvivorSpaceCommitted(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSSurvivorSpaceCommitted(uint value) {
        PrepareBuilder();
        result.hasJvmPSSurvivorSpaceCommitted = true;
        result.jvmPSSurvivorSpaceCommitted_ = value;
        return this;
      }
      public Builder ClearJvmPSSurvivorSpaceCommitted() {
        PrepareBuilder();
        result.hasJvmPSSurvivorSpaceCommitted = false;
        result.jvmPSSurvivorSpaceCommitted_ = 0;
        return this;
      }
      
      public bool HasJvmPSSurvivorSpaceMAX {
        get { return result.hasJvmPSSurvivorSpaceMAX; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmPSSurvivorSpaceMAX {
        get { return result.JvmPSSurvivorSpaceMAX; }
        set { SetJvmPSSurvivorSpaceMAX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmPSSurvivorSpaceMAX(uint value) {
        PrepareBuilder();
        result.hasJvmPSSurvivorSpaceMAX = true;
        result.jvmPSSurvivorSpaceMAX_ = value;
        return this;
      }
      public Builder ClearJvmPSSurvivorSpaceMAX() {
        PrepareBuilder();
        result.hasJvmPSSurvivorSpaceMAX = false;
        result.jvmPSSurvivorSpaceMAX_ = 0;
        return this;
      }
      
      public bool HasJvmMetaSpaceUsed {
        get { return result.hasJvmMetaSpaceUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMetaSpaceUsed {
        get { return result.JvmMetaSpaceUsed; }
        set { SetJvmMetaSpaceUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMetaSpaceUsed(uint value) {
        PrepareBuilder();
        result.hasJvmMetaSpaceUsed = true;
        result.jvmMetaSpaceUsed_ = value;
        return this;
      }
      public Builder ClearJvmMetaSpaceUsed() {
        PrepareBuilder();
        result.hasJvmMetaSpaceUsed = false;
        result.jvmMetaSpaceUsed_ = 0;
        return this;
      }
      
      public bool HasJvmMetaSpaceCommitted {
        get { return result.hasJvmMetaSpaceCommitted; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMetaSpaceCommitted {
        get { return result.JvmMetaSpaceCommitted; }
        set { SetJvmMetaSpaceCommitted(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMetaSpaceCommitted(uint value) {
        PrepareBuilder();
        result.hasJvmMetaSpaceCommitted = true;
        result.jvmMetaSpaceCommitted_ = value;
        return this;
      }
      public Builder ClearJvmMetaSpaceCommitted() {
        PrepareBuilder();
        result.hasJvmMetaSpaceCommitted = false;
        result.jvmMetaSpaceCommitted_ = 0;
        return this;
      }
      
      public bool HasJvmMetaSpaceMAX {
        get { return result.hasJvmMetaSpaceMAX; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmMetaSpaceMAX {
        get { return result.JvmMetaSpaceMAX; }
        set { SetJvmMetaSpaceMAX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmMetaSpaceMAX(uint value) {
        PrepareBuilder();
        result.hasJvmMetaSpaceMAX = true;
        result.jvmMetaSpaceMAX_ = value;
        return this;
      }
      public Builder ClearJvmMetaSpaceMAX() {
        PrepareBuilder();
        result.hasJvmMetaSpaceMAX = false;
        result.jvmMetaSpaceMAX_ = 0;
        return this;
      }
      
      public bool HasJvmCompressedSpaceUsed {
        get { return result.hasJvmCompressedSpaceUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmCompressedSpaceUsed {
        get { return result.JvmCompressedSpaceUsed; }
        set { SetJvmCompressedSpaceUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmCompressedSpaceUsed(uint value) {
        PrepareBuilder();
        result.hasJvmCompressedSpaceUsed = true;
        result.jvmCompressedSpaceUsed_ = value;
        return this;
      }
      public Builder ClearJvmCompressedSpaceUsed() {
        PrepareBuilder();
        result.hasJvmCompressedSpaceUsed = false;
        result.jvmCompressedSpaceUsed_ = 0;
        return this;
      }
      
      public bool HasJvmCompressedSpaceCommitted {
        get { return result.hasJvmCompressedSpaceCommitted; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmCompressedSpaceCommitted {
        get { return result.JvmCompressedSpaceCommitted; }
        set { SetJvmCompressedSpaceCommitted(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmCompressedSpaceCommitted(uint value) {
        PrepareBuilder();
        result.hasJvmCompressedSpaceCommitted = true;
        result.jvmCompressedSpaceCommitted_ = value;
        return this;
      }
      public Builder ClearJvmCompressedSpaceCommitted() {
        PrepareBuilder();
        result.hasJvmCompressedSpaceCommitted = false;
        result.jvmCompressedSpaceCommitted_ = 0;
        return this;
      }
      
      public bool HasJvmCompressedSpaceMAX {
        get { return result.hasJvmCompressedSpaceMAX; }
      }
      [global::System.CLSCompliant(false)]
      public uint JvmCompressedSpaceMAX {
        get { return result.JvmCompressedSpaceMAX; }
        set { SetJvmCompressedSpaceMAX(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJvmCompressedSpaceMAX(uint value) {
        PrepareBuilder();
        result.hasJvmCompressedSpaceMAX = true;
        result.jvmCompressedSpaceMAX_ = value;
        return this;
      }
      public Builder ClearJvmCompressedSpaceMAX() {
        PrepareBuilder();
        result.hasJvmCompressedSpaceMAX = false;
        result.jvmCompressedSpaceMAX_ = 0;
        return this;
      }
      
      public bool HasCurrentLoadedClasses {
        get { return result.hasCurrentLoadedClasses; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurrentLoadedClasses {
        get { return result.CurrentLoadedClasses; }
        set { SetCurrentLoadedClasses(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurrentLoadedClasses(uint value) {
        PrepareBuilder();
        result.hasCurrentLoadedClasses = true;
        result.currentLoadedClasses_ = value;
        return this;
      }
      public Builder ClearCurrentLoadedClasses() {
        PrepareBuilder();
        result.hasCurrentLoadedClasses = false;
        result.currentLoadedClasses_ = 0;
        return this;
      }
      
      public bool HasTotalLoadedClasses {
        get { return result.hasTotalLoadedClasses; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalLoadedClasses {
        get { return result.TotalLoadedClasses; }
        set { SetTotalLoadedClasses(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalLoadedClasses(uint value) {
        PrepareBuilder();
        result.hasTotalLoadedClasses = true;
        result.totalLoadedClasses_ = value;
        return this;
      }
      public Builder ClearTotalLoadedClasses() {
        PrepareBuilder();
        result.hasTotalLoadedClasses = false;
        result.totalLoadedClasses_ = 0;
        return this;
      }
      
      public bool HasGcCount {
        get { return result.hasGcCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GcCount {
        get { return result.GcCount; }
        set { SetGcCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGcCount(uint value) {
        PrepareBuilder();
        result.hasGcCount = true;
        result.gcCount_ = value;
        return this;
      }
      public Builder ClearGcCount() {
        PrepareBuilder();
        result.hasGcCount = false;
        result.gcCount_ = 0;
        return this;
      }
      
      public bool HasSumGCTime {
        get { return result.hasSumGCTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint SumGCTime {
        get { return result.SumGCTime; }
        set { SetSumGCTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSumGCTime(uint value) {
        PrepareBuilder();
        result.hasSumGCTime = true;
        result.sumGCTime_ = value;
        return this;
      }
      public Builder ClearSumGCTime() {
        PrepareBuilder();
        result.hasSumGCTime = false;
        result.sumGCTime_ = 0;
        return this;
      }
      
      public bool HasMaxGCTime {
        get { return result.hasMaxGCTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxGCTime {
        get { return result.MaxGCTime; }
        set { SetMaxGCTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxGCTime(uint value) {
        PrepareBuilder();
        result.hasMaxGCTime = true;
        result.maxGCTime_ = value;
        return this;
      }
      public Builder ClearMaxGCTime() {
        PrepareBuilder();
        result.hasMaxGCTime = false;
        result.maxGCTime_ = 0;
        return this;
      }
      
      public bool HasMinGCTime {
        get { return result.hasMinGCTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MinGCTime {
        get { return result.MinGCTime; }
        set { SetMinGCTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinGCTime(uint value) {
        PrepareBuilder();
        result.hasMinGCTime = true;
        result.minGCTime_ = value;
        return this;
      }
      public Builder ClearMinGCTime() {
        PrepareBuilder();
        result.hasMinGCTime = false;
        result.minGCTime_ = 0;
        return this;
      }
      
      public bool HasRunningThreads {
        get { return result.hasRunningThreads; }
      }
      [global::System.CLSCompliant(false)]
      public uint RunningThreads {
        get { return result.RunningThreads; }
        set { SetRunningThreads(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRunningThreads(uint value) {
        PrepareBuilder();
        result.hasRunningThreads = true;
        result.runningThreads_ = value;
        return this;
      }
      public Builder ClearRunningThreads() {
        PrepareBuilder();
        result.hasRunningThreads = false;
        result.runningThreads_ = 0;
        return this;
      }
      
      public bool HasDeadlockThreads {
        get { return result.hasDeadlockThreads; }
      }
      [global::System.CLSCompliant(false)]
      public uint DeadlockThreads {
        get { return result.DeadlockThreads; }
        set { SetDeadlockThreads(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDeadlockThreads(uint value) {
        PrepareBuilder();
        result.hasDeadlockThreads = true;
        result.deadlockThreads_ = value;
        return this;
      }
      public Builder ClearDeadlockThreads() {
        PrepareBuilder();
        result.hasDeadlockThreads = false;
        result.deadlockThreads_ = 0;
        return this;
      }
      
      public bool HasFinishThreads {
        get { return result.hasFinishThreads; }
      }
      [global::System.CLSCompliant(false)]
      public uint FinishThreads {
        get { return result.FinishThreads; }
        set { SetFinishThreads(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFinishThreads(uint value) {
        PrepareBuilder();
        result.hasFinishThreads = true;
        result.finishThreads_ = value;
        return this;
      }
      public Builder ClearFinishThreads() {
        PrepareBuilder();
        result.hasFinishThreads = false;
        result.finishThreads_ = 0;
        return this;
      }
      
      public bool HasBlockThreads {
        get { return result.hasBlockThreads; }
      }
      [global::System.CLSCompliant(false)]
      public uint BlockThreads {
        get { return result.BlockThreads; }
        set { SetBlockThreads(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBlockThreads(uint value) {
        PrepareBuilder();
        result.hasBlockThreads = true;
        result.blockThreads_ = value;
        return this;
      }
      public Builder ClearBlockThreads() {
        PrepareBuilder();
        result.hasBlockThreads = false;
        result.blockThreads_ = 0;
        return this;
      }
      
      public bool HasCpuUsage {
        get { return result.hasCpuUsage; }
      }
      [global::System.CLSCompliant(false)]
      public uint CpuUsage {
        get { return result.CpuUsage; }
        set { SetCpuUsage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCpuUsage(uint value) {
        PrepareBuilder();
        result.hasCpuUsage = true;
        result.cpuUsage_ = value;
        return this;
      }
      public Builder ClearCpuUsage() {
        PrepareBuilder();
        result.hasCpuUsage = false;
        result.cpuUsage_ = 0;
        return this;
      }
      
      public bool HasClrUsageHeapSize {
        get { return result.hasClrUsageHeapSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrUsageHeapSize {
        get { return result.ClrUsageHeapSize; }
        set { SetClrUsageHeapSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrUsageHeapSize(uint value) {
        PrepareBuilder();
        result.hasClrUsageHeapSize = true;
        result.clrUsageHeapSize_ = value;
        return this;
      }
      public Builder ClearClrUsageHeapSize() {
        PrepareBuilder();
        result.hasClrUsageHeapSize = false;
        result.clrUsageHeapSize_ = 0;
        return this;
      }
      
      public bool HasClrCommittedHeapSize {
        get { return result.hasClrCommittedHeapSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrCommittedHeapSize {
        get { return result.ClrCommittedHeapSize; }
        set { SetClrCommittedHeapSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrCommittedHeapSize(uint value) {
        PrepareBuilder();
        result.hasClrCommittedHeapSize = true;
        result.clrCommittedHeapSize_ = value;
        return this;
      }
      public Builder ClearClrCommittedHeapSize() {
        PrepareBuilder();
        result.hasClrCommittedHeapSize = false;
        result.clrCommittedHeapSize_ = 0;
        return this;
      }
      
      public bool HasClrGen0Usage {
        get { return result.hasClrGen0Usage; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrGen0Usage {
        get { return result.ClrGen0Usage; }
        set { SetClrGen0Usage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrGen0Usage(uint value) {
        PrepareBuilder();
        result.hasClrGen0Usage = true;
        result.clrGen0Usage_ = value;
        return this;
      }
      public Builder ClearClrGen0Usage() {
        PrepareBuilder();
        result.hasClrGen0Usage = false;
        result.clrGen0Usage_ = 0;
        return this;
      }
      
      public bool HasClrGen0GcCount {
        get { return result.hasClrGen0GcCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrGen0GcCount {
        get { return result.ClrGen0GcCount; }
        set { SetClrGen0GcCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrGen0GcCount(uint value) {
        PrepareBuilder();
        result.hasClrGen0GcCount = true;
        result.clrGen0GcCount_ = value;
        return this;
      }
      public Builder ClearClrGen0GcCount() {
        PrepareBuilder();
        result.hasClrGen0GcCount = false;
        result.clrGen0GcCount_ = 0;
        return this;
      }
      
      public bool HasClrGen1Usage {
        get { return result.hasClrGen1Usage; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrGen1Usage {
        get { return result.ClrGen1Usage; }
        set { SetClrGen1Usage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrGen1Usage(uint value) {
        PrepareBuilder();
        result.hasClrGen1Usage = true;
        result.clrGen1Usage_ = value;
        return this;
      }
      public Builder ClearClrGen1Usage() {
        PrepareBuilder();
        result.hasClrGen1Usage = false;
        result.clrGen1Usage_ = 0;
        return this;
      }
      
      public bool HasClrGen1GcCount {
        get { return result.hasClrGen1GcCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrGen1GcCount {
        get { return result.ClrGen1GcCount; }
        set { SetClrGen1GcCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrGen1GcCount(uint value) {
        PrepareBuilder();
        result.hasClrGen1GcCount = true;
        result.clrGen1GcCount_ = value;
        return this;
      }
      public Builder ClearClrGen1GcCount() {
        PrepareBuilder();
        result.hasClrGen1GcCount = false;
        result.clrGen1GcCount_ = 0;
        return this;
      }
      
      public bool HasClrGen2Usage {
        get { return result.hasClrGen2Usage; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrGen2Usage {
        get { return result.ClrGen2Usage; }
        set { SetClrGen2Usage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrGen2Usage(uint value) {
        PrepareBuilder();
        result.hasClrGen2Usage = true;
        result.clrGen2Usage_ = value;
        return this;
      }
      public Builder ClearClrGen2Usage() {
        PrepareBuilder();
        result.hasClrGen2Usage = false;
        result.clrGen2Usage_ = 0;
        return this;
      }
      
      public bool HasClrGen2GcCount {
        get { return result.hasClrGen2GcCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrGen2GcCount {
        get { return result.ClrGen2GcCount; }
        set { SetClrGen2GcCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrGen2GcCount(uint value) {
        PrepareBuilder();
        result.hasClrGen2GcCount = true;
        result.clrGen2GcCount_ = value;
        return this;
      }
      public Builder ClearClrGen2GcCount() {
        PrepareBuilder();
        result.hasClrGen2GcCount = false;
        result.clrGen2GcCount_ = 0;
        return this;
      }
      
      public bool HasClrLargeObjectHeapUsage {
        get { return result.hasClrLargeObjectHeapUsage; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrLargeObjectHeapUsage {
        get { return result.ClrLargeObjectHeapUsage; }
        set { SetClrLargeObjectHeapUsage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrLargeObjectHeapUsage(uint value) {
        PrepareBuilder();
        result.hasClrLargeObjectHeapUsage = true;
        result.clrLargeObjectHeapUsage_ = value;
        return this;
      }
      public Builder ClearClrLargeObjectHeapUsage() {
        PrepareBuilder();
        result.hasClrLargeObjectHeapUsage = false;
        result.clrLargeObjectHeapUsage_ = 0;
        return this;
      }
      
      public bool HasClrLargeObjectGcCount {
        get { return result.hasClrLargeObjectGcCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClrLargeObjectGcCount {
        get { return result.ClrLargeObjectGcCount; }
        set { SetClrLargeObjectGcCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClrLargeObjectGcCount(uint value) {
        PrepareBuilder();
        result.hasClrLargeObjectGcCount = true;
        result.clrLargeObjectGcCount_ = value;
        return this;
      }
      public Builder ClearClrLargeObjectGcCount() {
        PrepareBuilder();
        result.hasClrLargeObjectGcCount = false;
        result.clrLargeObjectGcCount_ = 0;
        return this;
      }
    }
    static VMMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DiskMetric : pb::GeneratedMessage<DiskMetric, DiskMetric.Builder> {
    private DiskMetric() { }
    private static readonly DiskMetric defaultInstance = new DiskMetric().MakeReadOnly();
    private static readonly string[] _diskMetricFieldNames = new string[] { "diskFreeSize", "diskSize", "partition" };
    private static readonly uint[] _diskMetricFieldTags = new uint[] { 24, 16, 10 };
    public static DiskMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DiskMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DiskMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_DiskMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DiskMetric, DiskMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_DiskMetric__FieldAccessorTable; }
    }
    
    public const int PartitionFieldNumber = 1;
    private bool hasPartition;
    private string partition_ = "";
    public bool HasPartition {
      get { return hasPartition; }
    }
    public string Partition {
      get { return partition_; }
    }
    
    public const int DiskSizeFieldNumber = 2;
    private bool hasDiskSize;
    private uint diskSize_;
    public bool HasDiskSize {
      get { return hasDiskSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint DiskSize {
      get { return diskSize_; }
    }
    
    public const int DiskFreeSizeFieldNumber = 3;
    private bool hasDiskFreeSize;
    private uint diskFreeSize_;
    public bool HasDiskFreeSize {
      get { return hasDiskFreeSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint DiskFreeSize {
      get { return diskFreeSize_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _diskMetricFieldNames;
      if (hasPartition) {
        output.WriteString(1, field_names[2], Partition);
      }
      if (hasDiskSize) {
        output.WriteUInt32(2, field_names[1], DiskSize);
      }
      if (hasDiskFreeSize) {
        output.WriteUInt32(3, field_names[0], DiskFreeSize);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPartition) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Partition);
      }
      if (hasDiskSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DiskSize);
      }
      if (hasDiskFreeSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DiskFreeSize);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static DiskMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DiskMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DiskMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DiskMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DiskMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DiskMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DiskMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DiskMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DiskMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DiskMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DiskMetric MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DiskMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DiskMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DiskMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DiskMetric result;
      
      private DiskMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          DiskMetric original = result;
          result = new DiskMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DiskMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.DiskMetric.Descriptor; }
      }
      
      public override DiskMetric DefaultInstanceForType {
        get { return global::BonreePB.DiskMetric.DefaultInstance; }
      }
      
      public override DiskMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DiskMetric) {
          return MergeFrom((DiskMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DiskMetric other) {
        if (other == global::BonreePB.DiskMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartition) {
          Partition = other.Partition;
        }
        if (other.HasDiskSize) {
          DiskSize = other.DiskSize;
        }
        if (other.HasDiskFreeSize) {
          DiskFreeSize = other.DiskFreeSize;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_diskMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _diskMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPartition = input.ReadString(ref result.partition_);
              break;
            }
            case 16: {
              result.hasDiskSize = input.ReadUInt32(ref result.diskSize_);
              break;
            }
            case 24: {
              result.hasDiskFreeSize = input.ReadUInt32(ref result.diskFreeSize_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartition {
        get { return result.hasPartition; }
      }
      public string Partition {
        get { return result.Partition; }
        set { SetPartition(value); }
      }
      public Builder SetPartition(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartition = true;
        result.partition_ = value;
        return this;
      }
      public Builder ClearPartition() {
        PrepareBuilder();
        result.hasPartition = false;
        result.partition_ = "";
        return this;
      }
      
      public bool HasDiskSize {
        get { return result.hasDiskSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint DiskSize {
        get { return result.DiskSize; }
        set { SetDiskSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDiskSize(uint value) {
        PrepareBuilder();
        result.hasDiskSize = true;
        result.diskSize_ = value;
        return this;
      }
      public Builder ClearDiskSize() {
        PrepareBuilder();
        result.hasDiskSize = false;
        result.diskSize_ = 0;
        return this;
      }
      
      public bool HasDiskFreeSize {
        get { return result.hasDiskFreeSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint DiskFreeSize {
        get { return result.DiskFreeSize; }
        set { SetDiskFreeSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDiskFreeSize(uint value) {
        PrepareBuilder();
        result.hasDiskFreeSize = true;
        result.diskFreeSize_ = value;
        return this;
      }
      public Builder ClearDiskFreeSize() {
        PrepareBuilder();
        result.hasDiskFreeSize = false;
        result.diskFreeSize_ = 0;
        return this;
      }
    }
    static DiskMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MAMetric : pb::GeneratedMessage<MAMetric, MAMetric.Builder> {
    private MAMetric() { }
    private static readonly MAMetric defaultInstance = new MAMetric().MakeReadOnly();
    private static readonly string[] _mAMetricFieldNames = new string[] { "cpuUsage", "curOpenFds", "diskMetric", "diskReadBytes", "diskReadCount", "diskWriteBytes", "diskWriteCount", "freeMemSize", "memSize", "netRecvBytes", "netRecvPackages", "netSendBytes", "netSendPackages", "tcpCloseWaitStateCOunt", "tcpConnCount", "tcpEstablishedCount", "tcpFinWait2StateCount", "tcpFinWaitStateCount", "tcpListenStateCount", "tcpTimeWaitStateCount", "usedMemSize" };
    private static readonly uint[] _mAMetricFieldTags = new uint[] { 8, 168, 74, 40, 48, 56, 64, 24, 16, 88, 104, 80, 96, 152, 160, 120, 144, 136, 112, 128, 32 };
    public static MAMetric DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MAMetric DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MAMetric ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_MAMetric__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MAMetric, MAMetric.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_MAMetric__FieldAccessorTable; }
    }
    
    public const int CpuUsageFieldNumber = 1;
    private bool hasCpuUsage;
    private uint cpuUsage_;
    public bool HasCpuUsage {
      get { return hasCpuUsage; }
    }
    [global::System.CLSCompliant(false)]
    public uint CpuUsage {
      get { return cpuUsage_; }
    }
    
    public const int MemSizeFieldNumber = 2;
    private bool hasMemSize;
    private uint memSize_;
    public bool HasMemSize {
      get { return hasMemSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint MemSize {
      get { return memSize_; }
    }
    
    public const int FreeMemSizeFieldNumber = 3;
    private bool hasFreeMemSize;
    private uint freeMemSize_;
    public bool HasFreeMemSize {
      get { return hasFreeMemSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint FreeMemSize {
      get { return freeMemSize_; }
    }
    
    public const int UsedMemSizeFieldNumber = 4;
    private bool hasUsedMemSize;
    private uint usedMemSize_;
    public bool HasUsedMemSize {
      get { return hasUsedMemSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint UsedMemSize {
      get { return usedMemSize_; }
    }
    
    public const int DiskReadBytesFieldNumber = 5;
    private bool hasDiskReadBytes;
    private ulong diskReadBytes_;
    public bool HasDiskReadBytes {
      get { return hasDiskReadBytes; }
    }
    [global::System.CLSCompliant(false)]
    public ulong DiskReadBytes {
      get { return diskReadBytes_; }
    }
    
    public const int DiskReadCountFieldNumber = 6;
    private bool hasDiskReadCount;
    private uint diskReadCount_;
    public bool HasDiskReadCount {
      get { return hasDiskReadCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint DiskReadCount {
      get { return diskReadCount_; }
    }
    
    public const int DiskWriteBytesFieldNumber = 7;
    private bool hasDiskWriteBytes;
    private ulong diskWriteBytes_;
    public bool HasDiskWriteBytes {
      get { return hasDiskWriteBytes; }
    }
    [global::System.CLSCompliant(false)]
    public ulong DiskWriteBytes {
      get { return diskWriteBytes_; }
    }
    
    public const int DiskWriteCountFieldNumber = 8;
    private bool hasDiskWriteCount;
    private uint diskWriteCount_;
    public bool HasDiskWriteCount {
      get { return hasDiskWriteCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint DiskWriteCount {
      get { return diskWriteCount_; }
    }
    
    public const int DiskMetricFieldNumber = 9;
    private pbc::PopsicleList<global::BonreePB.DiskMetric> diskMetric_ = new pbc::PopsicleList<global::BonreePB.DiskMetric>();
    public scg::IList<global::BonreePB.DiskMetric> DiskMetricList {
      get { return diskMetric_; }
    }
    public int DiskMetricCount {
      get { return diskMetric_.Count; }
    }
    public global::BonreePB.DiskMetric GetDiskMetric(int index) {
      return diskMetric_[index];
    }
    
    public const int NetSendBytesFieldNumber = 10;
    private bool hasNetSendBytes;
    private ulong netSendBytes_;
    public bool HasNetSendBytes {
      get { return hasNetSendBytes; }
    }
    [global::System.CLSCompliant(false)]
    public ulong NetSendBytes {
      get { return netSendBytes_; }
    }
    
    public const int NetRecvBytesFieldNumber = 11;
    private bool hasNetRecvBytes;
    private ulong netRecvBytes_;
    public bool HasNetRecvBytes {
      get { return hasNetRecvBytes; }
    }
    [global::System.CLSCompliant(false)]
    public ulong NetRecvBytes {
      get { return netRecvBytes_; }
    }
    
    public const int NetSendPackagesFieldNumber = 12;
    private bool hasNetSendPackages;
    private ulong netSendPackages_;
    public bool HasNetSendPackages {
      get { return hasNetSendPackages; }
    }
    [global::System.CLSCompliant(false)]
    public ulong NetSendPackages {
      get { return netSendPackages_; }
    }
    
    public const int NetRecvPackagesFieldNumber = 13;
    private bool hasNetRecvPackages;
    private ulong netRecvPackages_;
    public bool HasNetRecvPackages {
      get { return hasNetRecvPackages; }
    }
    [global::System.CLSCompliant(false)]
    public ulong NetRecvPackages {
      get { return netRecvPackages_; }
    }
    
    public const int TcpListenStateCountFieldNumber = 14;
    private bool hasTcpListenStateCount;
    private uint tcpListenStateCount_;
    public bool HasTcpListenStateCount {
      get { return hasTcpListenStateCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpListenStateCount {
      get { return tcpListenStateCount_; }
    }
    
    public const int TcpEstablishedCountFieldNumber = 15;
    private bool hasTcpEstablishedCount;
    private uint tcpEstablishedCount_;
    public bool HasTcpEstablishedCount {
      get { return hasTcpEstablishedCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpEstablishedCount {
      get { return tcpEstablishedCount_; }
    }
    
    public const int TcpTimeWaitStateCountFieldNumber = 16;
    private bool hasTcpTimeWaitStateCount;
    private uint tcpTimeWaitStateCount_;
    public bool HasTcpTimeWaitStateCount {
      get { return hasTcpTimeWaitStateCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpTimeWaitStateCount {
      get { return tcpTimeWaitStateCount_; }
    }
    
    public const int TcpFinWaitStateCountFieldNumber = 17;
    private bool hasTcpFinWaitStateCount;
    private uint tcpFinWaitStateCount_;
    public bool HasTcpFinWaitStateCount {
      get { return hasTcpFinWaitStateCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpFinWaitStateCount {
      get { return tcpFinWaitStateCount_; }
    }
    
    public const int TcpFinWait2StateCountFieldNumber = 18;
    private bool hasTcpFinWait2StateCount;
    private uint tcpFinWait2StateCount_;
    public bool HasTcpFinWait2StateCount {
      get { return hasTcpFinWait2StateCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpFinWait2StateCount {
      get { return tcpFinWait2StateCount_; }
    }
    
    public const int TcpCloseWaitStateCOuntFieldNumber = 19;
    private bool hasTcpCloseWaitStateCOunt;
    private uint tcpCloseWaitStateCOunt_;
    public bool HasTcpCloseWaitStateCOunt {
      get { return hasTcpCloseWaitStateCOunt; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpCloseWaitStateCOunt {
      get { return tcpCloseWaitStateCOunt_; }
    }
    
    public const int TcpConnCountFieldNumber = 20;
    private bool hasTcpConnCount;
    private uint tcpConnCount_;
    public bool HasTcpConnCount {
      get { return hasTcpConnCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpConnCount {
      get { return tcpConnCount_; }
    }
    
    public const int CurOpenFdsFieldNumber = 21;
    private bool hasCurOpenFds;
    private uint curOpenFds_;
    public bool HasCurOpenFds {
      get { return hasCurOpenFds; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurOpenFds {
      get { return curOpenFds_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mAMetricFieldNames;
      if (hasCpuUsage) {
        output.WriteUInt32(1, field_names[0], CpuUsage);
      }
      if (hasMemSize) {
        output.WriteUInt32(2, field_names[8], MemSize);
      }
      if (hasFreeMemSize) {
        output.WriteUInt32(3, field_names[7], FreeMemSize);
      }
      if (hasUsedMemSize) {
        output.WriteUInt32(4, field_names[20], UsedMemSize);
      }
      if (hasDiskReadBytes) {
        output.WriteUInt64(5, field_names[3], DiskReadBytes);
      }
      if (hasDiskReadCount) {
        output.WriteUInt32(6, field_names[4], DiskReadCount);
      }
      if (hasDiskWriteBytes) {
        output.WriteUInt64(7, field_names[5], DiskWriteBytes);
      }
      if (hasDiskWriteCount) {
        output.WriteUInt32(8, field_names[6], DiskWriteCount);
      }
      if (diskMetric_.Count > 0) {
        output.WriteMessageArray(9, field_names[2], diskMetric_);
      }
      if (hasNetSendBytes) {
        output.WriteUInt64(10, field_names[11], NetSendBytes);
      }
      if (hasNetRecvBytes) {
        output.WriteUInt64(11, field_names[9], NetRecvBytes);
      }
      if (hasNetSendPackages) {
        output.WriteUInt64(12, field_names[12], NetSendPackages);
      }
      if (hasNetRecvPackages) {
        output.WriteUInt64(13, field_names[10], NetRecvPackages);
      }
      if (hasTcpListenStateCount) {
        output.WriteUInt32(14, field_names[18], TcpListenStateCount);
      }
      if (hasTcpEstablishedCount) {
        output.WriteUInt32(15, field_names[15], TcpEstablishedCount);
      }
      if (hasTcpTimeWaitStateCount) {
        output.WriteUInt32(16, field_names[19], TcpTimeWaitStateCount);
      }
      if (hasTcpFinWaitStateCount) {
        output.WriteUInt32(17, field_names[17], TcpFinWaitStateCount);
      }
      if (hasTcpFinWait2StateCount) {
        output.WriteUInt32(18, field_names[16], TcpFinWait2StateCount);
      }
      if (hasTcpCloseWaitStateCOunt) {
        output.WriteUInt32(19, field_names[13], TcpCloseWaitStateCOunt);
      }
      if (hasTcpConnCount) {
        output.WriteUInt32(20, field_names[14], TcpConnCount);
      }
      if (hasCurOpenFds) {
        output.WriteUInt32(21, field_names[1], CurOpenFds);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCpuUsage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CpuUsage);
      }
      if (hasMemSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MemSize);
      }
      if (hasFreeMemSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, FreeMemSize);
      }
      if (hasUsedMemSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, UsedMemSize);
      }
      if (hasDiskReadBytes) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, DiskReadBytes);
      }
      if (hasDiskReadCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, DiskReadCount);
      }
      if (hasDiskWriteBytes) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, DiskWriteBytes);
      }
      if (hasDiskWriteCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, DiskWriteCount);
      }
      foreach (global::BonreePB.DiskMetric element in DiskMetricList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      if (hasNetSendBytes) {
        size += pb::CodedOutputStream.ComputeUInt64Size(10, NetSendBytes);
      }
      if (hasNetRecvBytes) {
        size += pb::CodedOutputStream.ComputeUInt64Size(11, NetRecvBytes);
      }
      if (hasNetSendPackages) {
        size += pb::CodedOutputStream.ComputeUInt64Size(12, NetSendPackages);
      }
      if (hasNetRecvPackages) {
        size += pb::CodedOutputStream.ComputeUInt64Size(13, NetRecvPackages);
      }
      if (hasTcpListenStateCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, TcpListenStateCount);
      }
      if (hasTcpEstablishedCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, TcpEstablishedCount);
      }
      if (hasTcpTimeWaitStateCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, TcpTimeWaitStateCount);
      }
      if (hasTcpFinWaitStateCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, TcpFinWaitStateCount);
      }
      if (hasTcpFinWait2StateCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(18, TcpFinWait2StateCount);
      }
      if (hasTcpCloseWaitStateCOunt) {
        size += pb::CodedOutputStream.ComputeUInt32Size(19, TcpCloseWaitStateCOunt);
      }
      if (hasTcpConnCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(20, TcpConnCount);
      }
      if (hasCurOpenFds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(21, CurOpenFds);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MAMetric ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MAMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MAMetric ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MAMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MAMetric ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MAMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MAMetric ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MAMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MAMetric ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MAMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MAMetric MakeReadOnly() {
      diskMetric_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MAMetric prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MAMetric, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MAMetric cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MAMetric result;
      
      private MAMetric PrepareBuilder() {
        if (resultIsReadOnly) {
          MAMetric original = result;
          result = new MAMetric();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MAMetric MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.MAMetric.Descriptor; }
      }
      
      public override MAMetric DefaultInstanceForType {
        get { return global::BonreePB.MAMetric.DefaultInstance; }
      }
      
      public override MAMetric BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MAMetric) {
          return MergeFrom((MAMetric) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MAMetric other) {
        if (other == global::BonreePB.MAMetric.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCpuUsage) {
          CpuUsage = other.CpuUsage;
        }
        if (other.HasMemSize) {
          MemSize = other.MemSize;
        }
        if (other.HasFreeMemSize) {
          FreeMemSize = other.FreeMemSize;
        }
        if (other.HasUsedMemSize) {
          UsedMemSize = other.UsedMemSize;
        }
        if (other.HasDiskReadBytes) {
          DiskReadBytes = other.DiskReadBytes;
        }
        if (other.HasDiskReadCount) {
          DiskReadCount = other.DiskReadCount;
        }
        if (other.HasDiskWriteBytes) {
          DiskWriteBytes = other.DiskWriteBytes;
        }
        if (other.HasDiskWriteCount) {
          DiskWriteCount = other.DiskWriteCount;
        }
        if (other.diskMetric_.Count != 0) {
          result.diskMetric_.Add(other.diskMetric_);
        }
        if (other.HasNetSendBytes) {
          NetSendBytes = other.NetSendBytes;
        }
        if (other.HasNetRecvBytes) {
          NetRecvBytes = other.NetRecvBytes;
        }
        if (other.HasNetSendPackages) {
          NetSendPackages = other.NetSendPackages;
        }
        if (other.HasNetRecvPackages) {
          NetRecvPackages = other.NetRecvPackages;
        }
        if (other.HasTcpListenStateCount) {
          TcpListenStateCount = other.TcpListenStateCount;
        }
        if (other.HasTcpEstablishedCount) {
          TcpEstablishedCount = other.TcpEstablishedCount;
        }
        if (other.HasTcpTimeWaitStateCount) {
          TcpTimeWaitStateCount = other.TcpTimeWaitStateCount;
        }
        if (other.HasTcpFinWaitStateCount) {
          TcpFinWaitStateCount = other.TcpFinWaitStateCount;
        }
        if (other.HasTcpFinWait2StateCount) {
          TcpFinWait2StateCount = other.TcpFinWait2StateCount;
        }
        if (other.HasTcpCloseWaitStateCOunt) {
          TcpCloseWaitStateCOunt = other.TcpCloseWaitStateCOunt;
        }
        if (other.HasTcpConnCount) {
          TcpConnCount = other.TcpConnCount;
        }
        if (other.HasCurOpenFds) {
          CurOpenFds = other.CurOpenFds;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mAMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mAMetricFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCpuUsage = input.ReadUInt32(ref result.cpuUsage_);
              break;
            }
            case 16: {
              result.hasMemSize = input.ReadUInt32(ref result.memSize_);
              break;
            }
            case 24: {
              result.hasFreeMemSize = input.ReadUInt32(ref result.freeMemSize_);
              break;
            }
            case 32: {
              result.hasUsedMemSize = input.ReadUInt32(ref result.usedMemSize_);
              break;
            }
            case 40: {
              result.hasDiskReadBytes = input.ReadUInt64(ref result.diskReadBytes_);
              break;
            }
            case 48: {
              result.hasDiskReadCount = input.ReadUInt32(ref result.diskReadCount_);
              break;
            }
            case 56: {
              result.hasDiskWriteBytes = input.ReadUInt64(ref result.diskWriteBytes_);
              break;
            }
            case 64: {
              result.hasDiskWriteCount = input.ReadUInt32(ref result.diskWriteCount_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.diskMetric_, global::BonreePB.DiskMetric.DefaultInstance, extensionRegistry);
              break;
            }
            case 80: {
              result.hasNetSendBytes = input.ReadUInt64(ref result.netSendBytes_);
              break;
            }
            case 88: {
              result.hasNetRecvBytes = input.ReadUInt64(ref result.netRecvBytes_);
              break;
            }
            case 96: {
              result.hasNetSendPackages = input.ReadUInt64(ref result.netSendPackages_);
              break;
            }
            case 104: {
              result.hasNetRecvPackages = input.ReadUInt64(ref result.netRecvPackages_);
              break;
            }
            case 112: {
              result.hasTcpListenStateCount = input.ReadUInt32(ref result.tcpListenStateCount_);
              break;
            }
            case 120: {
              result.hasTcpEstablishedCount = input.ReadUInt32(ref result.tcpEstablishedCount_);
              break;
            }
            case 128: {
              result.hasTcpTimeWaitStateCount = input.ReadUInt32(ref result.tcpTimeWaitStateCount_);
              break;
            }
            case 136: {
              result.hasTcpFinWaitStateCount = input.ReadUInt32(ref result.tcpFinWaitStateCount_);
              break;
            }
            case 144: {
              result.hasTcpFinWait2StateCount = input.ReadUInt32(ref result.tcpFinWait2StateCount_);
              break;
            }
            case 152: {
              result.hasTcpCloseWaitStateCOunt = input.ReadUInt32(ref result.tcpCloseWaitStateCOunt_);
              break;
            }
            case 160: {
              result.hasTcpConnCount = input.ReadUInt32(ref result.tcpConnCount_);
              break;
            }
            case 168: {
              result.hasCurOpenFds = input.ReadUInt32(ref result.curOpenFds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCpuUsage {
        get { return result.hasCpuUsage; }
      }
      [global::System.CLSCompliant(false)]
      public uint CpuUsage {
        get { return result.CpuUsage; }
        set { SetCpuUsage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCpuUsage(uint value) {
        PrepareBuilder();
        result.hasCpuUsage = true;
        result.cpuUsage_ = value;
        return this;
      }
      public Builder ClearCpuUsage() {
        PrepareBuilder();
        result.hasCpuUsage = false;
        result.cpuUsage_ = 0;
        return this;
      }
      
      public bool HasMemSize {
        get { return result.hasMemSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint MemSize {
        get { return result.MemSize; }
        set { SetMemSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMemSize(uint value) {
        PrepareBuilder();
        result.hasMemSize = true;
        result.memSize_ = value;
        return this;
      }
      public Builder ClearMemSize() {
        PrepareBuilder();
        result.hasMemSize = false;
        result.memSize_ = 0;
        return this;
      }
      
      public bool HasFreeMemSize {
        get { return result.hasFreeMemSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint FreeMemSize {
        get { return result.FreeMemSize; }
        set { SetFreeMemSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFreeMemSize(uint value) {
        PrepareBuilder();
        result.hasFreeMemSize = true;
        result.freeMemSize_ = value;
        return this;
      }
      public Builder ClearFreeMemSize() {
        PrepareBuilder();
        result.hasFreeMemSize = false;
        result.freeMemSize_ = 0;
        return this;
      }
      
      public bool HasUsedMemSize {
        get { return result.hasUsedMemSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint UsedMemSize {
        get { return result.UsedMemSize; }
        set { SetUsedMemSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUsedMemSize(uint value) {
        PrepareBuilder();
        result.hasUsedMemSize = true;
        result.usedMemSize_ = value;
        return this;
      }
      public Builder ClearUsedMemSize() {
        PrepareBuilder();
        result.hasUsedMemSize = false;
        result.usedMemSize_ = 0;
        return this;
      }
      
      public bool HasDiskReadBytes {
        get { return result.hasDiskReadBytes; }
      }
      [global::System.CLSCompliant(false)]
      public ulong DiskReadBytes {
        get { return result.DiskReadBytes; }
        set { SetDiskReadBytes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDiskReadBytes(ulong value) {
        PrepareBuilder();
        result.hasDiskReadBytes = true;
        result.diskReadBytes_ = value;
        return this;
      }
      public Builder ClearDiskReadBytes() {
        PrepareBuilder();
        result.hasDiskReadBytes = false;
        result.diskReadBytes_ = 0UL;
        return this;
      }
      
      public bool HasDiskReadCount {
        get { return result.hasDiskReadCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint DiskReadCount {
        get { return result.DiskReadCount; }
        set { SetDiskReadCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDiskReadCount(uint value) {
        PrepareBuilder();
        result.hasDiskReadCount = true;
        result.diskReadCount_ = value;
        return this;
      }
      public Builder ClearDiskReadCount() {
        PrepareBuilder();
        result.hasDiskReadCount = false;
        result.diskReadCount_ = 0;
        return this;
      }
      
      public bool HasDiskWriteBytes {
        get { return result.hasDiskWriteBytes; }
      }
      [global::System.CLSCompliant(false)]
      public ulong DiskWriteBytes {
        get { return result.DiskWriteBytes; }
        set { SetDiskWriteBytes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDiskWriteBytes(ulong value) {
        PrepareBuilder();
        result.hasDiskWriteBytes = true;
        result.diskWriteBytes_ = value;
        return this;
      }
      public Builder ClearDiskWriteBytes() {
        PrepareBuilder();
        result.hasDiskWriteBytes = false;
        result.diskWriteBytes_ = 0UL;
        return this;
      }
      
      public bool HasDiskWriteCount {
        get { return result.hasDiskWriteCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint DiskWriteCount {
        get { return result.DiskWriteCount; }
        set { SetDiskWriteCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDiskWriteCount(uint value) {
        PrepareBuilder();
        result.hasDiskWriteCount = true;
        result.diskWriteCount_ = value;
        return this;
      }
      public Builder ClearDiskWriteCount() {
        PrepareBuilder();
        result.hasDiskWriteCount = false;
        result.diskWriteCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.DiskMetric> DiskMetricList {
        get { return PrepareBuilder().diskMetric_; }
      }
      public int DiskMetricCount {
        get { return result.DiskMetricCount; }
      }
      public global::BonreePB.DiskMetric GetDiskMetric(int index) {
        return result.GetDiskMetric(index);
      }
      public Builder SetDiskMetric(int index, global::BonreePB.DiskMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.diskMetric_[index] = value;
        return this;
      }
      public Builder SetDiskMetric(int index, global::BonreePB.DiskMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.diskMetric_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDiskMetric(global::BonreePB.DiskMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.diskMetric_.Add(value);
        return this;
      }
      public Builder AddDiskMetric(global::BonreePB.DiskMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.diskMetric_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDiskMetric(scg::IEnumerable<global::BonreePB.DiskMetric> values) {
        PrepareBuilder();
        result.diskMetric_.Add(values);
        return this;
      }
      public Builder ClearDiskMetric() {
        PrepareBuilder();
        result.diskMetric_.Clear();
        return this;
      }
      
      public bool HasNetSendBytes {
        get { return result.hasNetSendBytes; }
      }
      [global::System.CLSCompliant(false)]
      public ulong NetSendBytes {
        get { return result.NetSendBytes; }
        set { SetNetSendBytes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNetSendBytes(ulong value) {
        PrepareBuilder();
        result.hasNetSendBytes = true;
        result.netSendBytes_ = value;
        return this;
      }
      public Builder ClearNetSendBytes() {
        PrepareBuilder();
        result.hasNetSendBytes = false;
        result.netSendBytes_ = 0UL;
        return this;
      }
      
      public bool HasNetRecvBytes {
        get { return result.hasNetRecvBytes; }
      }
      [global::System.CLSCompliant(false)]
      public ulong NetRecvBytes {
        get { return result.NetRecvBytes; }
        set { SetNetRecvBytes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNetRecvBytes(ulong value) {
        PrepareBuilder();
        result.hasNetRecvBytes = true;
        result.netRecvBytes_ = value;
        return this;
      }
      public Builder ClearNetRecvBytes() {
        PrepareBuilder();
        result.hasNetRecvBytes = false;
        result.netRecvBytes_ = 0UL;
        return this;
      }
      
      public bool HasNetSendPackages {
        get { return result.hasNetSendPackages; }
      }
      [global::System.CLSCompliant(false)]
      public ulong NetSendPackages {
        get { return result.NetSendPackages; }
        set { SetNetSendPackages(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNetSendPackages(ulong value) {
        PrepareBuilder();
        result.hasNetSendPackages = true;
        result.netSendPackages_ = value;
        return this;
      }
      public Builder ClearNetSendPackages() {
        PrepareBuilder();
        result.hasNetSendPackages = false;
        result.netSendPackages_ = 0UL;
        return this;
      }
      
      public bool HasNetRecvPackages {
        get { return result.hasNetRecvPackages; }
      }
      [global::System.CLSCompliant(false)]
      public ulong NetRecvPackages {
        get { return result.NetRecvPackages; }
        set { SetNetRecvPackages(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNetRecvPackages(ulong value) {
        PrepareBuilder();
        result.hasNetRecvPackages = true;
        result.netRecvPackages_ = value;
        return this;
      }
      public Builder ClearNetRecvPackages() {
        PrepareBuilder();
        result.hasNetRecvPackages = false;
        result.netRecvPackages_ = 0UL;
        return this;
      }
      
      public bool HasTcpListenStateCount {
        get { return result.hasTcpListenStateCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpListenStateCount {
        get { return result.TcpListenStateCount; }
        set { SetTcpListenStateCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpListenStateCount(uint value) {
        PrepareBuilder();
        result.hasTcpListenStateCount = true;
        result.tcpListenStateCount_ = value;
        return this;
      }
      public Builder ClearTcpListenStateCount() {
        PrepareBuilder();
        result.hasTcpListenStateCount = false;
        result.tcpListenStateCount_ = 0;
        return this;
      }
      
      public bool HasTcpEstablishedCount {
        get { return result.hasTcpEstablishedCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpEstablishedCount {
        get { return result.TcpEstablishedCount; }
        set { SetTcpEstablishedCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpEstablishedCount(uint value) {
        PrepareBuilder();
        result.hasTcpEstablishedCount = true;
        result.tcpEstablishedCount_ = value;
        return this;
      }
      public Builder ClearTcpEstablishedCount() {
        PrepareBuilder();
        result.hasTcpEstablishedCount = false;
        result.tcpEstablishedCount_ = 0;
        return this;
      }
      
      public bool HasTcpTimeWaitStateCount {
        get { return result.hasTcpTimeWaitStateCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpTimeWaitStateCount {
        get { return result.TcpTimeWaitStateCount; }
        set { SetTcpTimeWaitStateCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpTimeWaitStateCount(uint value) {
        PrepareBuilder();
        result.hasTcpTimeWaitStateCount = true;
        result.tcpTimeWaitStateCount_ = value;
        return this;
      }
      public Builder ClearTcpTimeWaitStateCount() {
        PrepareBuilder();
        result.hasTcpTimeWaitStateCount = false;
        result.tcpTimeWaitStateCount_ = 0;
        return this;
      }
      
      public bool HasTcpFinWaitStateCount {
        get { return result.hasTcpFinWaitStateCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpFinWaitStateCount {
        get { return result.TcpFinWaitStateCount; }
        set { SetTcpFinWaitStateCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpFinWaitStateCount(uint value) {
        PrepareBuilder();
        result.hasTcpFinWaitStateCount = true;
        result.tcpFinWaitStateCount_ = value;
        return this;
      }
      public Builder ClearTcpFinWaitStateCount() {
        PrepareBuilder();
        result.hasTcpFinWaitStateCount = false;
        result.tcpFinWaitStateCount_ = 0;
        return this;
      }
      
      public bool HasTcpFinWait2StateCount {
        get { return result.hasTcpFinWait2StateCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpFinWait2StateCount {
        get { return result.TcpFinWait2StateCount; }
        set { SetTcpFinWait2StateCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpFinWait2StateCount(uint value) {
        PrepareBuilder();
        result.hasTcpFinWait2StateCount = true;
        result.tcpFinWait2StateCount_ = value;
        return this;
      }
      public Builder ClearTcpFinWait2StateCount() {
        PrepareBuilder();
        result.hasTcpFinWait2StateCount = false;
        result.tcpFinWait2StateCount_ = 0;
        return this;
      }
      
      public bool HasTcpCloseWaitStateCOunt {
        get { return result.hasTcpCloseWaitStateCOunt; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpCloseWaitStateCOunt {
        get { return result.TcpCloseWaitStateCOunt; }
        set { SetTcpCloseWaitStateCOunt(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpCloseWaitStateCOunt(uint value) {
        PrepareBuilder();
        result.hasTcpCloseWaitStateCOunt = true;
        result.tcpCloseWaitStateCOunt_ = value;
        return this;
      }
      public Builder ClearTcpCloseWaitStateCOunt() {
        PrepareBuilder();
        result.hasTcpCloseWaitStateCOunt = false;
        result.tcpCloseWaitStateCOunt_ = 0;
        return this;
      }
      
      public bool HasTcpConnCount {
        get { return result.hasTcpConnCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpConnCount {
        get { return result.TcpConnCount; }
        set { SetTcpConnCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpConnCount(uint value) {
        PrepareBuilder();
        result.hasTcpConnCount = true;
        result.tcpConnCount_ = value;
        return this;
      }
      public Builder ClearTcpConnCount() {
        PrepareBuilder();
        result.hasTcpConnCount = false;
        result.tcpConnCount_ = 0;
        return this;
      }
      
      public bool HasCurOpenFds {
        get { return result.hasCurOpenFds; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurOpenFds {
        get { return result.CurOpenFds; }
        set { SetCurOpenFds(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurOpenFds(uint value) {
        PrepareBuilder();
        result.hasCurOpenFds = true;
        result.curOpenFds_ = value;
        return this;
      }
      public Builder ClearCurOpenFds() {
        PrepareBuilder();
        result.hasCurOpenFds = false;
        result.curOpenFds_ = 0;
        return this;
      }
    }
    static MAMetric() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MetricsReq : pb::GeneratedMessage<MetricsReq, MetricsReq.Builder> {
    private MetricsReq() { }
    private static readonly MetricsReq defaultInstance = new MetricsReq().MakeReadOnly();
    private static readonly string[] _metricsReqFieldNames = new string[] { "agentIdentity", "beMetrics", "bebtMetrics", "btMetrics", "crossBTMetircs", "dsMetrics", "maMetrics", "vmMetrics" };
    private static readonly uint[] _metricsReqFieldTags = new uint[] { 10, 34, 26, 18, 58, 66, 50, 42 };
    public static MetricsReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricsReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricsReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_MetricsReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricsReq, MetricsReq.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbMetric.internal__static_BonreePB_MetricsReq__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::BonreePB.AgentIdentity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::BonreePB.AgentIdentity AgentIdentity {
      get { return agentIdentity_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int BtMetricsFieldNumber = 2;
    private pbc::PopsicleList<global::BonreePB.BTMetric> btMetrics_ = new pbc::PopsicleList<global::BonreePB.BTMetric>();
    public scg::IList<global::BonreePB.BTMetric> BtMetricsList {
      get { return btMetrics_; }
    }
    public int BtMetricsCount {
      get { return btMetrics_.Count; }
    }
    public global::BonreePB.BTMetric GetBtMetrics(int index) {
      return btMetrics_[index];
    }
    
    public const int BebtMetricsFieldNumber = 3;
    private pbc::PopsicleList<global::BonreePB.BEBTMetric> bebtMetrics_ = new pbc::PopsicleList<global::BonreePB.BEBTMetric>();
    public scg::IList<global::BonreePB.BEBTMetric> BebtMetricsList {
      get { return bebtMetrics_; }
    }
    public int BebtMetricsCount {
      get { return bebtMetrics_.Count; }
    }
    public global::BonreePB.BEBTMetric GetBebtMetrics(int index) {
      return bebtMetrics_[index];
    }
    
    public const int BeMetricsFieldNumber = 4;
    private pbc::PopsicleList<global::BonreePB.BEMetric> beMetrics_ = new pbc::PopsicleList<global::BonreePB.BEMetric>();
    public scg::IList<global::BonreePB.BEMetric> BeMetricsList {
      get { return beMetrics_; }
    }
    public int BeMetricsCount {
      get { return beMetrics_.Count; }
    }
    public global::BonreePB.BEMetric GetBeMetrics(int index) {
      return beMetrics_[index];
    }
    
    public const int VmMetricsFieldNumber = 5;
    private bool hasVmMetrics;
    private global::BonreePB.VMMetric vmMetrics_;
    public bool HasVmMetrics {
      get { return hasVmMetrics; }
    }
    public global::BonreePB.VMMetric VmMetrics {
      get { return vmMetrics_ ?? global::BonreePB.VMMetric.DefaultInstance; }
    }
    
    public const int MaMetricsFieldNumber = 6;
    private bool hasMaMetrics;
    private global::BonreePB.MAMetric maMetrics_;
    public bool HasMaMetrics {
      get { return hasMaMetrics; }
    }
    public global::BonreePB.MAMetric MaMetrics {
      get { return maMetrics_ ?? global::BonreePB.MAMetric.DefaultInstance; }
    }
    
    public const int CrossBTMetircsFieldNumber = 7;
    private pbc::PopsicleList<global::BonreePB.CrossBTMetric> crossBTMetircs_ = new pbc::PopsicleList<global::BonreePB.CrossBTMetric>();
    public scg::IList<global::BonreePB.CrossBTMetric> CrossBTMetircsList {
      get { return crossBTMetircs_; }
    }
    public int CrossBTMetircsCount {
      get { return crossBTMetircs_.Count; }
    }
    public global::BonreePB.CrossBTMetric GetCrossBTMetircs(int index) {
      return crossBTMetircs_[index];
    }
    
    public const int DsMetricsFieldNumber = 8;
    private pbc::PopsicleList<global::BonreePB.DataSourceMetric> dsMetrics_ = new pbc::PopsicleList<global::BonreePB.DataSourceMetric>();
    public scg::IList<global::BonreePB.DataSourceMetric> DsMetricsList {
      get { return dsMetrics_; }
    }
    public int DsMetricsCount {
      get { return dsMetrics_.Count; }
    }
    public global::BonreePB.DataSourceMetric GetDsMetrics(int index) {
      return dsMetrics_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _metricsReqFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (btMetrics_.Count > 0) {
        output.WriteMessageArray(2, field_names[3], btMetrics_);
      }
      if (bebtMetrics_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], bebtMetrics_);
      }
      if (beMetrics_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], beMetrics_);
      }
      if (hasVmMetrics) {
        output.WriteMessage(5, field_names[7], VmMetrics);
      }
      if (hasMaMetrics) {
        output.WriteMessage(6, field_names[6], MaMetrics);
      }
      if (crossBTMetircs_.Count > 0) {
        output.WriteMessageArray(7, field_names[4], crossBTMetircs_);
      }
      if (dsMetrics_.Count > 0) {
        output.WriteMessageArray(8, field_names[5], dsMetrics_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentIdentity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
      }
      foreach (global::BonreePB.BTMetric element in BtMetricsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::BonreePB.BEBTMetric element in BebtMetricsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::BonreePB.BEMetric element in BeMetricsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasVmMetrics) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, VmMetrics);
      }
      if (hasMaMetrics) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, MaMetrics);
      }
      foreach (global::BonreePB.CrossBTMetric element in CrossBTMetircsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      foreach (global::BonreePB.DataSourceMetric element in DsMetricsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MetricsReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricsReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricsReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricsReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricsReq MakeReadOnly() {
      btMetrics_.MakeReadOnly();
      bebtMetrics_.MakeReadOnly();
      beMetrics_.MakeReadOnly();
      crossBTMetircs_.MakeReadOnly();
      dsMetrics_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricsReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MetricsReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricsReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricsReq result;
      
      private MetricsReq PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricsReq original = result;
          result = new MetricsReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricsReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.MetricsReq.Descriptor; }
      }
      
      public override MetricsReq DefaultInstanceForType {
        get { return global::BonreePB.MetricsReq.DefaultInstance; }
      }
      
      public override MetricsReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricsReq) {
          return MergeFrom((MetricsReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricsReq other) {
        if (other == global::BonreePB.MetricsReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.btMetrics_.Count != 0) {
          result.btMetrics_.Add(other.btMetrics_);
        }
        if (other.bebtMetrics_.Count != 0) {
          result.bebtMetrics_.Add(other.bebtMetrics_);
        }
        if (other.beMetrics_.Count != 0) {
          result.beMetrics_.Add(other.beMetrics_);
        }
        if (other.HasVmMetrics) {
          MergeVmMetrics(other.VmMetrics);
        }
        if (other.HasMaMetrics) {
          MergeMaMetrics(other.MaMetrics);
        }
        if (other.crossBTMetircs_.Count != 0) {
          result.crossBTMetircs_.Add(other.crossBTMetircs_);
        }
        if (other.dsMetrics_.Count != 0) {
          result.dsMetrics_.Add(other.dsMetrics_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricsReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricsReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.btMetrics_, global::BonreePB.BTMetric.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.bebtMetrics_, global::BonreePB.BEBTMetric.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.beMetrics_, global::BonreePB.BEMetric.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              global::BonreePB.VMMetric.Builder subBuilder = global::BonreePB.VMMetric.CreateBuilder();
              if (result.hasVmMetrics) {
                subBuilder.MergeFrom(VmMetrics);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VmMetrics = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::BonreePB.MAMetric.Builder subBuilder = global::BonreePB.MAMetric.CreateBuilder();
              if (result.hasMaMetrics) {
                subBuilder.MergeFrom(MaMetrics);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MaMetrics = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.crossBTMetircs_, global::BonreePB.CrossBTMetric.DefaultInstance, extensionRegistry);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.dsMetrics_, global::BonreePB.DataSourceMetric.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::BonreePB.AgentIdentity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIdentity_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.BTMetric> BtMetricsList {
        get { return PrepareBuilder().btMetrics_; }
      }
      public int BtMetricsCount {
        get { return result.BtMetricsCount; }
      }
      public global::BonreePB.BTMetric GetBtMetrics(int index) {
        return result.GetBtMetrics(index);
      }
      public Builder SetBtMetrics(int index, global::BonreePB.BTMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.btMetrics_[index] = value;
        return this;
      }
      public Builder SetBtMetrics(int index, global::BonreePB.BTMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.btMetrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBtMetrics(global::BonreePB.BTMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.btMetrics_.Add(value);
        return this;
      }
      public Builder AddBtMetrics(global::BonreePB.BTMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.btMetrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBtMetrics(scg::IEnumerable<global::BonreePB.BTMetric> values) {
        PrepareBuilder();
        result.btMetrics_.Add(values);
        return this;
      }
      public Builder ClearBtMetrics() {
        PrepareBuilder();
        result.btMetrics_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.BEBTMetric> BebtMetricsList {
        get { return PrepareBuilder().bebtMetrics_; }
      }
      public int BebtMetricsCount {
        get { return result.BebtMetricsCount; }
      }
      public global::BonreePB.BEBTMetric GetBebtMetrics(int index) {
        return result.GetBebtMetrics(index);
      }
      public Builder SetBebtMetrics(int index, global::BonreePB.BEBTMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bebtMetrics_[index] = value;
        return this;
      }
      public Builder SetBebtMetrics(int index, global::BonreePB.BEBTMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bebtMetrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBebtMetrics(global::BonreePB.BEBTMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bebtMetrics_.Add(value);
        return this;
      }
      public Builder AddBebtMetrics(global::BonreePB.BEBTMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bebtMetrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBebtMetrics(scg::IEnumerable<global::BonreePB.BEBTMetric> values) {
        PrepareBuilder();
        result.bebtMetrics_.Add(values);
        return this;
      }
      public Builder ClearBebtMetrics() {
        PrepareBuilder();
        result.bebtMetrics_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.BEMetric> BeMetricsList {
        get { return PrepareBuilder().beMetrics_; }
      }
      public int BeMetricsCount {
        get { return result.BeMetricsCount; }
      }
      public global::BonreePB.BEMetric GetBeMetrics(int index) {
        return result.GetBeMetrics(index);
      }
      public Builder SetBeMetrics(int index, global::BonreePB.BEMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.beMetrics_[index] = value;
        return this;
      }
      public Builder SetBeMetrics(int index, global::BonreePB.BEMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.beMetrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBeMetrics(global::BonreePB.BEMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.beMetrics_.Add(value);
        return this;
      }
      public Builder AddBeMetrics(global::BonreePB.BEMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.beMetrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBeMetrics(scg::IEnumerable<global::BonreePB.BEMetric> values) {
        PrepareBuilder();
        result.beMetrics_.Add(values);
        return this;
      }
      public Builder ClearBeMetrics() {
        PrepareBuilder();
        result.beMetrics_.Clear();
        return this;
      }
      
      public bool HasVmMetrics {
       get { return result.hasVmMetrics; }
      }
      public global::BonreePB.VMMetric VmMetrics {
        get { return result.VmMetrics; }
        set { SetVmMetrics(value); }
      }
      public Builder SetVmMetrics(global::BonreePB.VMMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVmMetrics = true;
        result.vmMetrics_ = value;
        return this;
      }
      public Builder SetVmMetrics(global::BonreePB.VMMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVmMetrics = true;
        result.vmMetrics_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVmMetrics(global::BonreePB.VMMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVmMetrics &&
            result.vmMetrics_ != global::BonreePB.VMMetric.DefaultInstance) {
            result.vmMetrics_ = global::BonreePB.VMMetric.CreateBuilder(result.vmMetrics_).MergeFrom(value).BuildPartial();
        } else {
          result.vmMetrics_ = value;
        }
        result.hasVmMetrics = true;
        return this;
      }
      public Builder ClearVmMetrics() {
        PrepareBuilder();
        result.hasVmMetrics = false;
        result.vmMetrics_ = null;
        return this;
      }
      
      public bool HasMaMetrics {
       get { return result.hasMaMetrics; }
      }
      public global::BonreePB.MAMetric MaMetrics {
        get { return result.MaMetrics; }
        set { SetMaMetrics(value); }
      }
      public Builder SetMaMetrics(global::BonreePB.MAMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaMetrics = true;
        result.maMetrics_ = value;
        return this;
      }
      public Builder SetMaMetrics(global::BonreePB.MAMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMaMetrics = true;
        result.maMetrics_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMaMetrics(global::BonreePB.MAMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMaMetrics &&
            result.maMetrics_ != global::BonreePB.MAMetric.DefaultInstance) {
            result.maMetrics_ = global::BonreePB.MAMetric.CreateBuilder(result.maMetrics_).MergeFrom(value).BuildPartial();
        } else {
          result.maMetrics_ = value;
        }
        result.hasMaMetrics = true;
        return this;
      }
      public Builder ClearMaMetrics() {
        PrepareBuilder();
        result.hasMaMetrics = false;
        result.maMetrics_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.CrossBTMetric> CrossBTMetircsList {
        get { return PrepareBuilder().crossBTMetircs_; }
      }
      public int CrossBTMetircsCount {
        get { return result.CrossBTMetircsCount; }
      }
      public global::BonreePB.CrossBTMetric GetCrossBTMetircs(int index) {
        return result.GetCrossBTMetircs(index);
      }
      public Builder SetCrossBTMetircs(int index, global::BonreePB.CrossBTMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.crossBTMetircs_[index] = value;
        return this;
      }
      public Builder SetCrossBTMetircs(int index, global::BonreePB.CrossBTMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.crossBTMetircs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCrossBTMetircs(global::BonreePB.CrossBTMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.crossBTMetircs_.Add(value);
        return this;
      }
      public Builder AddCrossBTMetircs(global::BonreePB.CrossBTMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.crossBTMetircs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCrossBTMetircs(scg::IEnumerable<global::BonreePB.CrossBTMetric> values) {
        PrepareBuilder();
        result.crossBTMetircs_.Add(values);
        return this;
      }
      public Builder ClearCrossBTMetircs() {
        PrepareBuilder();
        result.crossBTMetircs_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.DataSourceMetric> DsMetricsList {
        get { return PrepareBuilder().dsMetrics_; }
      }
      public int DsMetricsCount {
        get { return result.DsMetricsCount; }
      }
      public global::BonreePB.DataSourceMetric GetDsMetrics(int index) {
        return result.GetDsMetrics(index);
      }
      public Builder SetDsMetrics(int index, global::BonreePB.DataSourceMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dsMetrics_[index] = value;
        return this;
      }
      public Builder SetDsMetrics(int index, global::BonreePB.DataSourceMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dsMetrics_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDsMetrics(global::BonreePB.DataSourceMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dsMetrics_.Add(value);
        return this;
      }
      public Builder AddDsMetrics(global::BonreePB.DataSourceMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dsMetrics_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDsMetrics(scg::IEnumerable<global::BonreePB.DataSourceMetric> values) {
        PrepareBuilder();
        result.dsMetrics_.Add(values);
        return this;
      }
      public Builder ClearDsMetrics() {
        PrepareBuilder();
        result.dsMetrics_.Clear();
        return this;
      }
    }
    static MetricsReq() {
      object.ReferenceEquals(global::BonreePB.PbMetric.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
