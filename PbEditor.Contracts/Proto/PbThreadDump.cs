// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace BonreePB {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbThreadDump {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_BonreePB_ThreadMethod__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadMethod, global::BonreePB.ThreadMethod.Builder> internal__static_BonreePB_ThreadMethod__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_DumpThread__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.DumpThread, global::BonreePB.DumpThread.Builder> internal__static_BonreePB_DumpThread__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_ThreadDumpData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadDumpData, global::BonreePB.ThreadDumpData.Builder> internal__static_BonreePB_ThreadDumpData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_BonreePB_ThreadDumpReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadDumpReq, global::BonreePB.ThreadDumpReq.Builder> internal__static_BonreePB_ThreadDumpReq__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbThreadDump() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwYl90aHJlYWREdW1wLnByb3RvEghCb25yZWVQQhoOcGJfYWdlbnQucHJv", 
            "dG8i5QEKDFRocmVhZE1ldGhvZBIRCgljbGFzc05hbWUYASACKAkSEgoKbWV0", 
            "aG9kTmFtZRgCIAIoCRIQCghmaWxlTmFtZRgDIAEoCRISCgpsaW5lTnVtYmVy", 
            "GAQgASgNEg8KB2JOYXRpdmUYBSABKAgSDwoHZXhlVGltZRgGIAEoDRIPCgdj", 
            "cHVUaW1lGAcgASgNEhMKC3NlbGZFeGVUaW1lGAggASgNEhMKC3NlbGZDcHVU", 
            "aW1lGAkgASgNEisKC2NhbGxNZXRob2RzGAogAygLMhYuQm9ucmVlUEIuVGhy", 
            "ZWFkTWV0aG9kIs0CCgpEdW1wVGhyZWFkEhAKCHRocmVhZElkGAEgASgEEhIK", 
            "CnRocmVhZE5hbWUYAiABKAkSGgoSc3RhcnREdW1wVGltZVN0YW1wGAMgASgE", 
            "EiQKBXN0YXRlGAQgASgOMhUuQm9ucmVlUEIuVGhyZWFkU3RhdGUSDwoHY3B1", 
            "VGltZRgFIAEoBBIQCghsb2NrTmFtZRgGIAEoCRITCgtsb2NrT3duZWRJZBgH", 
            "IAEoBBIVCg1sb2NrT3duZXJOYW1lGAggASgJEhQKDGxvY2tNb25pdG9ycxgJ", 
            "IAMoCRIZChFsb2NrU3luY2hyb25pemVycxgKIAMoCRItCg1jYWxsZ3JhcGhS", 
            "b290GAsgAygLMhYuQm9ucmVlUEIuVGhyZWFkTWV0aG9kEigKCnRocmVhZFR5", 
            "cGUYDCABKA4yFC5Cb25yZWVQQi5UaHJlYWRUeXBlIqkBCg5UaHJlYWREdW1w", 
            "RGF0YRIQCgh0YXNrR1VJZBgBIAIoCRIRCgl0aW1lU3RhbXAYAiABKAQSKAoK", 
            "ZHVtcFJlc3VsdBgDIAEoDjIULkJvbnJlZVBCLkR1bXBSZXN1bHQSEAoIZXJy", 
            "b3JNc2cYBCABKAkSCwoDcGlkGAUgASgNEikKC2R1bXBUaHJlYWRzGAYgAygL", 
            "MhQuQm9ucmVlUEIuRHVtcFRocmVhZCJnCg1UaHJlYWREdW1wUmVxEi4KDWFn", 
            "ZW50SWRlbnRpdHkYASABKAsyFy5Cb25yZWVQQi5BZ2VudElkZW50aXR5EiYK", 
            "BGRhdGEYAiABKAsyGC5Cb25yZWVQQi5UaHJlYWREdW1wRGF0YSqvAQoLVGhy", 
            "ZWFkU3RhdGUSFAoQVEhSRUFEX1NUQVRFX05FVxABEhkKFVRIUkVBRF9TVEFU", 
            "RV9SVU5OQUJMRRACEhgKFFRIUkVBRF9TVEFURV9CTE9DS0VEEAMSGAoUVEhS", 
            "RUFEX1NUQVRFX1dBSVRJTkcQBBIeChpUSFJFQURfU1RBVEVfVElNRURfV0FJ", 
            "VElORxAFEhsKF1RIUkVBRF9TVEFURV9URVJNSU5BVEVEEAYqVAoKVGhyZWFk", 
            "VHlwZRISCg5USFJFQURfVFlQRV9CVBABEhoKFlRIUkVBRF9UWVBFX0JBQ0tH", 
            "Uk9VTkQQAhIWChJUSFJFQURfVFlQRV9PVEhFRVIQAyouCgpEdW1wUmVzdWx0", 
            "EhAKDERVTVBfU1VDQ0VTUxABEg4KCkRVTVBfRkFJTEQQAkIZChdjb20uYm9u", 
            "cmVlLnByb3RvYnVmLmFwbUr9GwoGEgQAAEgBCggKAQISAwAIEAoICgEIEgMB", 
            "ADAKCwoECOcHABIDAQAwCgwKBQjnBwACEgMBBxMKDQoGCOcHAAIAEgMBBxMK", 
            "DgoHCOcHAAIAARIDAQcTCgwKBQjnBwAHEgMBFi8KCQoCAwASAwMHFwoZCgIE", 
            "ABIEBgARARoN5pa55rOV6LCD55SoCgoKCgMEAAESAwYIFAoUCgQEAAIAEgMH", 
            "BDYiB+exu+WQjQoKDAoFBAACAAQSAwcEDAoMCgUEAAIABRIDBw0TCgwKBQQA", 
            "AgABEgMHFB0KDAoFBAACAAMSAwc0NQoXCgQEAAIBEgMIBDYiCuaWueazleWQ", 
            "jQoKDAoFBAACAQQSAwgEDAoMCgUEAAIBBRIDCA0TCgwKBQQAAgEBEgMIFB4K", 
            "DAoFBAACAQMSAwg0NQodCgQEAAICEgMJBDYiEOS7o+eggeaWh+S7tuWQjQoK", 
            "DAoFBAACAgQSAwkEDAoMCgUEAAICBRIDCQ0TCgwKBQQAAgIBEgMJFBwKDAoF", 
            "BAACAgMSAwk0NQoaCgQEAAIDEgMKBDYiDeS7o+eggeihjOaVsAoKDAoFBAAC", 
            "AwQSAwoEDAoMCgUEAAIDBRIDCg0TCgwKBQQAAgMBEgMKFB4KDAoFBAACAwMS", 
            "Awo0NQogCgQEAAIEEgMLBDYiE+aYr+WQpm5hdGl2ZeaWueazlQoKDAoFBAAC", 
            "BAQSAwsEDAoMCgUEAAIEBRIDCw0RCgwKBQQAAgQBEgMLEhkKDAoFBAACBAMS", 
            "Aws0NQomCgQEAAIFEgMMBDYiGeiwg+eUqOivpeWHveaVsOaAu+aXtumXtAoK", 
            "DAoFBAACBQQSAwwEDAoMCgUEAAIFBRIDDA0TCgwKBQQAAgUBEgMMFBsKDAoF", 
            "BAACBQMSAww0NQoXCgQEAAIGEgMNBDYiCmNwdeaXtumXtAoKDAoFBAACBgQS", 
            "Aw0EDAoMCgUEAAIGBRIDDQ0TCgwKBQQAAgYBEgMNFBsKDAoFBAACBgMSAw00", 
            "NQojCgQEAAIHEgMOBDYiFuivpeWHveaVsOiHqui6q+iAl+aXtgoKDAoFBAAC", 
            "BwQSAw4EDAoMCgUEAAIHBRIDDg0TCgwKBQQAAgcBEgMOFB8KDAoFBAACBwMS", 
            "Aw40NQomCgQEAAIIEgMPBDYiGeivpeWHveaVsOiHqui6q2NwdeiAl+aXtgoK", 
            "DAoFBAACCAQSAw8EDAoMCgUEAAIIBRIDDw0TCgwKBQQAAggBEgMPFB8KDAoF", 
            "BAACCAMSAw80NQodCgQEAAIJEgMQBDciEOiwg+eUqOeahOaWueazlQoKDAoF", 
            "BAACCQQSAxAEDAoMCgUEAAIJBhIDEA0ZCgwKBQQAAgkBEgMQGiUKDAoFBAAC", 
            "CQMSAxA0NgoZCgIFABIEFAAbARoN57q/56iL54q25oCBCgoKCgMFAAESAxQF", 
            "EAoLCgQFAAIAEgMVBCYKDAoFBQACAAESAxUEFAoMCgUFAAIAAhIDFSQlCgsK", 
            "BAUAAgESAxYEJgoMCgUFAAIBARIDFgQZCgwKBQUAAgECEgMWJCUKCwoEBQAC", 
            "AhIDFwQmCgwKBQUAAgIBEgMXBBgKDAoFBQACAgISAxckJQoLCgQFAAIDEgMY", 
            "BCYKDAoFBQACAwESAxgEGAoMCgUFAAIDAhIDGCQlCgsKBAUAAgQSAxkEJgoM", 
            "CgUFAAIEARIDGQQeCgwKBQUAAgQCEgMZJCUKCwoEBQACBRIDGgQmCgwKBQUA", 
            "AgUBEgMaBBsKDAoFBQACBQISAxokJQoZCgIFARIEHgAiARoN57q/56iL57G7", 
            "5Z6LCgoKCgMFAQESAx4FDwoLCgQFAQIAEgMfBCYKDAoFBQECAAESAx8EEgoM", 
            "CgUFAQIAAhIDHyQlCgsKBAUBAgESAyAEJgoMCgUFAQIBARIDIAQaCgwKBQUB", 
            "AgECEgMgJCUKCwoEBQECAhIDIQQmCgwKBQUBAgIBEgMhBBYKDAoFBQECAgIS", 
            "AyEkJQoXCgIEARIEJQAyARoLZHVtcOe6v+eoiwoKCgoDBAEBEgMlCBIKFgoE", 
            "BAECABIDJgQyIgnnur/nqItpZAoKDAoFBAECAAQSAyYEDAoMCgUEAQIABRID", 
            "Jg0TCgwKBQQBAgABEgMmFBwKDAoFBAECAAMSAyYwMQoaCgQEAQIBEgMnBDIi", 
            "Dee6v+eoi+WQjeensAoKDAoFBAECAQQSAycEDAoMCgUEAQIBBRIDJw0TCgwK", 
            "BQQBAgEBEgMnFB4KDAoFBAECAQMSAycwMQomCgQEAQICEgMoBDIiGee6v+eo", 
            "i+W8gOWni+WIhuaekOaXtuWIuwoKDAoFBAECAgQSAygEDAoMCgUEAQICBRID", 
            "KA0TCgwKBQQBAgIBEgMoFCYKDAoFBAECAgMSAygwMQoaCgQEAQIDEgMpBDIi", 
            "Dee6v+eoi+eKtuaAgQoKDAoFBAECAwQSAykEDAoMCgUEAQIDBhIDKQ0YCgwK", 
            "BQQBAgMBEgMpGR4KDAoFBAECAwMSAykwMQoXCgQEAQIEEgMqBDIiCmNwdeaX", 
            "tumXtAoKDAoFBAECBAQSAyoEDAoMCgUEAQIEBRIDKg0TCgwKBQQBAgQBEgMq", 
            "FBsKDAoFBAECBAMSAyowMQodCgQEAQIFEgMrBDIiEOetieW+heeahOi1hOa6", 
            "kAoKDAoFBAECBQQSAysEDAoMCgUEAQIFBRIDKw0TCgwKBQQBAgUBEgMrFBwK", 
            "DAoFBAECBQMSAyswMQodCgQEAQIGEgMsBDIiEOaMgeaciWxvY2vnmoRpZAoK", 
            "DAoFBAECBgQSAywEDAoMCgUEAQIGBRIDLA0TCgwKBQQBAgYBEgMsFB8KDAoF", 
            "BAECBgMSAywwMQohCgQEAQIHEgMtBDIiFOaMgeaciWxvY2vnmoTlkI3np7AK", 
            "CgwKBQQBAgcEEgMtBAwKDAoFBAECBwUSAy0NEwoMCgUEAQIHARIDLRQhCgwK", 
            "BQQBAgcDEgMtMDEKOwoEBAECCBIDLgQyIi7lvZPliY3nur/nqIvlt7Lnu4/m", 
            "jozmj6HnmoTplIHlr7nosaHnmoTliJfooagKCgwKBQQBAggEEgMuBAwKDAoF", 
            "BAECCAUSAy4NEwoMCgUEAQIIARIDLhQgCgwKBQQBAggDEgMuMDEKNQoEBAEC", 
            "CRIDLwQzIijlvZPliY3nur/nqIvlt7Lnu4/mjozmj6HnmoRTeW5jaHJvbml6", 
            "ZXIKCgwKBQQBAgkEEgMvBAwKDAoFBAECCQUSAy8NEwoMCgUEAQIJARIDLxQl", 
            "CgwKBQQBAgkDEgMvMDIKXAoEBAECChIDMAQzIk9jYWxsIGdyYXBoIOagueiK", 
            "gueCue+8jFRocmVhZE1ldGhvZOS4uuagkeW9oue7k+aehO+8jOWPr+iDveac", 
            "ieWkmuS4qnJvb3ToioLngrkKCgwKBQQBAgoEEgMwBAwKDAoFBAECCgYSAzAN", 
            "GQoMCgUEAQIKARIDMBonCgwKBQQBAgoDEgMwMDIKGgoEBAECCxIDMQQzIg3n", 
            "ur/nqIvnsbvlnosKCgwKBQQBAgsEEgMxBAwKDAoFBAECCwYSAzENFwoMCgUE", 
            "AQILARIDMRgiCgwKBQQBAgsDEgMxMDIKFwoCBQISBDUAOAEaC2R1bXDnu5Pm", 
            "npwKCgoKAwUCARIDNQUPCgsKBAUCAgASAzYEIgoMCgUFAgIAARIDNgQQCgwK", 
            "BQUCAgACEgM2ICEKCwoEBQICARIDNwQiCgwKBQUCAgEBEgM3BA4KDAoFBQIC", 
            "AQISAzcgIQodCgIEAhIEOwBCARoRVGhyZWFkRHVtcOaVsOaNrgoKCgoDBAIB", 
            "EgM7CBYKJAoEBAICABIDPAQ2Ihfnur/nqIvliZbmnpDku7vliqFndWlkCgoM", 
            "CgUEAgIABBIDPAQMCgwKBQQCAgAFEgM8DRMKDAoFBAICAAESAzwUHAoMCgUE", 
            "AgIAAxIDPDQ1CikKBAQCAgESAz0ENiIc57q/56iL5YmW5p6Q55qE5byA5aeL", 
            "5pe26Ze0CgoMCgUEAgIBBBIDPQQMCgwKBQQCAgEFEgM9DRMKDAoFBAICAQES", 
            "Az0UHQoMCgUEAgIBAxIDPTQ1ChoKBAQCAgISAz4ENiIN5YmW5p6Q57uT5p6c", 
            "CgoMCgUEAgICBBIDPgQMCgwKBQQCAgIGEgM+DRcKDAoFBAICAgESAz4YIgoM", 
            "CgUEAgICAxIDPjQ1CiAKBAQCAgMSAz8ENiIT5YmW5p6Q5aSx6LSl5Y6f5Zug", 
            "CgoMCgUEAgIDBBIDPwQMCgwKBQQCAgMFEgM/DRMKDAoFBAICAwESAz8UHAoM", 
            "CgUEAgIDAxIDPzQ1ChYKBAQCAgQSA0AENiIJ6L+b56iLaWQKCgwKBQQCAgQE", 
            "EgNABAwKDAoFBAICBAUSA0ANEwoMCgUEAgIEARIDQBQXCgwKBQQCAgQDEgNA", 
            "NDUKJgoEBAICBRIDQQQ2IhnlpJrkuKrnur/nqIvmiafooYzmg4XlhrUKCgwK", 
            "BQQCAgUEEgNBBAwKDAoFBAICBQYSA0ENFwoMCgUEAgIFARIDQRkkCgwKBQQC", 
            "AgUDEgNBNDUKHQoCBAMSBEUASAEaEVRocmVhZER1bXDor7fmsYIKCgoKAwQD", 
            "ARIDRQgVChwKBAQDAgASA0YEMiIPYWdlbnQgaWRlbnRpdHkKCgwKBQQDAgAE", 
            "EgNGBAwKDAoFBAMCAAYSA0YNGgoMCgUEAwIAARIDRhsoCgwKBQQDAgADEgNG", 
            "MDEKHgoEBAMCARIDRwQyIhFUaHJlYWREdW1w5pWw5o2uCgoMCgUEAwIBBBID", 
          "RwQMCgwKBQQDAgEGEgNHDRsKDAoFBAMCAQESA0ccIAoMCgUEAwIBAxIDRzAx"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_BonreePB_ThreadMethod__Descriptor = Descriptor.MessageTypes[0];
        internal__static_BonreePB_ThreadMethod__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadMethod, global::BonreePB.ThreadMethod.Builder>(internal__static_BonreePB_ThreadMethod__Descriptor,
                new string[] { "ClassName", "MethodName", "FileName", "LineNumber", "BNative", "ExeTime", "CpuTime", "SelfExeTime", "SelfCpuTime", "CallMethods", });
        internal__static_BonreePB_DumpThread__Descriptor = Descriptor.MessageTypes[1];
        internal__static_BonreePB_DumpThread__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.DumpThread, global::BonreePB.DumpThread.Builder>(internal__static_BonreePB_DumpThread__Descriptor,
                new string[] { "ThreadId", "ThreadName", "StartDumpTimeStamp", "State", "CpuTime", "LockName", "LockOwnedId", "LockOwnerName", "LockMonitors", "LockSynchronizers", "CallgraphRoot", "ThreadType", });
        internal__static_BonreePB_ThreadDumpData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_BonreePB_ThreadDumpData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadDumpData, global::BonreePB.ThreadDumpData.Builder>(internal__static_BonreePB_ThreadDumpData__Descriptor,
                new string[] { "TaskGUId", "TimeStamp", "DumpResult", "ErrorMsg", "Pid", "DumpThreads", });
        internal__static_BonreePB_ThreadDumpReq__Descriptor = Descriptor.MessageTypes[3];
        internal__static_BonreePB_ThreadDumpReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::BonreePB.ThreadDumpReq, global::BonreePB.ThreadDumpReq.Builder>(internal__static_BonreePB_ThreadDumpReq__Descriptor,
                new string[] { "AgentIdentity", "Data", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::BonreePB.PbAgent.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::BonreePB.PbAgent.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ThreadState {
    THREAD_STATE_NEW = 1,
    THREAD_STATE_RUNNABLE = 2,
    THREAD_STATE_BLOCKED = 3,
    THREAD_STATE_WAITING = 4,
    THREAD_STATE_TIMED_WAITING = 5,
    THREAD_STATE_TERMINATED = 6,
  }
  
  public enum ThreadType {
    THREAD_TYPE_BT = 1,
    THREAD_TYPE_BACKGROUND = 2,
    THREAD_TYPE_OTHEER = 3,
  }
  
  public enum DumpResult {
    DUMP_SUCCESS = 1,
    DUMP_FAILD = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ThreadMethod : pb::GeneratedMessage<ThreadMethod, ThreadMethod.Builder> {
    private ThreadMethod() { }
    private static readonly ThreadMethod defaultInstance = new ThreadMethod().MakeReadOnly();
    private static readonly string[] _threadMethodFieldNames = new string[] { "bNative", "callMethods", "className", "cpuTime", "exeTime", "fileName", "lineNumber", "methodName", "selfCpuTime", "selfExeTime" };
    private static readonly uint[] _threadMethodFieldTags = new uint[] { 40, 82, 10, 56, 48, 26, 32, 18, 72, 64 };
    public static ThreadMethod DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ThreadMethod DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ThreadMethod ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_ThreadMethod__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ThreadMethod, ThreadMethod.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_ThreadMethod__FieldAccessorTable; }
    }
    
    public const int ClassNameFieldNumber = 1;
    private bool hasClassName;
    private string className_ = "";
    public bool HasClassName {
      get { return hasClassName; }
    }
    public string ClassName {
      get { return className_; }
    }
    
    public const int MethodNameFieldNumber = 2;
    private bool hasMethodName;
    private string methodName_ = "";
    public bool HasMethodName {
      get { return hasMethodName; }
    }
    public string MethodName {
      get { return methodName_; }
    }
    
    public const int FileNameFieldNumber = 3;
    private bool hasFileName;
    private string fileName_ = "";
    public bool HasFileName {
      get { return hasFileName; }
    }
    public string FileName {
      get { return fileName_; }
    }
    
    public const int LineNumberFieldNumber = 4;
    private bool hasLineNumber;
    private uint lineNumber_;
    public bool HasLineNumber {
      get { return hasLineNumber; }
    }
    [global::System.CLSCompliant(false)]
    public uint LineNumber {
      get { return lineNumber_; }
    }
    
    public const int BNativeFieldNumber = 5;
    private bool hasBNative;
    private bool bNative_;
    public bool HasBNative {
      get { return hasBNative; }
    }
    public bool BNative {
      get { return bNative_; }
    }
    
    public const int ExeTimeFieldNumber = 6;
    private bool hasExeTime;
    private uint exeTime_;
    public bool HasExeTime {
      get { return hasExeTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExeTime {
      get { return exeTime_; }
    }
    
    public const int CpuTimeFieldNumber = 7;
    private bool hasCpuTime;
    private uint cpuTime_;
    public bool HasCpuTime {
      get { return hasCpuTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CpuTime {
      get { return cpuTime_; }
    }
    
    public const int SelfExeTimeFieldNumber = 8;
    private bool hasSelfExeTime;
    private uint selfExeTime_;
    public bool HasSelfExeTime {
      get { return hasSelfExeTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint SelfExeTime {
      get { return selfExeTime_; }
    }
    
    public const int SelfCpuTimeFieldNumber = 9;
    private bool hasSelfCpuTime;
    private uint selfCpuTime_;
    public bool HasSelfCpuTime {
      get { return hasSelfCpuTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint SelfCpuTime {
      get { return selfCpuTime_; }
    }
    
    public const int CallMethodsFieldNumber = 10;
    private pbc::PopsicleList<global::BonreePB.ThreadMethod> callMethods_ = new pbc::PopsicleList<global::BonreePB.ThreadMethod>();
    public scg::IList<global::BonreePB.ThreadMethod> CallMethodsList {
      get { return callMethods_; }
    }
    public int CallMethodsCount {
      get { return callMethods_.Count; }
    }
    public global::BonreePB.ThreadMethod GetCallMethods(int index) {
      return callMethods_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClassName) return false;
        if (!hasMethodName) return false;
        foreach (global::BonreePB.ThreadMethod element in CallMethodsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _threadMethodFieldNames;
      if (hasClassName) {
        output.WriteString(1, field_names[2], ClassName);
      }
      if (hasMethodName) {
        output.WriteString(2, field_names[7], MethodName);
      }
      if (hasFileName) {
        output.WriteString(3, field_names[5], FileName);
      }
      if (hasLineNumber) {
        output.WriteUInt32(4, field_names[6], LineNumber);
      }
      if (hasBNative) {
        output.WriteBool(5, field_names[0], BNative);
      }
      if (hasExeTime) {
        output.WriteUInt32(6, field_names[4], ExeTime);
      }
      if (hasCpuTime) {
        output.WriteUInt32(7, field_names[3], CpuTime);
      }
      if (hasSelfExeTime) {
        output.WriteUInt32(8, field_names[9], SelfExeTime);
      }
      if (hasSelfCpuTime) {
        output.WriteUInt32(9, field_names[8], SelfCpuTime);
      }
      if (callMethods_.Count > 0) {
        output.WriteMessageArray(10, field_names[1], callMethods_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClassName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ClassName);
      }
      if (hasMethodName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, MethodName);
      }
      if (hasFileName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, FileName);
      }
      if (hasLineNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, LineNumber);
      }
      if (hasBNative) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, BNative);
      }
      if (hasExeTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ExeTime);
      }
      if (hasCpuTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, CpuTime);
      }
      if (hasSelfExeTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, SelfExeTime);
      }
      if (hasSelfCpuTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, SelfCpuTime);
      }
      foreach (global::BonreePB.ThreadMethod element in CallMethodsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ThreadMethod ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadMethod ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadMethod ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadMethod ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadMethod ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadMethod ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ThreadMethod ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ThreadMethod ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ThreadMethod ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadMethod ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ThreadMethod MakeReadOnly() {
      callMethods_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ThreadMethod prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ThreadMethod, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ThreadMethod cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ThreadMethod result;
      
      private ThreadMethod PrepareBuilder() {
        if (resultIsReadOnly) {
          ThreadMethod original = result;
          result = new ThreadMethod();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ThreadMethod MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ThreadMethod.Descriptor; }
      }
      
      public override ThreadMethod DefaultInstanceForType {
        get { return global::BonreePB.ThreadMethod.DefaultInstance; }
      }
      
      public override ThreadMethod BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ThreadMethod) {
          return MergeFrom((ThreadMethod) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ThreadMethod other) {
        if (other == global::BonreePB.ThreadMethod.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClassName) {
          ClassName = other.ClassName;
        }
        if (other.HasMethodName) {
          MethodName = other.MethodName;
        }
        if (other.HasFileName) {
          FileName = other.FileName;
        }
        if (other.HasLineNumber) {
          LineNumber = other.LineNumber;
        }
        if (other.HasBNative) {
          BNative = other.BNative;
        }
        if (other.HasExeTime) {
          ExeTime = other.ExeTime;
        }
        if (other.HasCpuTime) {
          CpuTime = other.CpuTime;
        }
        if (other.HasSelfExeTime) {
          SelfExeTime = other.SelfExeTime;
        }
        if (other.HasSelfCpuTime) {
          SelfCpuTime = other.SelfCpuTime;
        }
        if (other.callMethods_.Count != 0) {
          result.callMethods_.Add(other.callMethods_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_threadMethodFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _threadMethodFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasClassName = input.ReadString(ref result.className_);
              break;
            }
            case 18: {
              result.hasMethodName = input.ReadString(ref result.methodName_);
              break;
            }
            case 26: {
              result.hasFileName = input.ReadString(ref result.fileName_);
              break;
            }
            case 32: {
              result.hasLineNumber = input.ReadUInt32(ref result.lineNumber_);
              break;
            }
            case 40: {
              result.hasBNative = input.ReadBool(ref result.bNative_);
              break;
            }
            case 48: {
              result.hasExeTime = input.ReadUInt32(ref result.exeTime_);
              break;
            }
            case 56: {
              result.hasCpuTime = input.ReadUInt32(ref result.cpuTime_);
              break;
            }
            case 64: {
              result.hasSelfExeTime = input.ReadUInt32(ref result.selfExeTime_);
              break;
            }
            case 72: {
              result.hasSelfCpuTime = input.ReadUInt32(ref result.selfCpuTime_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.callMethods_, global::BonreePB.ThreadMethod.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClassName {
        get { return result.hasClassName; }
      }
      public string ClassName {
        get { return result.ClassName; }
        set { SetClassName(value); }
      }
      public Builder SetClassName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassName = true;
        result.className_ = value;
        return this;
      }
      public Builder ClearClassName() {
        PrepareBuilder();
        result.hasClassName = false;
        result.className_ = "";
        return this;
      }
      
      public bool HasMethodName {
        get { return result.hasMethodName; }
      }
      public string MethodName {
        get { return result.MethodName; }
        set { SetMethodName(value); }
      }
      public Builder SetMethodName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodName = true;
        result.methodName_ = value;
        return this;
      }
      public Builder ClearMethodName() {
        PrepareBuilder();
        result.hasMethodName = false;
        result.methodName_ = "";
        return this;
      }
      
      public bool HasFileName {
        get { return result.hasFileName; }
      }
      public string FileName {
        get { return result.FileName; }
        set { SetFileName(value); }
      }
      public Builder SetFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFileName = true;
        result.fileName_ = value;
        return this;
      }
      public Builder ClearFileName() {
        PrepareBuilder();
        result.hasFileName = false;
        result.fileName_ = "";
        return this;
      }
      
      public bool HasLineNumber {
        get { return result.hasLineNumber; }
      }
      [global::System.CLSCompliant(false)]
      public uint LineNumber {
        get { return result.LineNumber; }
        set { SetLineNumber(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLineNumber(uint value) {
        PrepareBuilder();
        result.hasLineNumber = true;
        result.lineNumber_ = value;
        return this;
      }
      public Builder ClearLineNumber() {
        PrepareBuilder();
        result.hasLineNumber = false;
        result.lineNumber_ = 0;
        return this;
      }
      
      public bool HasBNative {
        get { return result.hasBNative; }
      }
      public bool BNative {
        get { return result.BNative; }
        set { SetBNative(value); }
      }
      public Builder SetBNative(bool value) {
        PrepareBuilder();
        result.hasBNative = true;
        result.bNative_ = value;
        return this;
      }
      public Builder ClearBNative() {
        PrepareBuilder();
        result.hasBNative = false;
        result.bNative_ = false;
        return this;
      }
      
      public bool HasExeTime {
        get { return result.hasExeTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExeTime {
        get { return result.ExeTime; }
        set { SetExeTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExeTime(uint value) {
        PrepareBuilder();
        result.hasExeTime = true;
        result.exeTime_ = value;
        return this;
      }
      public Builder ClearExeTime() {
        PrepareBuilder();
        result.hasExeTime = false;
        result.exeTime_ = 0;
        return this;
      }
      
      public bool HasCpuTime {
        get { return result.hasCpuTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CpuTime {
        get { return result.CpuTime; }
        set { SetCpuTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCpuTime(uint value) {
        PrepareBuilder();
        result.hasCpuTime = true;
        result.cpuTime_ = value;
        return this;
      }
      public Builder ClearCpuTime() {
        PrepareBuilder();
        result.hasCpuTime = false;
        result.cpuTime_ = 0;
        return this;
      }
      
      public bool HasSelfExeTime {
        get { return result.hasSelfExeTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint SelfExeTime {
        get { return result.SelfExeTime; }
        set { SetSelfExeTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSelfExeTime(uint value) {
        PrepareBuilder();
        result.hasSelfExeTime = true;
        result.selfExeTime_ = value;
        return this;
      }
      public Builder ClearSelfExeTime() {
        PrepareBuilder();
        result.hasSelfExeTime = false;
        result.selfExeTime_ = 0;
        return this;
      }
      
      public bool HasSelfCpuTime {
        get { return result.hasSelfCpuTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint SelfCpuTime {
        get { return result.SelfCpuTime; }
        set { SetSelfCpuTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSelfCpuTime(uint value) {
        PrepareBuilder();
        result.hasSelfCpuTime = true;
        result.selfCpuTime_ = value;
        return this;
      }
      public Builder ClearSelfCpuTime() {
        PrepareBuilder();
        result.hasSelfCpuTime = false;
        result.selfCpuTime_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.ThreadMethod> CallMethodsList {
        get { return PrepareBuilder().callMethods_; }
      }
      public int CallMethodsCount {
        get { return result.CallMethodsCount; }
      }
      public global::BonreePB.ThreadMethod GetCallMethods(int index) {
        return result.GetCallMethods(index);
      }
      public Builder SetCallMethods(int index, global::BonreePB.ThreadMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callMethods_[index] = value;
        return this;
      }
      public Builder SetCallMethods(int index, global::BonreePB.ThreadMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callMethods_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCallMethods(global::BonreePB.ThreadMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callMethods_.Add(value);
        return this;
      }
      public Builder AddCallMethods(global::BonreePB.ThreadMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callMethods_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCallMethods(scg::IEnumerable<global::BonreePB.ThreadMethod> values) {
        PrepareBuilder();
        result.callMethods_.Add(values);
        return this;
      }
      public Builder ClearCallMethods() {
        PrepareBuilder();
        result.callMethods_.Clear();
        return this;
      }
    }
    static ThreadMethod() {
      object.ReferenceEquals(global::BonreePB.PbThreadDump.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DumpThread : pb::GeneratedMessage<DumpThread, DumpThread.Builder> {
    private DumpThread() { }
    private static readonly DumpThread defaultInstance = new DumpThread().MakeReadOnly();
    private static readonly string[] _dumpThreadFieldNames = new string[] { "callgraphRoot", "cpuTime", "lockMonitors", "lockName", "lockOwnedId", "lockOwnerName", "lockSynchronizers", "startDumpTimeStamp", "state", "threadId", "threadName", "threadType" };
    private static readonly uint[] _dumpThreadFieldTags = new uint[] { 90, 40, 74, 50, 56, 66, 82, 24, 32, 8, 18, 96 };
    public static DumpThread DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DumpThread DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DumpThread ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_DumpThread__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DumpThread, DumpThread.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_DumpThread__FieldAccessorTable; }
    }
    
    public const int ThreadIdFieldNumber = 1;
    private bool hasThreadId;
    private ulong threadId_;
    public bool HasThreadId {
      get { return hasThreadId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ThreadId {
      get { return threadId_; }
    }
    
    public const int ThreadNameFieldNumber = 2;
    private bool hasThreadName;
    private string threadName_ = "";
    public bool HasThreadName {
      get { return hasThreadName; }
    }
    public string ThreadName {
      get { return threadName_; }
    }
    
    public const int StartDumpTimeStampFieldNumber = 3;
    private bool hasStartDumpTimeStamp;
    private ulong startDumpTimeStamp_;
    public bool HasStartDumpTimeStamp {
      get { return hasStartDumpTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong StartDumpTimeStamp {
      get { return startDumpTimeStamp_; }
    }
    
    public const int StateFieldNumber = 4;
    private bool hasState;
    private global::BonreePB.ThreadState state_ = global::BonreePB.ThreadState.THREAD_STATE_NEW;
    public bool HasState {
      get { return hasState; }
    }
    public global::BonreePB.ThreadState State {
      get { return state_; }
    }
    
    public const int CpuTimeFieldNumber = 5;
    private bool hasCpuTime;
    private ulong cpuTime_;
    public bool HasCpuTime {
      get { return hasCpuTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong CpuTime {
      get { return cpuTime_; }
    }
    
    public const int LockNameFieldNumber = 6;
    private bool hasLockName;
    private string lockName_ = "";
    public bool HasLockName {
      get { return hasLockName; }
    }
    public string LockName {
      get { return lockName_; }
    }
    
    public const int LockOwnedIdFieldNumber = 7;
    private bool hasLockOwnedId;
    private ulong lockOwnedId_;
    public bool HasLockOwnedId {
      get { return hasLockOwnedId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong LockOwnedId {
      get { return lockOwnedId_; }
    }
    
    public const int LockOwnerNameFieldNumber = 8;
    private bool hasLockOwnerName;
    private string lockOwnerName_ = "";
    public bool HasLockOwnerName {
      get { return hasLockOwnerName; }
    }
    public string LockOwnerName {
      get { return lockOwnerName_; }
    }
    
    public const int LockMonitorsFieldNumber = 9;
    private pbc::PopsicleList<string> lockMonitors_ = new pbc::PopsicleList<string>();
    public scg::IList<string> LockMonitorsList {
      get { return pbc::Lists.AsReadOnly(lockMonitors_); }
    }
    public int LockMonitorsCount {
      get { return lockMonitors_.Count; }
    }
    public string GetLockMonitors(int index) {
      return lockMonitors_[index];
    }
    
    public const int LockSynchronizersFieldNumber = 10;
    private pbc::PopsicleList<string> lockSynchronizers_ = new pbc::PopsicleList<string>();
    public scg::IList<string> LockSynchronizersList {
      get { return pbc::Lists.AsReadOnly(lockSynchronizers_); }
    }
    public int LockSynchronizersCount {
      get { return lockSynchronizers_.Count; }
    }
    public string GetLockSynchronizers(int index) {
      return lockSynchronizers_[index];
    }
    
    public const int CallgraphRootFieldNumber = 11;
    private pbc::PopsicleList<global::BonreePB.ThreadMethod> callgraphRoot_ = new pbc::PopsicleList<global::BonreePB.ThreadMethod>();
    public scg::IList<global::BonreePB.ThreadMethod> CallgraphRootList {
      get { return callgraphRoot_; }
    }
    public int CallgraphRootCount {
      get { return callgraphRoot_.Count; }
    }
    public global::BonreePB.ThreadMethod GetCallgraphRoot(int index) {
      return callgraphRoot_[index];
    }
    
    public const int ThreadTypeFieldNumber = 12;
    private bool hasThreadType;
    private global::BonreePB.ThreadType threadType_ = global::BonreePB.ThreadType.THREAD_TYPE_BT;
    public bool HasThreadType {
      get { return hasThreadType; }
    }
    public global::BonreePB.ThreadType ThreadType {
      get { return threadType_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::BonreePB.ThreadMethod element in CallgraphRootList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _dumpThreadFieldNames;
      if (hasThreadId) {
        output.WriteUInt64(1, field_names[9], ThreadId);
      }
      if (hasThreadName) {
        output.WriteString(2, field_names[10], ThreadName);
      }
      if (hasStartDumpTimeStamp) {
        output.WriteUInt64(3, field_names[7], StartDumpTimeStamp);
      }
      if (hasState) {
        output.WriteEnum(4, field_names[8], (int) State, State);
      }
      if (hasCpuTime) {
        output.WriteUInt64(5, field_names[1], CpuTime);
      }
      if (hasLockName) {
        output.WriteString(6, field_names[3], LockName);
      }
      if (hasLockOwnedId) {
        output.WriteUInt64(7, field_names[4], LockOwnedId);
      }
      if (hasLockOwnerName) {
        output.WriteString(8, field_names[5], LockOwnerName);
      }
      if (lockMonitors_.Count > 0) {
        output.WriteStringArray(9, field_names[2], lockMonitors_);
      }
      if (lockSynchronizers_.Count > 0) {
        output.WriteStringArray(10, field_names[6], lockSynchronizers_);
      }
      if (callgraphRoot_.Count > 0) {
        output.WriteMessageArray(11, field_names[0], callgraphRoot_);
      }
      if (hasThreadType) {
        output.WriteEnum(12, field_names[11], (int) ThreadType, ThreadType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasThreadId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ThreadId);
      }
      if (hasThreadName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ThreadName);
      }
      if (hasStartDumpTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, StartDumpTimeStamp);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) State);
      }
      if (hasCpuTime) {
        size += pb::CodedOutputStream.ComputeUInt64Size(5, CpuTime);
      }
      if (hasLockName) {
        size += pb::CodedOutputStream.ComputeStringSize(6, LockName);
      }
      if (hasLockOwnedId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, LockOwnedId);
      }
      if (hasLockOwnerName) {
        size += pb::CodedOutputStream.ComputeStringSize(8, LockOwnerName);
      }
      {
        int dataSize = 0;
        foreach (string element in LockMonitorsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * lockMonitors_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in LockSynchronizersList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * lockSynchronizers_.Count;
      }
      foreach (global::BonreePB.ThreadMethod element in CallgraphRootList) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, element);
      }
      if (hasThreadType) {
        size += pb::CodedOutputStream.ComputeEnumSize(12, (int) ThreadType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static DumpThread ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DumpThread ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DumpThread ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DumpThread ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DumpThread ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DumpThread ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DumpThread ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DumpThread ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DumpThread ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DumpThread ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DumpThread MakeReadOnly() {
      lockMonitors_.MakeReadOnly();
      lockSynchronizers_.MakeReadOnly();
      callgraphRoot_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DumpThread prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DumpThread, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DumpThread cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DumpThread result;
      
      private DumpThread PrepareBuilder() {
        if (resultIsReadOnly) {
          DumpThread original = result;
          result = new DumpThread();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DumpThread MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.DumpThread.Descriptor; }
      }
      
      public override DumpThread DefaultInstanceForType {
        get { return global::BonreePB.DumpThread.DefaultInstance; }
      }
      
      public override DumpThread BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DumpThread) {
          return MergeFrom((DumpThread) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DumpThread other) {
        if (other == global::BonreePB.DumpThread.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasThreadId) {
          ThreadId = other.ThreadId;
        }
        if (other.HasThreadName) {
          ThreadName = other.ThreadName;
        }
        if (other.HasStartDumpTimeStamp) {
          StartDumpTimeStamp = other.StartDumpTimeStamp;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasCpuTime) {
          CpuTime = other.CpuTime;
        }
        if (other.HasLockName) {
          LockName = other.LockName;
        }
        if (other.HasLockOwnedId) {
          LockOwnedId = other.LockOwnedId;
        }
        if (other.HasLockOwnerName) {
          LockOwnerName = other.LockOwnerName;
        }
        if (other.lockMonitors_.Count != 0) {
          result.lockMonitors_.Add(other.lockMonitors_);
        }
        if (other.lockSynchronizers_.Count != 0) {
          result.lockSynchronizers_.Add(other.lockSynchronizers_);
        }
        if (other.callgraphRoot_.Count != 0) {
          result.callgraphRoot_.Add(other.callgraphRoot_);
        }
        if (other.HasThreadType) {
          ThreadType = other.ThreadType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dumpThreadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dumpThreadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasThreadId = input.ReadUInt64(ref result.threadId_);
              break;
            }
            case 18: {
              result.hasThreadName = input.ReadString(ref result.threadName_);
              break;
            }
            case 24: {
              result.hasStartDumpTimeStamp = input.ReadUInt64(ref result.startDumpTimeStamp_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasCpuTime = input.ReadUInt64(ref result.cpuTime_);
              break;
            }
            case 50: {
              result.hasLockName = input.ReadString(ref result.lockName_);
              break;
            }
            case 56: {
              result.hasLockOwnedId = input.ReadUInt64(ref result.lockOwnedId_);
              break;
            }
            case 66: {
              result.hasLockOwnerName = input.ReadString(ref result.lockOwnerName_);
              break;
            }
            case 74: {
              input.ReadStringArray(tag, field_name, result.lockMonitors_);
              break;
            }
            case 82: {
              input.ReadStringArray(tag, field_name, result.lockSynchronizers_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.callgraphRoot_, global::BonreePB.ThreadMethod.DefaultInstance, extensionRegistry);
              break;
            }
            case 96: {
              object unknown;
              if(input.ReadEnum(ref result.threadType_, out unknown)) {
                result.hasThreadType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(12, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasThreadId {
        get { return result.hasThreadId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ThreadId {
        get { return result.ThreadId; }
        set { SetThreadId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetThreadId(ulong value) {
        PrepareBuilder();
        result.hasThreadId = true;
        result.threadId_ = value;
        return this;
      }
      public Builder ClearThreadId() {
        PrepareBuilder();
        result.hasThreadId = false;
        result.threadId_ = 0UL;
        return this;
      }
      
      public bool HasThreadName {
        get { return result.hasThreadName; }
      }
      public string ThreadName {
        get { return result.ThreadName; }
        set { SetThreadName(value); }
      }
      public Builder SetThreadName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThreadName = true;
        result.threadName_ = value;
        return this;
      }
      public Builder ClearThreadName() {
        PrepareBuilder();
        result.hasThreadName = false;
        result.threadName_ = "";
        return this;
      }
      
      public bool HasStartDumpTimeStamp {
        get { return result.hasStartDumpTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong StartDumpTimeStamp {
        get { return result.StartDumpTimeStamp; }
        set { SetStartDumpTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStartDumpTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasStartDumpTimeStamp = true;
        result.startDumpTimeStamp_ = value;
        return this;
      }
      public Builder ClearStartDumpTimeStamp() {
        PrepareBuilder();
        result.hasStartDumpTimeStamp = false;
        result.startDumpTimeStamp_ = 0UL;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::BonreePB.ThreadState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::BonreePB.ThreadState value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::BonreePB.ThreadState.THREAD_STATE_NEW;
        return this;
      }
      
      public bool HasCpuTime {
        get { return result.hasCpuTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong CpuTime {
        get { return result.CpuTime; }
        set { SetCpuTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCpuTime(ulong value) {
        PrepareBuilder();
        result.hasCpuTime = true;
        result.cpuTime_ = value;
        return this;
      }
      public Builder ClearCpuTime() {
        PrepareBuilder();
        result.hasCpuTime = false;
        result.cpuTime_ = 0UL;
        return this;
      }
      
      public bool HasLockName {
        get { return result.hasLockName; }
      }
      public string LockName {
        get { return result.LockName; }
        set { SetLockName(value); }
      }
      public Builder SetLockName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLockName = true;
        result.lockName_ = value;
        return this;
      }
      public Builder ClearLockName() {
        PrepareBuilder();
        result.hasLockName = false;
        result.lockName_ = "";
        return this;
      }
      
      public bool HasLockOwnedId {
        get { return result.hasLockOwnedId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong LockOwnedId {
        get { return result.LockOwnedId; }
        set { SetLockOwnedId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLockOwnedId(ulong value) {
        PrepareBuilder();
        result.hasLockOwnedId = true;
        result.lockOwnedId_ = value;
        return this;
      }
      public Builder ClearLockOwnedId() {
        PrepareBuilder();
        result.hasLockOwnedId = false;
        result.lockOwnedId_ = 0UL;
        return this;
      }
      
      public bool HasLockOwnerName {
        get { return result.hasLockOwnerName; }
      }
      public string LockOwnerName {
        get { return result.LockOwnerName; }
        set { SetLockOwnerName(value); }
      }
      public Builder SetLockOwnerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLockOwnerName = true;
        result.lockOwnerName_ = value;
        return this;
      }
      public Builder ClearLockOwnerName() {
        PrepareBuilder();
        result.hasLockOwnerName = false;
        result.lockOwnerName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> LockMonitorsList {
        get { return PrepareBuilder().lockMonitors_; }
      }
      public int LockMonitorsCount {
        get { return result.LockMonitorsCount; }
      }
      public string GetLockMonitors(int index) {
        return result.GetLockMonitors(index);
      }
      public Builder SetLockMonitors(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lockMonitors_[index] = value;
        return this;
      }
      public Builder AddLockMonitors(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lockMonitors_.Add(value);
        return this;
      }
      public Builder AddRangeLockMonitors(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.lockMonitors_.Add(values);
        return this;
      }
      public Builder ClearLockMonitors() {
        PrepareBuilder();
        result.lockMonitors_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> LockSynchronizersList {
        get { return PrepareBuilder().lockSynchronizers_; }
      }
      public int LockSynchronizersCount {
        get { return result.LockSynchronizersCount; }
      }
      public string GetLockSynchronizers(int index) {
        return result.GetLockSynchronizers(index);
      }
      public Builder SetLockSynchronizers(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lockSynchronizers_[index] = value;
        return this;
      }
      public Builder AddLockSynchronizers(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lockSynchronizers_.Add(value);
        return this;
      }
      public Builder AddRangeLockSynchronizers(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.lockSynchronizers_.Add(values);
        return this;
      }
      public Builder ClearLockSynchronizers() {
        PrepareBuilder();
        result.lockSynchronizers_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.ThreadMethod> CallgraphRootList {
        get { return PrepareBuilder().callgraphRoot_; }
      }
      public int CallgraphRootCount {
        get { return result.CallgraphRootCount; }
      }
      public global::BonreePB.ThreadMethod GetCallgraphRoot(int index) {
        return result.GetCallgraphRoot(index);
      }
      public Builder SetCallgraphRoot(int index, global::BonreePB.ThreadMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callgraphRoot_[index] = value;
        return this;
      }
      public Builder SetCallgraphRoot(int index, global::BonreePB.ThreadMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callgraphRoot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCallgraphRoot(global::BonreePB.ThreadMethod value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.callgraphRoot_.Add(value);
        return this;
      }
      public Builder AddCallgraphRoot(global::BonreePB.ThreadMethod.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.callgraphRoot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCallgraphRoot(scg::IEnumerable<global::BonreePB.ThreadMethod> values) {
        PrepareBuilder();
        result.callgraphRoot_.Add(values);
        return this;
      }
      public Builder ClearCallgraphRoot() {
        PrepareBuilder();
        result.callgraphRoot_.Clear();
        return this;
      }
      
      public bool HasThreadType {
       get { return result.hasThreadType; }
      }
      public global::BonreePB.ThreadType ThreadType {
        get { return result.ThreadType; }
        set { SetThreadType(value); }
      }
      public Builder SetThreadType(global::BonreePB.ThreadType value) {
        PrepareBuilder();
        result.hasThreadType = true;
        result.threadType_ = value;
        return this;
      }
      public Builder ClearThreadType() {
        PrepareBuilder();
        result.hasThreadType = false;
        result.threadType_ = global::BonreePB.ThreadType.THREAD_TYPE_BT;
        return this;
      }
    }
    static DumpThread() {
      object.ReferenceEquals(global::BonreePB.PbThreadDump.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ThreadDumpData : pb::GeneratedMessage<ThreadDumpData, ThreadDumpData.Builder> {
    private ThreadDumpData() { }
    private static readonly ThreadDumpData defaultInstance = new ThreadDumpData().MakeReadOnly();
    private static readonly string[] _threadDumpDataFieldNames = new string[] { "dumpResult", "dumpThreads", "errorMsg", "pid", "taskGUId", "timeStamp" };
    private static readonly uint[] _threadDumpDataFieldTags = new uint[] { 24, 50, 34, 40, 10, 16 };
    public static ThreadDumpData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ThreadDumpData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ThreadDumpData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_ThreadDumpData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ThreadDumpData, ThreadDumpData.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_ThreadDumpData__FieldAccessorTable; }
    }
    
    public const int TaskGUIdFieldNumber = 1;
    private bool hasTaskGUId;
    private string taskGUId_ = "";
    public bool HasTaskGUId {
      get { return hasTaskGUId; }
    }
    public string TaskGUId {
      get { return taskGUId_; }
    }
    
    public const int TimeStampFieldNumber = 2;
    private bool hasTimeStamp;
    private ulong timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int DumpResultFieldNumber = 3;
    private bool hasDumpResult;
    private global::BonreePB.DumpResult dumpResult_ = global::BonreePB.DumpResult.DUMP_SUCCESS;
    public bool HasDumpResult {
      get { return hasDumpResult; }
    }
    public global::BonreePB.DumpResult DumpResult {
      get { return dumpResult_; }
    }
    
    public const int ErrorMsgFieldNumber = 4;
    private bool hasErrorMsg;
    private string errorMsg_ = "";
    public bool HasErrorMsg {
      get { return hasErrorMsg; }
    }
    public string ErrorMsg {
      get { return errorMsg_; }
    }
    
    public const int PidFieldNumber = 5;
    private bool hasPid;
    private uint pid_;
    public bool HasPid {
      get { return hasPid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Pid {
      get { return pid_; }
    }
    
    public const int DumpThreadsFieldNumber = 6;
    private pbc::PopsicleList<global::BonreePB.DumpThread> dumpThreads_ = new pbc::PopsicleList<global::BonreePB.DumpThread>();
    public scg::IList<global::BonreePB.DumpThread> DumpThreadsList {
      get { return dumpThreads_; }
    }
    public int DumpThreadsCount {
      get { return dumpThreads_.Count; }
    }
    public global::BonreePB.DumpThread GetDumpThreads(int index) {
      return dumpThreads_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTaskGUId) return false;
        foreach (global::BonreePB.DumpThread element in DumpThreadsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _threadDumpDataFieldNames;
      if (hasTaskGUId) {
        output.WriteString(1, field_names[4], TaskGUId);
      }
      if (hasTimeStamp) {
        output.WriteUInt64(2, field_names[5], TimeStamp);
      }
      if (hasDumpResult) {
        output.WriteEnum(3, field_names[0], (int) DumpResult, DumpResult);
      }
      if (hasErrorMsg) {
        output.WriteString(4, field_names[2], ErrorMsg);
      }
      if (hasPid) {
        output.WriteUInt32(5, field_names[3], Pid);
      }
      if (dumpThreads_.Count > 0) {
        output.WriteMessageArray(6, field_names[1], dumpThreads_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTaskGUId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TaskGUId);
      }
      if (hasTimeStamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TimeStamp);
      }
      if (hasDumpResult) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) DumpResult);
      }
      if (hasErrorMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ErrorMsg);
      }
      if (hasPid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Pid);
      }
      foreach (global::BonreePB.DumpThread element in DumpThreadsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ThreadDumpData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadDumpData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadDumpData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadDumpData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ThreadDumpData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ThreadDumpData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadDumpData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ThreadDumpData MakeReadOnly() {
      dumpThreads_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ThreadDumpData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ThreadDumpData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ThreadDumpData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ThreadDumpData result;
      
      private ThreadDumpData PrepareBuilder() {
        if (resultIsReadOnly) {
          ThreadDumpData original = result;
          result = new ThreadDumpData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ThreadDumpData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ThreadDumpData.Descriptor; }
      }
      
      public override ThreadDumpData DefaultInstanceForType {
        get { return global::BonreePB.ThreadDumpData.DefaultInstance; }
      }
      
      public override ThreadDumpData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ThreadDumpData) {
          return MergeFrom((ThreadDumpData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ThreadDumpData other) {
        if (other == global::BonreePB.ThreadDumpData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTaskGUId) {
          TaskGUId = other.TaskGUId;
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasDumpResult) {
          DumpResult = other.DumpResult;
        }
        if (other.HasErrorMsg) {
          ErrorMsg = other.ErrorMsg;
        }
        if (other.HasPid) {
          Pid = other.Pid;
        }
        if (other.dumpThreads_.Count != 0) {
          result.dumpThreads_.Add(other.dumpThreads_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_threadDumpDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _threadDumpDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTaskGUId = input.ReadString(ref result.taskGUId_);
              break;
            }
            case 16: {
              result.hasTimeStamp = input.ReadUInt64(ref result.timeStamp_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.dumpResult_, out unknown)) {
                result.hasDumpResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34: {
              result.hasErrorMsg = input.ReadString(ref result.errorMsg_);
              break;
            }
            case 40: {
              result.hasPid = input.ReadUInt32(ref result.pid_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.dumpThreads_, global::BonreePB.DumpThread.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTaskGUId {
        get { return result.hasTaskGUId; }
      }
      public string TaskGUId {
        get { return result.TaskGUId; }
        set { SetTaskGUId(value); }
      }
      public Builder SetTaskGUId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskGUId = true;
        result.taskGUId_ = value;
        return this;
      }
      public Builder ClearTaskGUId() {
        PrepareBuilder();
        result.hasTaskGUId = false;
        result.taskGUId_ = "";
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStamp(ulong value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0UL;
        return this;
      }
      
      public bool HasDumpResult {
       get { return result.hasDumpResult; }
      }
      public global::BonreePB.DumpResult DumpResult {
        get { return result.DumpResult; }
        set { SetDumpResult(value); }
      }
      public Builder SetDumpResult(global::BonreePB.DumpResult value) {
        PrepareBuilder();
        result.hasDumpResult = true;
        result.dumpResult_ = value;
        return this;
      }
      public Builder ClearDumpResult() {
        PrepareBuilder();
        result.hasDumpResult = false;
        result.dumpResult_ = global::BonreePB.DumpResult.DUMP_SUCCESS;
        return this;
      }
      
      public bool HasErrorMsg {
        get { return result.hasErrorMsg; }
      }
      public string ErrorMsg {
        get { return result.ErrorMsg; }
        set { SetErrorMsg(value); }
      }
      public Builder SetErrorMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorMsg = true;
        result.errorMsg_ = value;
        return this;
      }
      public Builder ClearErrorMsg() {
        PrepareBuilder();
        result.hasErrorMsg = false;
        result.errorMsg_ = "";
        return this;
      }
      
      public bool HasPid {
        get { return result.hasPid; }
      }
      [global::System.CLSCompliant(false)]
      public uint Pid {
        get { return result.Pid; }
        set { SetPid(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPid(uint value) {
        PrepareBuilder();
        result.hasPid = true;
        result.pid_ = value;
        return this;
      }
      public Builder ClearPid() {
        PrepareBuilder();
        result.hasPid = false;
        result.pid_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::BonreePB.DumpThread> DumpThreadsList {
        get { return PrepareBuilder().dumpThreads_; }
      }
      public int DumpThreadsCount {
        get { return result.DumpThreadsCount; }
      }
      public global::BonreePB.DumpThread GetDumpThreads(int index) {
        return result.GetDumpThreads(index);
      }
      public Builder SetDumpThreads(int index, global::BonreePB.DumpThread value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dumpThreads_[index] = value;
        return this;
      }
      public Builder SetDumpThreads(int index, global::BonreePB.DumpThread.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dumpThreads_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDumpThreads(global::BonreePB.DumpThread value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dumpThreads_.Add(value);
        return this;
      }
      public Builder AddDumpThreads(global::BonreePB.DumpThread.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dumpThreads_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDumpThreads(scg::IEnumerable<global::BonreePB.DumpThread> values) {
        PrepareBuilder();
        result.dumpThreads_.Add(values);
        return this;
      }
      public Builder ClearDumpThreads() {
        PrepareBuilder();
        result.dumpThreads_.Clear();
        return this;
      }
    }
    static ThreadDumpData() {
      object.ReferenceEquals(global::BonreePB.PbThreadDump.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ThreadDumpReq : pb::GeneratedMessage<ThreadDumpReq, ThreadDumpReq.Builder> {
    private ThreadDumpReq() { }
    private static readonly ThreadDumpReq defaultInstance = new ThreadDumpReq().MakeReadOnly();
    private static readonly string[] _threadDumpReqFieldNames = new string[] { "agentIdentity", "data" };
    private static readonly uint[] _threadDumpReqFieldTags = new uint[] { 10, 18 };
    public static ThreadDumpReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ThreadDumpReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ThreadDumpReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_ThreadDumpReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ThreadDumpReq, ThreadDumpReq.Builder> InternalFieldAccessors {
      get { return global::BonreePB.PbThreadDump.internal__static_BonreePB_ThreadDumpReq__FieldAccessorTable; }
    }
    
    public const int AgentIdentityFieldNumber = 1;
    private bool hasAgentIdentity;
    private global::BonreePB.AgentIdentity agentIdentity_;
    public bool HasAgentIdentity {
      get { return hasAgentIdentity; }
    }
    public global::BonreePB.AgentIdentity AgentIdentity {
      get { return agentIdentity_ ?? global::BonreePB.AgentIdentity.DefaultInstance; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private global::BonreePB.ThreadDumpData data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::BonreePB.ThreadDumpData Data {
      get { return data_ ?? global::BonreePB.ThreadDumpData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasData) {
          if (!Data.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _threadDumpReqFieldNames;
      if (hasAgentIdentity) {
        output.WriteMessage(1, field_names[0], AgentIdentity);
      }
      if (hasData) {
        output.WriteMessage(2, field_names[1], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAgentIdentity) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, AgentIdentity);
      }
      if (hasData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Data);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ThreadDumpReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadDumpReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThreadDumpReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadDumpReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ThreadDumpReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ThreadDumpReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ThreadDumpReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThreadDumpReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ThreadDumpReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ThreadDumpReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ThreadDumpReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ThreadDumpReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ThreadDumpReq result;
      
      private ThreadDumpReq PrepareBuilder() {
        if (resultIsReadOnly) {
          ThreadDumpReq original = result;
          result = new ThreadDumpReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ThreadDumpReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::BonreePB.ThreadDumpReq.Descriptor; }
      }
      
      public override ThreadDumpReq DefaultInstanceForType {
        get { return global::BonreePB.ThreadDumpReq.DefaultInstance; }
      }
      
      public override ThreadDumpReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ThreadDumpReq) {
          return MergeFrom((ThreadDumpReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ThreadDumpReq other) {
        if (other == global::BonreePB.ThreadDumpReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentIdentity) {
          MergeAgentIdentity(other.AgentIdentity);
        }
        if (other.HasData) {
          MergeData(other.Data);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_threadDumpReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _threadDumpReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::BonreePB.AgentIdentity.Builder subBuilder = global::BonreePB.AgentIdentity.CreateBuilder();
              if (result.hasAgentIdentity) {
                subBuilder.MergeFrom(AgentIdentity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentIdentity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::BonreePB.ThreadDumpData.Builder subBuilder = global::BonreePB.ThreadDumpData.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentIdentity {
       get { return result.hasAgentIdentity; }
      }
      public global::BonreePB.AgentIdentity AgentIdentity {
        get { return result.AgentIdentity; }
        set { SetAgentIdentity(value); }
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = value;
        return this;
      }
      public Builder SetAgentIdentity(global::BonreePB.AgentIdentity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentIdentity = true;
        result.agentIdentity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentIdentity(global::BonreePB.AgentIdentity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentIdentity &&
            result.agentIdentity_ != global::BonreePB.AgentIdentity.DefaultInstance) {
            result.agentIdentity_ = global::BonreePB.AgentIdentity.CreateBuilder(result.agentIdentity_).MergeFrom(value).BuildPartial();
        } else {
          result.agentIdentity_ = value;
        }
        result.hasAgentIdentity = true;
        return this;
      }
      public Builder ClearAgentIdentity() {
        PrepareBuilder();
        result.hasAgentIdentity = false;
        result.agentIdentity_ = null;
        return this;
      }
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::BonreePB.ThreadDumpData Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::BonreePB.ThreadDumpData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::BonreePB.ThreadDumpData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::BonreePB.ThreadDumpData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::BonreePB.ThreadDumpData.DefaultInstance) {
            result.data_ = global::BonreePB.ThreadDumpData.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
    }
    static ThreadDumpReq() {
      object.ReferenceEquals(global::BonreePB.PbThreadDump.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
